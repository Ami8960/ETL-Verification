Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_ACTIONS','DM_CASE_ACTIONS','ACTION_STATUS',null,null,null,null,'SELECT
vca.case_id,
vca.seq_num,
    CASE
        WHEN ACTION_STATUS = 0 THEN ''completed''
        ELSE ''open''
        END AS ACTION_STATUS
FROM argus.V_CASE_ACTIONS vca where 
vca.deleted is NULL','select case_id, seq_num,lower(C_ACTION_STATUS)
from &MARTUSERNAME..DM_CASE_ACTIONS
WHERE 
SEQ_NUM>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PROD_INGREDIENT','DM_CASE_PRODUCT','CSV_INGREDIENT, CSV_INGREDIENT_J',null,null,null,null,TO_CLOB(q'{SELECT 
    vcp.case_id, 
    vcp.seq_num,
    LISTAGG(UPPER(vli.ingredient), ', ' ON OVERFLOW TRUNCATE) WITHIN GROUP (ORDER BY vcp.SEQ_NUM, cpi.SEQ_NUM, cpi.ingredient_id) AS concatenated_ingredient,
    LISTAGG(UPPER(vli.ingredient_j), ', ' ON OVERFLOW TRUNCATE) WITHIN GROUP (ORDER BY  vcp.SEQ_NUM, cpi.seq_num, cpi.ingredient_idA) S concatenated_ingredient_j
FROM 
    (select * from argus.v_case_prod_ingredient where deleted is null) cpi, argus.v_case_product vcp,   (select * from argus.v_lm_i}') || TO_CLOB(q'{ngredients where deleted is null) vli 

WHERE VCP.CASE_ID= CPI.CASE_ID(+)
    AND VCP.SEQ_NUM=CPI.SEQ_NUM(+)
    AND vcp.deleted IS NULL
    AND cpi.ingredient_id = vli.ingredient_id(+)

    Group By vcp.case_id, vcp.seq_num}'),'SELECT 
    case_id,
    seq_num,
    TO_CHAR(UPPER(SUBSTR(CSV_INGREDIENT, 1, 4000))),
    TO_CHAR(UPPER(SUBSTR(CSV_INGREDIENT_J, 1, 4000)))
FROM 
    &MARTUSERNAME..dm_case_product
WHERE 
    seq_num > 0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_ACTIONS','DM_CASE_DATA','CASE_ID, C_OPEN_ACTION_ITEM_FLAG, C_ACT_ITEM_DATE',null,null,null,null,TO_CLOB(q'{SELECT 
    VCM.CASE_ID,
    CASE
        WHEN EXISTS (
            SELECT 1
            FROM argus.V_CASE_ACTIONS VCA_inner
            JOIN argus.V_LM_ACTION_ITEM_TYPE LAIT_inner
            ON VCA_inner.CODE = LAIT_inner.ACTION_TYPE_ID
            WHERE VCA_inner.CASE_ID = VCM.CASE_ID
            AND VCA_INNER.DELETED IS NULL
           AND ACTION_STATUS = 1
            AND LOWER(LAIT_inner.ACTION_TYPE) LIKE '%pending%'
        ) THEN 'Yes'
        ELSE 'No'
    END AS C_OPEN_ACTION_ITEM_FLAG}') || TO_CLOB(q'{,
    TO_CHAR(MIN(VCA.DATE_OPEN), 'DD-MON-YYYY') AS C_ACT_ITEM_DATE
FROM (SELECT * FROM argus.V_CASE_ACTIONS VCA LEFT JOIN argus.V_LM_ACTION_ITEM_TYPE LAIT_inner ON VCA.CODE = LAIT_inner.ACTION_TYPE_ID WHERE VCA.DELETED IS NULL
AND VCA.ACTION_STATUS = 1
AND LOWER(ACTION_TYPE) LIKE '%pending%') VCA
RIGHT JOIN argus.V_CASE_MASTER VCM ON VCA.CASE_ID = VCM.CASE_ID
WHERE VCM.CASE_ID <> -1 
GROUP BY VCM.CASE_ID }'),'SELECT 
    DCD.CASE_ID,
    DCD.C_OPEN_ACTION_ITEM_FLAG,
    TO_CHAR(DCD.C_ACT_ITEM_DATE, ''DD-MON-YYYY'') AS C_ACT_ITEM_DATE
FROM &MARTUSERNAME..DM_CASE_DATA DCD 
GROUP BY 
    DCD.CASE_ID, 
    DCD.C_OPEN_ACTION_ITEM_FLAG, 
    DCD.C_ACT_ITEM_DATE ');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_HOSP','DM_CASE_EVENT','START_DATE_PARTIAL, END_DATE_PARTIAL',null,null,null,null,TO_CLOB(q'{SELECT 
    VCE.CASE_ID, 
    VCE.SEQ_NUM,
    CASE 
        WHEN LENGTH(VCH.START_DATE_PARTIAL) = 4 THEN 
            CONCAT('??-???-', VCH.START_DATE_PARTIAL)
        WHEN LENGTH(VCH.START_DATE_PARTIAL) = 8 THEN 
            CONCAT('??-', VCH.START_DATE_PARTIAL)
        ELSE VCH.START_DATE_PARTIAL
    END AS START_DATE_PARTIAL,
    CASE 
        WHEN LENGTH(VCH.END_DATE_PARTIAL) = 4 THEN 
            CONCAT('??-???-', VCH.END_DATE_PARTIAL)
        WHEN LENGTH(VCH.END_DATE_PARTIAL) = 8 THEN 
  }') || TO_CLOB(q'{          CONCAT('??-', VCH.END_DATE_PARTIAL)
        ELSE VCH.END_DATE_PARTIAL
    END AS END_DATE_PARTIAL
FROM 
    (SELECT * FROM ARGUS.V_CASE_HOSP WHERE ARGUS.V_CASE_HOSP.deleted IS NULL) VCH, 
    ARGUS.V_CASE_EVENT VCE 
WHERE 
    VCE.CASE_ID = VCH.CASE_ID(+) 
    AND VCE.SEQ_NUM = VCH.SEQ_NUM(+) 
    AND VCE.DELETED IS NULL}'),'SELECT 
    CASE_ID,
    SEQ_NUM,
    START_DATE_PARTIAL,
    END_DATE_PARTIAL
FROM 
    &MARTUSERNAME..DM_CASE_EVENT
WHERE 
    SEQ_NUM > 0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PAT_RACE','DM_CASE_PAT_RACE','C_PARENT',null,null,null,null,'SELECT
CPR.CASE_ID,
CASE
        WHEN CPR.Parent = 1 THEN ''Parent''
        ELSE ''Patient''
    END AS C_PARENT
FROM ARGUS.v_CASE_PAT_RACE CPR
WHERE CPR.DELETED IS NULL','SELECT
CASE_ID,C_PARENT
FROM &MARTUSERNAME..DM_CASE_PAT_RACE
Where seq_num>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_NEONATES','DM_CASE_NEONATES','C_PARENT, C_PARENT_J',null,null,null,null,'SELECT 
CASE_ID,
SEQ_NUM,
    CASE
        WHEN VCN.Parent = 1 THEN ''parent''
        ELSE ''PATIENT''
    END AS C_PARENT,
    CASE
        WHEN VCN.Parent = 1 THEN ''親''
	ELSE ''忍耐強い''
    END AS C_PARENT_J 
FROM 
    ARGUS.V_CASE_NEONATES VCN
    WHERE VCN.DELETED IS NULL','Select 
CASE_ID,
SEQ_NUM,
upper(C_PARENT),
upper(C_PARENT_J)
FROM &MARTUSERNAME..dm_case_neonates
WHERE SEQ_NUM > 0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PMDA_LICENSE','DM_CASE_PMDA_LICENSE','INCOMPLETE_COMMENT, FUTURE_ACTIONS, FORM_2_MEMO, SENDER_COMMENT, PROBLEM_DESC, RETRO_INFECTION, COMMENTS_TIMEFRAME, REASON_DOWNGRADE',null,null,null,null,TO_CLOB(q'{SELECT 
    VCPL.CASE_ID,
    VCPL.SEQ_NUM,
    CASE
        WHEN LENGTH(VCPLCIC.INCOMPLETE_COMMENT) > 3997 THEN
            SUBSTR(VCPLCIC.INCOMPLETE_COMMENT, 1, 3997) || '...'
        ELSE
            VCPLCIC.INCOMPLETE_COMMENT
    END AS INCOMPLETE_COMMENT,
    CASE
        WHEN LENGTH(VCPLCFA.FUTURE_ACTIONS) > 3997 THEN
            SUBSTR(VCPLCFA.FUTURE_ACTIONS, 1, 3997) || '...'
        ELSE
            VCPLCFA.FUTURE_ACTIONS
    END AS FUTURE_ACTIONS,
    CASE
        WHEN LENGTH(VCPLFM.FO}') || TO_CLOB(q'{RM_2_MEMO) > 3997 THEN
            SUBSTR(VCPLFM.FORM_2_MEMO, 1, 3997) || '...'
        ELSE
            VCPLFM.FORM_2_MEMO
    END AS FORM_2_MEMO,
    CASE
        WHEN LENGTH(VCPLSC.SENDER_COMMENT) > 3997 THEN
            SUBSTR(VCPLSC.SENDER_COMMENT, 1, 3997) || '...'
        ELSE
            VCPLSC.SENDER_COMMENT
    END AS SENDER_COMMENT,
    CASE
        WHEN LENGTH(VCPLPD.PROBLEM_DESC) > 3997 THEN
            SUBSTR(VCPLPD.PROBLEM_DESC, 1, 3997) || '...'
        ELSE
            VCPLPD.PR}') || TO_CLOB(q'{OBLEM_DESC
    END AS PROBLEM_DESC,
    CASE
        WHEN LENGTH(VCPLRI.RETRO_INFECTION) > 3997 THEN
            SUBSTR(VCPLRI.RETRO_INFECTION, 1, 3997) || '...'
        ELSE
            VCPLRI.RETRO_INFECTION
    END AS RETRO_INFECTION,
    CASE
        WHEN LENGTH(VCPLCT.COMMENTS_TIMEFRAME) > 3997 THEN
            SUBSTR(VCPLCT.COMMENTS_TIMEFRAME, 1, 3997) || '...'
        ELSE
            VCPLCT.COMMENTS_TIMEFRAME
    END AS COMMENTS_TIMEFRAME,
    CASE
        WHEN LENGTH(VCPLRD.REASON_DOWNG}') || TO_CLOB(q'{RADE) > 3997 THEN
            SUBSTR(VCPLRD.REASON_DOWNGRADE, 1, 3997) || '...'
        ELSE
            VCPLRD.REASON_DOWNGRADE
    END AS REASON_DOWNGRADE
FROM 
    ARGUS.V_CASE_PMDA_LICENSE VCPL
LEFT JOIN ARGUS.V_CASE_PMDA_LIC_CLOB_INCOMP_CMT VCPLCIC
    ON VCPL.CASE_ID = VCPLCIC.CASE_ID 
    AND VCPL.SEQ_NUM = VCPLCIC.SEQ_NUM
    AND VCPLCIC.TEXT_ORDER = 1
LEFT JOIN ARGUS.V_CASE_PMDA_LIC_CLOB_FUTURE_ACTN VCPLCFA
    ON VCPL.CASE_ID = VCPLCFA.CASE_ID 
    AND VCPL.SEQ_NUM = VCPLCFA.SEQ_NUM
  }') || TO_CLOB(q'{  AND VCPLCFA.TEXT_ORDER = 1
LEFT JOIN ARGUS.V_CASE_PMDA_LIC_CLOB_FORM_2_MEMO VCPLFM
    ON VCPL.CASE_ID = VCPLFM.CASE_ID 
    AND VCPL.SEQ_NUM = VCPLFM.SEQ_NUM
    AND VCPLFM.TEXT_ORDER = 1
LEFT JOIN ARGUS.V_CASE_PMDA_LIC_CLOB_SENDER_CMT VCPLSC
    ON VCPL.CASE_ID = VCPLSC.CASE_ID 
    AND VCPL.SEQ_NUM = VCPLSC.SEQ_NUM
    AND VCPLSC.TEXT_ORDER = 1
LEFT JOIN ARGUS.V_CASE_PMDA_LIC_CLOB_PROB_DESC VCPLPD
    ON VCPL.CASE_ID = VCPLPD.CASE_ID 
    AND VCPL.SEQ_NUM = VCPLPD.SEQ_NUM
    AND VCPLPD.TEX}') || TO_CLOB(q'{T_ORDER = 1
LEFT JOIN ARGUS.V_CASE_PMDA_LIC_CLOB_RETR_INFECT VCPLRI
    ON VCPL.CASE_ID = VCPLRI.CASE_ID 
    AND VCPL.SEQ_NUM = VCPLRI.SEQ_NUM
    AND VCPLRI.TEXT_ORDER = 1
LEFT JOIN ARGUS.V_CASE_PMDA_LIC_CLOB_CMTS_TIME VCPLCT
    ON VCPL.CASE_ID = VCPLCT.CASE_ID 
    AND VCPL.SEQ_NUM = VCPLCT.SEQ_NUM
    AND VCPLCT.TEXT_ORDER = 1
LEFT JOIN ARGUS.V_CASE_PMDA_LIC_CLOB_RSN_DOWNGRA VCPLRD
    ON VCPL.CASE_ID = VCPLRD.CASE_ID 
    AND VCPL.SEQ_NUM = VCPLRD.SEQ_NUM
    AND VCPLRD.TEXT_ORDER = 1
WHER}') || TO_CLOB(q'{E 
    VCPL.DELETED IS NULL}'),'SELECT CASE_ID,
       SEQ_NUM,
       C_INCOMPLETE_COMMENT,
       C_FUTURE_ACTIONS,
       C_FORM_2_MEMO,
       C_SENDER_COMMENT,
       C_PROBLEM_DESC,
       C_RETRO_INFECTION,
       C_COMMENTS_TIMEFRAME,
       C_REASON_DOWNGRADE
FROM &MARTUSERNAME..DM_CASE_PMDA_LICENSE
WHERE SEQ_NUM > 0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PAT_HIST_INGREDIENT','DM_CASE_PAT_HIST_INGREDIENT','C_CONCENTRATION, C_CONCENTRATION_J',null,null,null,null,'SELECT 
     vcm.case_id,
     cpi.seq_num,
     cpi.concentration||cfg.unit_J AS c_concentration_j,
     cpi.concentration||cfg.unit AS c_concentration

     FROM  argus.v_case_master vcm,
           (select * from "ARGUS".v_case_pat_hist_ingredient cpi where cpi.deleted IS NULL) cpi,
           (SELECT * from "ARGUS".v_lm_dose_units cfg where deleted IS NULL) cfg 
     WHERE  vcm.case_id=cpi.case_id(+)
     AND    cpi.conc_unit_id=cfg.unit_id(+) AND vcm.case_id<>-1 and cpi.seq_num>0','SELECT 
     case_id,
     seq_num,
     c_concentration,
     c_concentration_j
     FROM &MARTUSERNAME..dm_case_pat_hist_ingredient
     WHERE seq_num>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_RELATIONSHIPS','DM_CASE_EVENT','CSV_SYMPTOM, CSV_SYMPTOM_J',null,null,null,null,TO_CLOB(q'{SELECT 
    VCE.CASE_ID,
    VCE.SEQ_NUM,
        LISTAGG(nvl(vce.pref_term, vce.desc_reptd), ', ') WITHIN GROUP (ORDER BY vce.case_id,vce.seq_num)AS CSV_SYMPTOM,
        LISTAGG(nvl(vce.pref_term_j, vce.desc_reptd_j), ', ') WITHIN GROUP (ORDER BY vce.case_id,vce.seq_num) AS CSV_SYMPTOM_J
FROM
    ARGUS.V_CASE_EVENT VCE
JOIN
    ARGUS.V_CASE_RELATIONSHIPS VCR
    ON VCE.CASE_ID = VCR.CASE_ID
    AND VCE.SEQ_NUM = VCR.DIAGNOSIS
    AND VCR.DELETED IS NULL
WHERE
    VCE.DELETED IS NULL
GROUP BY
  }') || TO_CLOB(q'{  VCE.CASE_ID,
    VCE.SEQ_NUM}'),'SELECT 
    CASE_ID,
    SEQ_NUM,
    CSV_SYMPTOM,
    CSV_SYMPTOM_J
FROM &MARTUSERNAME..DM_CASE_EVENT  where NVL(CSV_SYMPTOM,CSV_SYMPTOM_J) IS NOT NULL');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_EU_DEVICE','DM_CASE_PROD_DEVICES','EXPECTED_DATE_PARTIAL, PROJECTED_TIMING, PROJECTED_TIMING_FINAL, 
    CORRECTIVE_ACTION_FINAL, INVESTIGATION_RESULT, FURTHER_INVESTIGATION, CURRENT_DEV_LOCATIONS, COUNTRIES_OF_DISTRIBUTION, CORRECTIVE_ACTION, INDENTIF, MANUFACTURER_COMMENTS',null,null,null,null,TO_CLOB(q'{SELECT 
    VCPD.CASE_ID,
    VCPD.SEQ_NUM,
    CASE 
        WHEN LENGTH(VCED.EXPECTED_DATE_PARTIAL) = 4 THEN 
            CONCAT('??-???-', VCED.EXPECTED_DATE_PARTIAL)
        WHEN LENGTH(VCED.EXPECTED_DATE_PARTIAL) = 8 THEN 
            CONCAT('??-', VCED.EXPECTED_DATE_PARTIAL)
        ELSE VCED.EXPECTED_DATE_PARTIAL
    END AS EXPECTED_DATE_PARTIAL,
    CASE 
        WHEN LENGTH(VCEDCT.PROJECTED_TIMING) > 3997 THEN 
            SUBSTR(VCEDCT.PROJECTED_TIMING, 1, 3997) || '...'
        ELSE 
}') || TO_CLOB(q'{            VCEDCT.PROJECTED_TIMING 
    END AS PROJECTED_TIMING,
    CASE 
        WHEN LENGTH(VCEDCTF.PROJECTED_TIMING_FINAL) > 3997 THEN 
            SUBSTR(VCEDCTF.PROJECTED_TIMING_FINAL, 1, 3997) || '...'
        ELSE 
            VCEDCTF.PROJECTED_TIMING_FINAL 
    END AS PROJECTED_TIMING_FINAL,
    CASE 
        WHEN LENGTH(VCEDCA.CORRECTIVE_ACTION_FINAL) > 3997 THEN 
            SUBSTR(VCEDCA.CORRECTIVE_ACTION_FINAL, 1, 3997) || '...'
        ELSE 
            VCEDCA.CORRECTIVE_ACTION_FI}') || TO_CLOB(q'{NAL 
    END AS CORRECTIVE_ACTION_FINAL,
    CASE 
        WHEN LENGTH(VCEDIR.INVESTIGATION_RESULT) > 3997 THEN 
            SUBSTR(VCEDIR.INVESTIGATION_RESULT, 1, 3997) || '...'
        ELSE 
            VCEDIR.INVESTIGATION_RESULT 
    END AS INVESTIGATION_RESULT,
    CASE 
        WHEN LENGTH(VCEDFI.FURTHER_INVESTIGATION) > 3997 THEN 
            SUBSTR(VCEDFI.FURTHER_INVESTIGATION, 1, 3997) || '...' 
        ELSE 
            VCEDFI.FURTHER_INVESTIGATION 
    END AS FURTHER_INVESTIGATION,
  }') || TO_CLOB(q'{  CASE 
        WHEN LENGTH(VCEDDL.CURRENT_DEV_LOCATIONS) > 3997 THEN 
            SUBSTR(VCEDDL.CURRENT_DEV_LOCATIONS, 1, 3997) || '...'
        ELSE 
            VCEDDL.CURRENT_DEV_LOCATIONS 
    END AS CURRENT_DEV_LOCATIONS,
    CASE 
        WHEN LENGTH(VCEDCD.COUNTRIES_OF_DISTRIBUTION) > 3997 THEN 
            SUBSTR(VCEDCD.COUNTRIES_OF_DISTRIBUTION, 1, 3997) || '...'
        ELSE 
            VCEDCD.COUNTRIES_OF_DISTRIBUTION 
    END AS COUNTRIES_OF_DISTRIBUTION,
    CASE 
        WHEN LEN}') || TO_CLOB(q'{GTH(VCEDC.CORRECTIVE_ACTION) > 3997 THEN 
            SUBSTR(VCEDC.CORRECTIVE_ACTION, 1, 3997) || '...'
        ELSE 
            VCEDC.CORRECTIVE_ACTION 
    END AS CORRECTIVE_ACTION,
    CASE 
        WHEN LENGTH(VCEDI.INDENTIF) > 3997 THEN 
            SUBSTR(VCEDI.INDENTIF, 1, 3997) || '...' 
        ELSE 
            VCEDI.INDENTIF 
    END AS INDENTIF,
    CASE 
        WHEN LENGTH(VCEDMC.MANUFACTURER_COMMENTS) > 3997 THEN 
            SUBSTR(VCEDMC.MANUFACTURER_COMMENTS, 1, 3997) || '...'}') || TO_CLOB(q'{ 
        ELSE 
            VCEDMC.MANUFACTURER_COMMENTS 
    END AS MANUFACTURER_COMMENTS
FROM 
    ARGUS.V_CASE_PROD_DEVICES VCPD
LEFT JOIN 
    (SELECT * FROM ARGUS.V_CASE_EU_DEVICE WHERE DELETED IS NULL) VCED
    ON VCPD.CASE_ID = VCED.CASE_ID 
    AND VCPD.SEQ_NUM = VCED.PROD_SEQ_NUM
LEFT JOIN 
    argus.v_CASE_EU_DEVICE_CLOB_TIMING VCEDCT
    ON VCPD.CASE_ID = VCEDCT.CASE_ID 
    AND VCPD.SEQ_NUM = VCEDCT.SEQ_NUM 
    AND VCEDCT.TEXT_ORDER = 1
LEFT JOIN 
    argus.v_CASE_EU_DEVICE_CLOB_TIM}') || TO_CLOB(q'{ING_FNL VCEDCTF
    ON VCPD.CASE_ID = VCEDCTF.CASE_ID 
    AND VCPD.SEQ_NUM = VCEDCTF.SEQ_NUM 
    AND VCEDCTF.TEXT_ORDER = 1
LEFT JOIN 
    argus.v_CASE_EU_DEVICE_CLOB_CA_FINAL VCEDCA
    ON VCPD.CASE_ID = VCEDCA.CASE_ID 
    AND VCPD.SEQ_NUM = VCEDCA.SEQ_NUM 
    AND VCEDCA.TEXT_ORDER = 1
LEFT JOIN 
    argus.v_CASE_EU_DEVICE_CLOB_INV_RESULT VCEDIR
    ON VCPD.CASE_ID = VCEDIR.CASE_ID 
    AND VCPD.SEQ_NUM = VCEDIR.SEQ_NUM 
    AND VCEDIR.TEXT_ORDER = 1
LEFT JOIN 
    argus.v_CASE_EU_DEVICE_CL}') || TO_CLOB(q'{OB_FURTHER_IN VCEDFI
    ON VCPD.CASE_ID = VCEDFI.CASE_ID 
    AND VCPD.SEQ_NUM = VCEDFI.SEQ_NUM 
    AND VCEDFI.TEXT_ORDER = 1
LEFT JOIN 
    argus.v_CASE_EU_DEVICE_CLOB_DEV_LOCAT VCEDDL
    ON VCPD.CASE_ID = VCEDDL.CASE_ID 
    AND VCPD.SEQ_NUM = VCEDDL.SEQ_NUM 
    AND VCEDDL.TEXT_ORDER = 1
LEFT JOIN 
    argus.v_CASE_EU_DEVICE_CLOB_CNTRY_DIST VCEDCD
    ON VCPD.CASE_ID = VCEDCD.CASE_ID 
    AND VCPD.SEQ_NUM = VCEDCD.SEQ_NUM 
    AND VCEDCD.TEXT_ORDER = 1
LEFT JOIN 
    argus.v_CASE_EU_DEVICE}') || TO_CLOB(q'{_CLOB_CA VCEDC
    ON VCPD.CASE_ID = VCEDC.CASE_ID 
    AND VCPD.SEQ_NUM = VCEDC.SEQ_NUM 
    AND VCEDC.TEXT_ORDER = 1
LEFT JOIN 
    argus.v_CASE_EU_DEVICE_CLOB_INDENTIF VCEDI
    ON VCPD.CASE_ID = VCEDI.CASE_ID 
    AND VCPD.SEQ_NUM = VCEDI.SEQ_NUM 
    AND VCEDI.TEXT_ORDER = 1
LEFT JOIN 
    argus.v_CASE_EU_DEVICE_CLOB_MFR_CMTS VCEDMC
    ON VCPD.CASE_ID = VCEDMC.CASE_ID 
    AND VCPD.SEQ_NUM = VCEDMC.SEQ_NUM 
    AND VCEDMC.TEXT_ORDER = 1
WHERE 
    VCPD.DELETED IS NULL
    }'),'SELECT 
    CASE_ID,
    SEQ_NUM,
    EXPECTED_DATE_PARTIAL,
    C_PROJECTED_TIMING,
    C_PROJECTED_TIMING_FINAL,
    C_CORRECTIVE_ACTION_FINAL,
    C_INVESTIGATION_RESULT,
    C_FURTHER_INVESTIGATION,
    C_CURRENT_DEV_LOCATIONS,
    C_COUNTRIES_OF_DISTRIBUTION,
    C_CORRECTIVE_ACTION,
    C_INDENTIF,
    C_MANUFACTURER_COMMENTS
FROM 
    &MARTUSERNAME..DM_CASE_PROD_DEVICES');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('LM_JUSTIFICATIONS','DM_LM_JUSTIFICATIONS','C_FIELD_DESC',null,null,null,null,'select 
VLJ.FIELD_ID,
NVL(VCF.FIELD_LABEL, VCF.UNIQUE_FIELD_LABEL) AS C_FIELD_DESC 
from ARGUS.V_LM_JUSTIFICATIONS VLJ, ARGUS.V_CMN_FIELDS VCF
WHERE VLJ.FIELD_ID=VCF.FIELD_ID
AND VLJ.DELETED IS NULL','SELECT
FIELD_ID,
C_FIELD_DESC
FROM &MARTUSERNAME..DM_LM_JUSTIFICATIONS');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('LM_PRODUCT_LOTS','DM_LM_PRODUCT_LOTS','EXPIRATION_DATE_PARTIAL',null,null,null,null,'SELECT 
LOT_ID,
CASE 
        WHEN LENGTH(EXPIRATION_DATE_PARTIAL) = 5 THEN 
            CONCAT(''??-???-'', EXPIRATION_DATE_PARTIAL)
        WHEN LENGTH(EXPIRATION_DATE_PARTIAL) = 7 THEN 
            CONCAT(''??-'', EXPIRATION_DATE_PARTIAL)
        ELSE EXPIRATION_DATE_PARTIAL
END AS EXPIRATION_DATE_PARTIAL
from ARGUS.V_LM_PRODUCT_LOTS
WHERE DELETED IS NULL','SELECT
LOT_ID,
TO_CHAR(EXPIRATION_DATE_PARTIAL)
FROM &MARTUSERNAME..DM_LM_PRODUCT_LOTS');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PROD_INDICATIONS','DM_CASE_PROD_INDICATIONS','IND_REPTD',null,null,null,null,TO_CLOB(q'{SELECT
    VCM.case_id, 
    VCPI.seq_num, 
    VCPI.prod_seq_num,
    CASE
        WHEN vcnf.case_id IS NOT NULL AND vcnf.seq_num IS NOT NULL THEN
            CASE 
                WHEN VCPI.IND_REPTD IS NOT NULL THEN VCPI.IND_REPTD
                ELSE '[NF:' || vcldd.display_value || ']'
            END
        ELSE 
            VCPI.IND_REPTD 
    END AS IND_REPTD
FROM 
    ARGUS.V_CASE_PROD_INDICATIONS VCPI
LEFT JOIN 
    ARGUS.V_CASE_PRODUCT VCP ON VCP.CASE_ID = VCPI.CASE_ID AND VCP.SEQ_NU}') || TO_CLOB(q'{M = VCPI.prod_seq_num
JOIN 
    ARGUS.V_CASE_MASTER VCM ON VCM.CASE_ID = VCPI.CASE_ID
LEFT JOIN 
    argus.v_case_null_flavor vcnf ON vcnf.case_id = VCPI.case_id 
                                    AND vcnf.seq_num = VCPI.seq_num 
                                    AND vcnf.field_id = 35550005 
                                    AND vcnf.deleted IS NULL
LEFT JOIN 
    argus.v_code_list_detail_discrete vcldd ON vcnf.null_flavor_code = vcldd.code 
                                            AND}') || TO_CLOB(q'{ vcldd.code_list_id = 'NULL_FLAVOR'
                                            AND vcldd.decode_context = 'NULL_FLAVOR'
WHERE 
    VCM.DELETED IS NULL
    AND VCM.CASE_ID <> -1
    AND VCPI.DELETED IS NULL
    AND VCP.DELETED IS NULL}'),'SELECT
    CASE_ID,
    SEQ_NUM,
    prod_seq_num,
    IND_REPTD
FROM 
    &MARTUSERNAME..DM_CASE_PROD_INDICATIONS
WHERE 
    seq_num > 0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_DEATH_DETAILS','DM_CASE_DEATH_DETAILS','C_CAUSE_DICT',null,null,null,null,'SELECT 
    vcdd.case_id, 
	vcdd.seq_num,
	(SELECT vcdg.name FROM argus.v_CFG_DICTIONARIES_GLOBAL VCDG, argus.v_CFG_DICTIONARIES_ENTERPRISE VCDE 
    where vcdg.GLOBAL_DICT_ID = vcde.GLOBAL_DICT_ID 
    and vcde.dict_id = vcdd.cause_dict
    AND UPPER(vcdg.DICTIONARY_SOURCE)  = UPPER(''MedDRA'') 
    and vcdg.deleted is null
    and vcde.deleted is null)
FROM 
  ARGUS.V_CASE_DEATH_DETAILS vcdd
    WHERE DELETED IS NULL','SELECT 
CASE_ID,
SEQ_NUM,
C_CAUSE_DICT
FROM &MARTUSERNAME..DM_CASE_DEATH_DETAILS
where seq_num>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_LOCAL_EVA_COMMENT','DM_CASE_COMMENTS','C_LOCAL_COMMENT',null,null,null,null,TO_CLOB(q'{SELECT 
VCM.CASE_ID, 
(SELECT CASE
        WHEN LENGTH(VCLECCLC.SPLIT_LOCAL_COMMENT) > 3997 THEN
            SUBSTR(VCLECCLC.SPLIT_LOCAL_COMMENT, 1, 3997) || '…'
        ELSE
            VCLECCLC.SPLIT_LOCAL_COMMENT
    END AS SPLIT_LOCAL_COMMENT
FROM ARGUS.V_CASE_LOC_EVA_CMT_CLOB_LOC_CMT VCLECCLC
WHERE VCLEC.CASE_ID=VCLECCLC.CASE_ID
AND VCLECCLC.TEXT_ORDER=1) AS C_LOCAL_COMMENT
FROM (SELECT * FROM ARGUS.V_CASE_LOCAL_EVA_COMMENT WHERE DELETED IS NULL) VCLEC, ARGUS.V_CASE_MASTER VCM
WHERE VCM.CAS}') || TO_CLOB(q'{E_ID=VCLEC.CASE_ID(+)
AND VCM.DELETED IS NULL
AND VCM.CASE_ID<>-1}'),'SELECT 
CASE_ID,
C_LOCAL_COMMENT
from &MARTUSERNAME..DM_CASE_COMMENTS');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_EVENT_NATURE','DM_CASE_EVENT','CSV_EVT_NATURE , CSV_EVT_NATURE_J',null,null,null,null,TO_CLOB(q'{SELECT
    vce.case_id,
    vce.seq_num,
    LISTAGG(vlen.evt_nature, ', ') WITHIN GROUP (ORDER BY vlen.evt_nature) AS event_nature_list
FROM
    (SELECT * FROM argus.V_CASE_EVENT_NATURE WHERE argus.V_CASE_EVENT_NATURE.DELETED IS NULL) vcen,
    argus.v_case_event vce,
    argus.V_LM_EVT_NATURE vlen  
WHERE
    vce.case_id = vcen.case_id(+)
    AND VCE.SEQ_NUM = VCEN.EVENT_SEQ_NUM(+)
    AND vcen.evt_nature_id = vlen.evt_nature_id(+)
    AND vce.deleted IS NULL
    AND vlen.deleted IS NULL
GROUP}') || TO_CLOB(q'{ BY
    vce.case_id,
    vce.seq_num}'),'SELECT
        DCE.case_id,
        DCE.seq_num,
        DCE.CSV_EVT_NATURE
    FROM
        &MARTUSERNAME..DM_CASE_EVENT DCE
        WHERE DCE.SEQ_NUM>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_DEATH','DM_CASE_DATA','CASE_DEATH, DEATH_DATE_PARTIAL',null,null,null,null,TO_CLOB(q'{SELECT 
    vcm.case_id,
    CASE 
        WHEN vcd.death_date_partial IS NOT NULL THEN 
            CASE 
                WHEN LENGTH(vcd.death_date_partial) = 4 THEN 
                    CONCAT('??-???-', vcd.death_date_partial)
                WHEN LENGTH(vcd.death_date_partial) = 8 THEN 
                    CONCAT('??-', vcd.death_date_partial)
                ELSE 
                    TO_CHAR(vcd.death_date_partial)
            END
        ELSE 
            (
                SELECT '[NF:' |}') || TO_CLOB(q'{| vcldd.display_value || ']'
                FROM argus.v_case_null_flavor vcnf
                JOIN argus.v_code_list_detail_discrete vcldd 
                    ON vcnf.null_flavor_code = vcldd.code
                WHERE vcnf.case_id = vcd.case_id
                  AND vcnf.field_id = 940006 -- death date
                  AND vcnf.deleted IS NULL
                  AND vcldd.code_list_id = 'NULL_FLAVOR'
                  AND vcldd.decode_context = 'NULL_FLAVOR'
                FETCH FIRST 1 ROW}') || TO_CLOB(q'{ ONLY  -- Limit to one result for efficiency
            )
    END AS DEATH_DATE_PARTIAL  
FROM argus.v_case_master vcm
LEFT JOIN (
    SELECT * 
    FROM argus.v_case_death 
    WHERE deleted IS NULL
) vcd ON vcm.case_id = vcd.case_id
WHERE vcm.deleted IS NULL
  AND vcm.case_id <> -1}'),'SELECT 
        DCD.case_id,
        TO_CHAR(DCD.DEATH_DATE_PARTIAL)
    FROM &MARTUSERNAME..DM_CASE_DATA DCD');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PROD_INDICATIONS','DM_CASE_PRODUCT','CSV_IND_REPTD, CSV_IND_CODED, CSV_IND_REPTD_J, CSV_IND_CODED_J',null,null,null,null,TO_CLOB(q'{SELECT 
 VCP.CASE_ID,
VCP.SEQ_NUM,
RTRIM(TRIM(REPLACE(REPLACE(LISTAGG(upper(VCPI.IND_REPTD), ', ' ON OVERFLOW TRUNCATE) WITHIN GROUP (ORDER BY VCP.SEQ_NUM, VCPI.SEQ_NUM), CHR(13), ''), CHR(10), '')),',') AS CONCATENATED_IND_REPTD,
TRIM(REPLACE(REPLACE(LISTAGG(upper(VCPI.IND_CODED), ', ' ON OVERFLOW TRUNCATE) WITHIN GROUP (ORDER BY VCP.SEQ_NUM, VCPI.SEQ_NUM), CHR(13), ''), CHR(10), '')) AS CONCATENATED_IND_CODED,
TRIM(REPLACE(REPLACE(LISTAGG(upper(VCPI.IND_REPTD_J), ', ' ON OVERFLOW TRUNCATE) WIT}') || TO_CLOB(q'{HIN GROUP (ORDER BY VCP.SEQ_NUM, VCPI.SEQ_NUM), CHR(13), ''), CHR(10), '')) AS CONCATENATED_IND_REPTD_J,
TRIM(REPLACE(REPLACE(LISTAGG(upper(VCPI.IND_CODED_J), ', ' ON OVERFLOW TRUNCATE) WITHIN GROUP (ORDER BY VCP.SEQ_NUM, VCPI.SEQ_NUM), CHR(13), ''), CHR(10), '')) AS CONCATENATED_IND_CODED_J

FROM ARGUS.V_CASE_PRODUCT VCP ,(select * from ARGUS.V_CASE_PROD_INDICATIONS where deleted is null ) VCPI
    WHERE VCP.CASE_ID = VCPI.CASE_ID(+)
    AND VCP.SEQ_NUM = VCPI.PROD_SEQ_NUM(+)
    AND VCP.DELETE}') || TO_CLOB(q'{D IS NULL
    GROUP BY VCP.CASE_ID, VCP.SEQ_NUM}'),' SELECT

CASE_ID,
SEQ_NUM,
TRIM(TO_CHAR(Upper(REPLACE(REPLACE(SUBSTR(CSV_IND_REPTD, 1, 4000), CHR(13), ''''), CHR(10), '''')))),
TRIM(TO_CHAR(Upper(REPLACE(REPLACE(SUBSTR(CSV_IND_CODED, 1, 4000), CHR(13), ''''), CHR(10), '''')))),
TRIM(TO_CHAR(Upper(REPLACE(REPLACE(SUBSTR(CSV_IND_REPTD_J, 1, 4000), CHR(13), ''''), CHR(10), '''')))),
TRIM(TO_CHAR(Upper(REPLACE(REPLACE(SUBSTR(CSV_IND_CODED_J, 1, 4000), CHR(13), ''''), CHR(10), ''''))))
FROM &MARTUSERNAME..DM_CASE_PRODUCT where seq_num>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PAT_RACE','DM_CASE_DATA','CSV_PAT_ETHNICITY, CSV_PAT_ETHNICITY_J',null,null,null,null,'SELECT 
    CPI.case_id,
    LISTAGG(LE.ethnicity, '', '') WITHIN GROUP (ORDER BY cpr.seq_num) AS ethnicity,
    LISTAGG(LE.ethnicity_j, '', '') WITHIN GROUP (ORDER BY  cpr.seq_num) AS ethnicity_j
FROM 
    (SELECT * FROM ARGUS.v_CASE_PAT_RACE WHERE DELETED IS NULL) CPR
JOIN 
    ARGUS.V_LM_ETHNICITY LE
    ON CPR.ethnicity_id = LE.ethnicity_id
FULL OUTER JOIN 
    ARGUS.V_CASE_PAT_INFO CPI
    ON CPI.case_id=CPR.case_id 
GROUP BY 
    CPI.case_id','SELECT 
CASE_ID,
CSV_PAT_ETHNICITY,
CSV_PAT_ETHNICITY_J
FROM
&MARTUSERNAME..DM_CASE_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_LITERATURE','DM_CASE_LITERATURE','TITLE, C_LIT_INFO, C_LIT_INFO_J',null,null,null,null,TO_CLOB(q'{SELECT 
    VCL.case_id, 
    VCL.seq_num,
    CASE
        WHEN VCL.TITLE IS NOT NULL THEN VCL.TITLE
        ELSE (
            SELECT  '[NF:'|| vcldd.display_value || ']'
            FROM argus.v_code_list_detail_discrete vcldd, argus.v_case_null_flavor vcnf 
            WHERE vcnf.null_flavor_code = vcldd.code
              AND vcnf.case_id = VCL.case_id
              AND vcnf.field_id = 26850007
              AND vcnf.deleted IS NULL
              AND vcldd.code_list_id = 'NULL_FLAVOR'
     }') || TO_CLOB(q'{         AND vcldd.decode_context = 'NULL_FLAVOR'
            GROUP BY vcldd.display_value
        )
    END AS TITLE,
    VCL.AUTHOR ||  ';' || 
    VCL.TITLE  ||  ';' || 
    VCL.JOURNAL ||  ';' || 
    VCL.country_id ||  ';' ||
    VCL.YEAR ||  ';' || 
    VCL.VOL ||  ';' || 
    VCL.PGS AS C_LIT_INFO,
    VCL.AUTHOR_J ||  ';' || 
    VCL.TITLE_J  ||  ';' || 
    VCL.JOURNAL_J ||  ';' || 
    VCL.country_id ||  ';' ||
    VCL.YEAR ||  ';' || 
    VCL.VOL ||  ';' || 
    VCL.PGS AS C_LIT_INFO_}') || TO_CLOB(q'{J
FROM 
    ARGUS.V_CASE_LITERATURE VCL
    WHERE VCL.deleted is null}'),'SELECT 
CASE_ID,
SEQ_NUM,
TITLE,
C_LIT_INFO,
C_LIT_INFO_J
FROM &MARTUSERNAME..DM_CASE_LITERATURE
WHERE SEQ_NUM>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PREGNANCY','DM_CASE_PREGNANCY','DATE_OF_LMP, DATE_OF_LMP_PARTIAL, C_PARENT, C_BREASTFEEDING, C_PROSPECTIVE',null,null,null,null,TO_CLOB(q'{SELECT VCM.case_id, 
    CASE
        WHEN LENGTH(DATE_OF_LMP_PARTIAL) = 4 THEN 
            '??-???-' || DATE_OF_LMP_PARTIAL
        WHEN LENGTH(DATE_OF_LMP_PARTIAL) = 8 THEN 
            '??-' || DATE_OF_LMP_PARTIAL
        WHEN DATE_OF_LMP_PARTIAL IS NULL THEN (
            SELECT '[NF:' || vcldd.display_value || ']'
            FROM argus.v_code_list_detail_discrete vcldd, argus.v_case_null_flavor vcnf      
            WHERE vcnf.null_flavor_code = vcldd.code
              AND vcnf.case_id }') || TO_CLOB(q'{= VCP.case_id
              AND vcnf.field_id = 3140002 
              AND vcnf.deleted IS NULL
              AND vcldd.code_list_id = 'NULL_FLAVOR'
              AND vcldd.decode_context = 'NULL_FLAVOR'
            GROUP BY vcldd.display_value
        )
        ELSE TO_CHAR(DATE_OF_LMP_PARTIAL)
    END AS DATE_OF_LMP_PARTIAL,
    CASE
        WHEN VCP.Parent = 1 THEN 'PARENT'
        ELSE 'PATIENT'
    END AS C_PARENT,
    CASE 
        WHEN BREASTFEEDING = 1 THEN 'YES'
        ELSE ''
    END }') || TO_CLOB(q'{AS C_BREASTFEEDING,
    CASE prospective
        WHEN -1 THEN 'UNKNOWN'
        WHEN 1 THEN 'PROSPECTIVE'
        WHEN 2 THEN 'RETROSPECTIVE'
    END AS c_prospective
FROM ( SELECT * FROM ARGUS.V_CASE_PREGNANCY WHERE DELETED IS NULL) VCP, ARGUS.V_CASE_MASTER VCM
WHERE VCM.CASE_ID=VCP.CASE_ID(+)
AND VCM.DELETED IS NULL
AND VCM.CASE_ID<>-1}'),'SELECT 
CASE_ID,
TO_CHAR(DATE_OF_LMP_PARTIAL),
Upper(C_PARENT),
Upper(C_BREASTFEEDING),
Upper(C_PROSPECTIVE)
FROM &MARTUSERNAME..DM_CASE_Pregnancy');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PMDA_NOTES','DM_CASE_PMDA_NOTES','REMARK1, REMARK2, REMARK3, REMARK4',null,null,null,null,TO_CLOB(q'{SELECT
VCM.CASE_ID,
    (SELECT 
        CASE
            WHEN LENGTH(VCPNCR.SPLIT_REMARK1) > 3997 THEN
                SUBSTR(VCPNCR.SPLIT_REMARK1, 1, 3997) || '…'
            ELSE
                VCPNCR.SPLIT_REMARK1
        END 
     FROM ARGUS.V_CASE_PMDA_NOTES_CLOB_REMARK1 VCPNCR
     WHERE VCM.CASE_ID = VCPNCR.CASE_ID
       AND VCPNCR.TEXT_ORDER = 1) AS REMARK1,
	   (SELECT 
        CASE
            WHEN LENGTH(VCPNCR.SPLIT_REMARK2) > 3997 THEN
                SUBSTR(VCPNCR.SPLIT_REMARK2,}') || TO_CLOB(q'{ 1, 3997) || '…'
            ELSE
                VCPNCR.SPLIT_REMARK2
        END 
     FROM ARGUS.V_CASE_PMDA_NOTES_CLOB_REMARK2 VCPNCR
     WHERE VCM.CASE_ID = VCPNCR.CASE_ID
       AND VCPNCR.TEXT_ORDER = 1) AS REMARK2,
	   (SELECT 
        CASE
            WHEN LENGTH(VCPNCR.SPLIT_REMARK3) > 3997 THEN
                SUBSTR(VCPNCR.SPLIT_REMARK3, 1, 3997) || '…'
            ELSE
                VCPNCR.SPLIT_REMARK3
        END 
     FROM ARGUS.V_CASE_PMDA_NOTES_CLOB_REMARK3 VCPNCR
     WHERE}') || TO_CLOB(q'{ VCM.CASE_ID = VCPNCR.CASE_ID
       AND VCPNCR.TEXT_ORDER = 1) AS REMARK3,
	   (SELECT 
        CASE
            WHEN LENGTH(VCPNCR.SPLIT_REMARK4) > 3997 THEN
                SUBSTR(VCPNCR.SPLIT_REMARK4, 1, 3997) || '…'
            ELSE
                VCPNCR.SPLIT_REMARK4
        END 
     FROM ARGUS.V_CASE_PMDA_NOTES_CLOB_REMARK4 VCPNCR
     WHERE VCM.CASE_ID = VCPNCR.CASE_ID
       AND VCPNCR.TEXT_ORDER = 1) AS REMARK4

FROM 
    (SELECT * FROM ARGUS.V_CASE_PMDA_NOTES WHERE DELETED IS NULL) }') || TO_CLOB(q'{VCPN, ARGUS.V_CASE_MASTER VCM
WHERE 
    VCM.CASE_ID=VCPN.CASE_ID(+)
    AND VCPN.DELETED IS NULL
    AND VCM.CASE_ID<>-1}'),'SELECT
CASE_ID,
C_REMARK1,
C_REMARK2,
C_REMARK3,
C_REMARK4
FROM &MARTUSERNAME..DM_CASE_PMDA_NOTES');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_STUDY','DM_CASE_DATA','C_STUDY_ID, STUDY_NUM, STUDY_DESC',null,null,null,null,TO_CLOB(q'{SELECT
VCM.CASE_ID,
    CASE
        WHEN UPPER(STUDY_NUM) LIKE 'BGB%' THEN 'BGB'
        WHEN UPPER(STUDY_NUM) LIKE 'ZW%' THEN 'ZW'
        ELSE 'OTHERS'
    END AS C_STUDY_ID,
COALESCE(
        upper(VCS.STUDY_NUM),
        MAX(CASE WHEN VCNF.FIELD_ID = 4150009 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    ) AS STUDY_NUM,
	COALESCE(
      Upper(VCS.STUDY_DESC),
        MAX(CASE WHEN VCNF.FIELD_ID = 4150020 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    ) AS STUDY_DESC
FROM
 }') || TO_CLOB(q'{  (SELECT * FROM  ARGUS.V_CASE_STUDY WHERE DELETED IS NULL) VCS, ARGUS.V_CASE_MASTER VCM, (
    SELECT *
    FROM &MARTUSERNAME..DM_CASE_NULL_FLAVOR

) VCNF
    WHERE VCM.CASE_ID = VCS.CASE_ID(+)
	AND VCS.CASE_ID = VCNF.CASE_ID(+) 
    AND VCM.CASE_ID<>-1
    AND VCM.DELETED IS NULL
    GROUP BY VCM.CASE_ID, VCS.STUDY_NUM, VCS.STUDY_DESC}'),'SELECT
CASE_ID,
upper(C_STUDY_ID),
Upper(STUDY_NUM),
TO_CHAR(Upper(STUDY_DESC))
FROM &MARTUSERNAME..DM_CASE_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PROD_DEVICES_PMDA','DM_CASE_PROD_DEVICES_PMDA','PATIENT_STATUS, PATIENT_TREATMENT, REMARKS, INVESTIGATION_RESULTS, ACTION_TAKEN_UNTIL_NOW, DEVICE_SUMMARY, RESEARCH_AND_MEASURES, NULLIFICATION_REASON_DESC, INCOMPLETE_DESC, FUTURE_RESP, MALFUNCTION_DATE_PARTIAL',null,null,null,null,TO_CLOB(q'{SELECT
VCPD.CASE_ID,
VCPD.PROD_SEQ_NUM,
(SELECT 
        CASE
            WHEN LENGTH(VCPDPC.PATIENT_STATUS) > 3997 THEN
                SUBSTR(VCPDPC.PATIENT_STATUS, 1, 3997) || '…'
            ELSE
                VCPDPC.PATIENT_STATUS
        END 
     FROM argus.v_CASE_PROD_DEV_PMDA_CLOB_PAT_ST VCPDPC
     WHERE VCPD.CASE_ID = VCPDPC.CASE_ID 
     AND  VCPD.PROD_SEQ_NUM=VCPDPC.PROD_SEQ_NUM
       AND VCPDPC.TEXT_ORDER = 1) AS PATIENT_STATUS,
(SELECT 
        CASE
            WHEN LENGTH(VCPD}') || TO_CLOB(q'{PC.PATIENT_TREATMENT) > 3997 THEN
                SUBSTR(VCPDPC.PATIENT_TREATMENT, 1, 3997) || '…'
            ELSE
                VCPDPC.PATIENT_TREATMENT
        END 
     FROM argus.v_CASE_PROD_DEV_PMDA_CLOB_PAT_TX VCPDPC
     WHERE VCPD.CASE_ID = VCPDPC.CASE_ID 
     AND  VCPD.PROD_SEQ_NUM=VCPDPC.PROD_SEQ_NUM
       AND VCPDPC.TEXT_ORDER = 1) AS PATIENT_TREATMENT,
(SELECT 
        CASE
            WHEN LENGTH(VCPDPC.REMARKS) > 3997 THEN
                SUBSTR(VCPDPC.REMARKS, 1, 3997) || '…'}') || TO_CLOB(q'{
            ELSE
                VCPDPC.REMARKS
        END 
     FROM argus.v_CASE_PROD_DEV_PMDA_CLOB_REMARK VCPDPC
     WHERE VCPD.CASE_ID = VCPDPC.CASE_ID 
     AND  VCPD.PROD_SEQ_NUM=VCPDPC.PROD_SEQ_NUM
       AND VCPDPC.TEXT_ORDER = 1) AS REMARKS,	
(SELECT 
        CASE
            WHEN LENGTH(VCPDPC.INVESTIGATION_RESULTS) > 3997 THEN
                SUBSTR(VCPDPC.INVESTIGATION_RESULTS, 1, 3997) || '…'
            ELSE
                VCPDPC.INVESTIGATION_RESULTS
        END 
     FROM arg}') || TO_CLOB(q'{us.v_CASE_PROD_DEV_PMDA_CLOB_INVRES VCPDPC
     WHERE VCPD.CASE_ID = VCPDPC.CASE_ID 
     AND  VCPD.PROD_SEQ_NUM=VCPDPC.PROD_SEQ_NUM
       AND VCPDPC.TEXT_ORDER = 1) AS INVESTIGATION_RESULTS,
(SELECT 
        CASE
            WHEN LENGTH(VCPDPC.ACTION_TAKEN_UNTIL_NOW) > 3997 THEN
                SUBSTR(VCPDPC.ACTION_TAKEN_UNTIL_NOW, 1, 3997) || '…'
            ELSE
                VCPDPC.ACTION_TAKEN_UNTIL_NOW
        END 
     FROM argus.v_CASE_PROD_DEV_PMDA_CLOB_ATUN VCPDPC
     WHERE VCPD.CA}') || TO_CLOB(q'{SE_ID = VCPDPC.CASE_ID 
     AND  VCPD.PROD_SEQ_NUM=VCPDPC.PROD_SEQ_NUM
       AND VCPDPC.TEXT_ORDER = 1) AS ACTION_TAKEN_UNTIL_NOW,
(SELECT 
        CASE
            WHEN LENGTH(VCPDPC.DEVICE_SUMMARY) > 3997 THEN
                SUBSTR(VCPDPC.DEVICE_SUMMARY, 1, 3997) || '…'
            ELSE
                VCPDPC.DEVICE_SUMMARY
        END 
     FROM argus.v_CASE_PROD_DEV_PMDA_CLOB_DV_SUM VCPDPC
     WHERE VCPD.CASE_ID = VCPDPC.CASE_ID 
     AND  VCPD.PROD_SEQ_NUM=VCPDPC.PROD_SEQ_NUM
       AND}') || TO_CLOB(q'{ VCPDPC.TEXT_ORDER = 1) AS DEVICE_SUMMARY,
(SELECT 
        CASE
            WHEN LENGTH(VCPDPC.RESEARCH_AND_MEASURES) > 3997 THEN
                SUBSTR(VCPDPC.RESEARCH_AND_MEASURES, 1, 3997) || '…'
            ELSE
                VCPDPC.RESEARCH_AND_MEASURES
        END 
     FROM argus.v_CASE_PROD_DEV_PMDA_CLOB_R_N_M VCPDPC
     WHERE VCPD.CASE_ID = VCPDPC.CASE_ID 
     AND  VCPD.PROD_SEQ_NUM=VCPDPC.PROD_SEQ_NUM
       AND VCPDPC.TEXT_ORDER = 1) AS RESEARCH_AND_MEASURES,	   
(SELECT 
       }') || TO_CLOB(q'{ CASE
            WHEN LENGTH(VCPDPC.NULLIFICATION_REASON_DESC) > 3997 THEN
                SUBSTR(VCPDPC.NULLIFICATION_REASON_DESC, 1, 3997) || '…'
            ELSE
                VCPDPC.NULLIFICATION_REASON_DESC
        END 
     FROM argus.v_CASE_PROD_DEV_PMDA_CLOB_NULRSN VCPDPC
     WHERE VCPD.CASE_ID = VCPDPC.CASE_ID 
     AND  VCPD.PROD_SEQ_NUM=VCPDPC.PROD_SEQ_NUM
       AND VCPDPC.TEXT_ORDER = 1) AS NULLIFICATION_REASON_DESC,
(SELECT 
        CASE
            WHEN LENGTH(VCPDPC.INCOMPLET}') || TO_CLOB(q'{E_DESC) > 3997 THEN
                SUBSTR(VCPDPC.INCOMPLETE_DESC, 1, 3997) || '…'
            ELSE
                VCPDPC.INCOMPLETE_DESC
        END 
     FROM argus.v_CASE_PROD_DEV_PMDA_CLOB_INCDES VCPDPC
     WHERE VCPD.CASE_ID = VCPDPC.CASE_ID 
     AND  VCPD.PROD_SEQ_NUM=VCPDPC.PROD_SEQ_NUM
       AND VCPDPC.TEXT_ORDER = 1) AS INCOMPLETE_DESC, (SELECT 
        CASE
            WHEN LENGTH(VCPDPC.FUTURE_RESP) > 3997 THEN
                SUBSTR(VCPDPC.FUTURE_RESP, 1, 3997) || '…'
           }') || TO_CLOB(q'{ ELSE
                VCPDPC.FUTURE_RESP
        END 
     FROM argus.v_CASE_PROD_DEV_PMDA_CLOB_FUTRES VCPDPC
     WHERE VCPD.CASE_ID = VCPDPC.CASE_ID 
     AND  VCPD.PROD_SEQ_NUM=VCPDPC.PROD_SEQ_NUM
       AND VCPDPC.TEXT_ORDER = 1) AS FUTURE_RESP,
CASE 
        WHEN LENGTH(VCPD.MALFUNCTION_DATE_PARTIAL) = 5 THEN 
            CONCAT('??-???-', VCPD.MALFUNCTION_DATE_PARTIAL)
        WHEN LENGTH(VCPD.MALFUNCTION_DATE_PARTIAL) = 7 THEN 
            CONCAT('??-', VCPD.MALFUNCTION_DATE_PARTIAL)
    }') || TO_CLOB(q'{    ELSE VCPD.MALFUNCTION_DATE_PARTIAL
    END AS MALFUNCTION_DATE_PARTIAL	   
FROM ARGUS.V_CASE_PROD_DEVICES_PMDA VCPD
WHERE VCPD.DELETED IS NULL}'),'SELECT 
            CASE_ID,
            PROD_SEQ_NUM,
            C_PATIENT_STATUS,
            C_PATIENT_TREATMENT,
            C_REMARKS,
            C_INVESTIGATION_RESULTS,
            C_ACTION_TAKEN_UNTIL_NOW,
            C_DEVICE_SUMMARY,
            C_RESEARCH_AND_MEASURES,
            C_NULLIFICATION_REASON_DESC,
            C_INCOMPLETE_DESC,
            C_FUTURE_RESP,
            MALFUNCTION_DATE_PARTIAL
        FROM &MARTUSERNAME..DM_CASE_PROD_DEVICES_PMDA
		WHERE PROD_SEQ_NUM>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_CLASSIFICATIONS','DM_CASE_DATA','CSV_CLASSIFICATIONS, CSV_CLASSIFICATIONS_J',null,null,null,null,TO_CLOB(q'{SELECT
    VCM.case_id,
    LISTAGG(VLCC.description, ', ') WITHIN GROUP (ORDER BY VCC.SEQ_NUM) AS concatenated_classifications,
    LISTAGG(VLCC.description_j, ', ') WITHIN GROUP (ORDER BY VCC.SEQ_NUM) AS concatenated_classifications_j
FROM
    (select * from argus.V_CASE_CLASSIFICATIONS where deleted is null) VCC, (select * from  argus.v_lm_case_classification where deleted is null) VLCC, ARGUS.V_CASE_MASTER VCM 
WHERE VCM.CASE_ID = VCC.CASE_ID (+)
    AND VCC.classification_id = VLCC.classifi}') || TO_CLOB(q'{cation_id(+)
	AND VCM.CASE_ID <> -1
    AND VCM.deleted IS NULL
GROUP BY
    VCM.case_id}'),'SELECT
    DM.CASE_ID,
    DM.CSV_CLASSIFICATIONS,
    DM.CSV_CLASSIFICATIONS_J
FROM
    &MARTUSERNAME..DM_CASE_DATA DM');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('RPT_ROUTING','DM_SUBMISSION_DATA','C_APPROVED_USER, C_TRANSMITTED_USER',null,null,null,null,TO_CLOB(q'{SELECT 
    vcrr.REG_REPORT_ID,
    (SELECT VCU.USER_FULLNAME
     FROM ARGUS.V_RPT_ROUTING VRR2, ARGUS.V_CFG_USERS VCU 
	 WHERE VRR2.USER_ID = VCU.USER_ID
     AND VRR2.REG_REPORT_ID = vcrr.REG_REPORT_ID
     AND VRR2.TO_STATE_ID = 4
     and vcu.deleted is null
     and vrr2.route_date is not null
     and vrr2.deleted is null
     ORDER BY VRR2.SEQ_NUM DESC
	 FETCH FIRST 1 ROW ONLY) AS APPROVED_USER,
    (SELECT VCU.USER_FULLNAME
     FROM ARGUS.V_RPT_PDF VRR2, ARGUS.V_CFG_USERS VCU 
	 WHERE }') || TO_CLOB(q'{VRR2.USER_ID = VCU.USER_ID
     AND VRR2.REG_REPORT_ID = vcrr.REG_REPORT_ID 
     and vrr2.deleted is null
     ORDER BY VRR2.ID DESC
	 FETCH FIRST 1 ROW ONLY) AS TRANSMITTED_USER
FROM 
    (select * from argus.v_cmn_reg_reports vcmnrr where vcmnrr.deleted IS NULL) vcmnrr,
                                                  (select * from argus.v_case_reg_reports vcrr where vcrr.deleted   IS NULL) vcrr		  
                                              WHERE    vcmnrr.reg_report_id = vcrr.reg_repor}') || TO_CLOB(q'{t_id}'),'SELECT 
REG_REPORT_ID,
C_APPROVED_USER,
C_TRANSMITTED_USER
FROM &MARTUSERNAME..DM_SUBMISSION_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CFG_USERS','DM_CFG_USERS','C_ACCOUNT_DISABLED',null,null,null,null,'SELECT 
VCU.USER_ID,
CASE
        WHEN VCU.ACCOUNT_DISABLED = 1 THEN ''YES''
        ELSE ''NO''
END AS ACCOUNT_DISABLED,
CASE
        WHEN VCU.ACCOUNT_DISABLED = 1 THEN ''YES''
        ELSE ''NO''
END AS ACCOUNT_DISABLED_J 
 FROM ARGUS.V_CFG_USERS VCU
 WHERE VCU.DELETED IS NULL','SELECT 
USER_ID,
upper(C_ACCOUNT_DISABLED),
upper(C_ACCOUNT_DISABLED_J)
FROM &MARTUSERNAME..DM_CFG_USERS');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PAT_HIST','DM_CASE_PATIENT_HISTORY','START_DATE_PARTIAL, STOP_DATE_PARTIAL, C_CONTINUE, C_CONTINUE_J, C_PARENT, C_PARENT_J, C_ITEM_DICT, C_NOTE, ITEM_REPTD, C_IND_DICT, C_REACT_DICT, C_ITEM_DICT_J, C_FAMILY_HISTORY, C_NOTE_J, C_FAMILY_HISTORY_J',null,null,null,null,TO_CLOB(q'{SELECT 
    VCPH.CASE_ID,
    VCPH.SEQ_NUM,
    CASE WHEN VCPH.START_DATE_PARTIAL IS NULL THEN
    (SELECT '[NF:' || display_value || ']' 
            FROM argus.v_code_list_detail_discrete vcldd, argus.v_case_null_flavor vcnf 
            WHERE vcnf.null_flavor_code = vcldd.code
              AND vcnf.case_id = VCPH.case_id
              AND VCNF.SEQ_NUM = VCPH.SEQ_NUM
              AND vcnf.field_id = 2840008
              AND vcnf.deleted IS NULL
              AND vcldd.code_list_id = 'NULL_F}') || TO_CLOB(q'{LAVOR'
              AND vcldd.decode_context = 'NULL_FLAVOR'
            GROUP BY vcldd.display_value)
        WHEN LENGTH(vcph.START_DATE_PARTIAL) = 4 THEN 
            CONCAT('??-???-', vcph.START_DATE_PARTIAL)
        WHEN LENGTH(vcph.START_DATE_PARTIAL) = 8 THEN 
            CONCAT('??-', vcph.START_DATE_PARTIAL)
        ELSE vcph.START_DATE_PARTIAL
    END AS START_DATE_PARTIAL,
    CASE WHEN VCPH.STOP_DATE_PARTIAL IS NULL THEN
    (SELECT '[NF:' || display_value || ']' 
            FROM a}') || TO_CLOB(q'{rgus.v_code_list_detail_discrete vcldd, argus.v_case_null_flavor vcnf 
            WHERE vcnf.null_flavor_code = vcldd.code
              AND vcnf.case_id = VCPH.case_id
              AND VCNF.SEQ_NUM = VCPH.SEQ_NUM
              AND vcnf.field_id = 2840010
              AND vcnf.deleted IS NULL
              AND vcldd.code_list_id = 'NULL_FLAVOR'
              AND vcldd.decode_context = 'NULL_FLAVOR'
            GROUP BY vcldd.display_value)
           WHEN LENGTH(vcph.STOP_DATE_PARTIAL) = 4 TH}') || TO_CLOB(q'{EN 
            CONCAT('??-???-', vcph.STOP_DATE_PARTIAL)
        WHEN LENGTH(vcph.STOP_DATE_PARTIAL) = 8 THEN 
            CONCAT('??-', vcph.STOP_DATE_PARTIAL)
        ELSE vcph.STOP_DATE_PARTIAL
    END AS STOP_DATE_PARTIAL,
    CASE 
        WHEN vcph.continue = 0 THEN 'NO'
        WHEN vcph.continue = 1 THEN 'YES'
        ELSE '' 
    END AS CONTINUE,
    CASE 
        WHEN vcph.continue = 0 THEN 'NO'
        WHEN vcph.continue = 1 THEN 'YES'
        ELSE '' 
    END AS CONTINUE_J,
    CASE}') || TO_CLOB(q'{ 
        WHEN vcph.parent = 0 THEN 'NO'
        WHEN vcph.parent = 1 THEN 'YES'
        ELSE '' 
    END AS PARENT,
    CASE 
        WHEN vcph.parent = 0 THEN 'NO'
        WHEN vcph.parent = 1 THEN 'YES'
        ELSE '' 
    END AS PARENT_J,
    (SELECT  
        VCDG.name
     FROM 
        ARGUS.V_CFG_DICTIONARIES_ENTERPRISE VCDE
        JOIN ARGUS.V_CFG_DICTIONARIES_GLOBAL VCDG 
        ON VCDE.GLOBAL_DICT_ID = VCDG.GLOBAL_DICT_ID
     WHERE 
        UPPER(VCDG.DICTIONARY_SOURCE) = UPPER('M}') || TO_CLOB(q'{edDRA')
        AND VCDE.dict_id = vcph.ITEM_DICT
        AND VCDE.DELETED IS NULL
        AND VCDG.DELETED IS NULL) AS ITEM_DICT,
	CAST((SELECT 
        CASE
            WHEN LENGTH(NOTE) >= 4000 THEN
                SUBSTR(NOTE, 1, 3997) || '...'
            ELSE
                SUBSTR(NOTE, 1, 3999)
        END 
     FROM (
        SELECT 
            xmlcast(xmlagg(xmlelement(e, VCP.SPLIT_NOTE).EXTRACT('//text()') ORDER BY text_order) AS clob) AS NOTE
        FROM ARGUS.V_CASE_PAT_HIST_CLOB_}') || TO_CLOB(q'{NOTE VCP
        WHERE VCPH.CASE_ID = VCP.CASE_ID
        AND VCPH.SEQ_NUM = VCP.SEQ_NUM
		AND VCP.TEXT_ORDER=1
     )
    ) AS VARCHAR2(4000)) AS NOTE,
CASE
        WHEN vcph.ITEM_REPTD IS NOT NULL THEN vcph.ITEM_REPTD
        ELSE (
            SELECT
            '[NF:' || display_value || ']' 
            FROM argus.V_code_list_detail_discrete vcldd, ARGUS.v_case_null_flavor vcnf
            WHERE vcnf.null_flavor_code = vcldd.code
                        AND vcnf.case_id = vcph.case_id
     }') || TO_CLOB(q'{                   AND vcnf.seq_num = vcph.seq_num
              AND vcnf.field_id = 2850040
              AND vcnf.deleted IS NULL
              AND vcldd.code_list_id = 'NULL_FLAVOR'
              AND vcldd.decode_context = 'NULL_FLAVOR'
            GROUP BY vcldd.display_value
        )
    END AS ITEM_REPTD,(SELECT  
        VCDG.name
     FROM 
        ARGUS.V_CFG_DICTIONARIES_ENTERPRISE VCDE
        JOIN ARGUS.V_CFG_DICTIONARIES_GLOBAL VCDG 
        ON VCDE.GLOBAL_DICT_ID = VCDG.GLOBAL_DIC}') || TO_CLOB(q'{T_ID
     WHERE 
        UPPER(VCDG.DICTIONARY_SOURCE) = UPPER('MedDRA')
        AND VCDE.dict_id = vcph.IND_DICT_ID
        AND VCDE.DELETED IS NULL
        AND VCDG.DELETED IS NULL) AS IND_DICT_ID, (SELECT  
        VCDG.name
     FROM 
        ARGUS.V_CFG_DICTIONARIES_ENTERPRISE VCDE
        JOIN ARGUS.V_CFG_DICTIONARIES_GLOBAL VCDG 
        ON VCDE.GLOBAL_DICT_ID = VCDG.GLOBAL_DICT_ID
     WHERE 
        UPPER(VCDG.DICTIONARY_SOURCE) = UPPER('MedDRA')
        AND VCDE.dict_id = vcph.REACT_DI}') || TO_CLOB(q'{CT_ID
        AND VCDE.DELETED IS NULL
        AND VCDG.DELETED IS NULL) AS REACT_DICT_ID,
    (SELECT  
        VCDG.name
     FROM 
        ARGUS.V_CFG_DICTIONARIES_ENTERPRISE VCDE
        JOIN ARGUS.V_CFG_DICTIONARIES_GLOBAL VCDG 
        ON VCDE.GLOBAL_DICT_ID = VCDG.GLOBAL_DICT_ID
     WHERE 
        UPPER(VCDG.DICTIONARY_SOURCE) = UPPER('MedDRA')
        AND VCDE.dict_id = vcph.ITEM_DICT_J
        AND VCDE.DELETED IS NULL
        AND VCDG.DELETED IS NULL) AS ITEM_DICT_J,
    CASE 
        }') || TO_CLOB(q'{WHEN vcph.FAMILY_HISTORY = 0 THEN 'NO'
        WHEN vcph.FAMILY_HISTORY = 1 THEN 'YES'
        ELSE '' 
    END AS FAMILY_HISTORY,
    CAST((SELECT 
        CASE
            WHEN LENGTH(NOTE_J) >= 4000 THEN
                SUBSTR(NOTE_J, 1, 3997) || '...'
            ELSE
                SUBSTR(NOTE_J, 1, 3999)
        END 
     FROM (
        SELECT 
            xmlcast(xmlagg(xmlelement(e, VCPJ.SPLIT_NOTE).EXTRACT('//text()') ORDER BY text_order) AS clob) AS NOTE_J
        FROM ARGUS.V_CASE_PA}') || TO_CLOB(q'{T_HIST_CLOB_NOTE_J VCPJ
        WHERE VCPH.CASE_ID = VCPJ.CASE_ID
        AND VCPH.SEQ_NUM = VCPJ.SEQ_NUM
		AND VCPJ.TEXT_ORDER=1
     )
    ) AS VARCHAR2(4000)) AS NOTE_J,
    CASE 
        WHEN vcph.FAMILY_HISTORY = 0 THEN 'NO'
        WHEN vcph.FAMILY_HISTORY = 1 THEN 'YES'
        ELSE '' 
    END AS FAMILY_HISTORY_J FROM 
    ARGUS.V_CASE_PAT_HIST vcph 
	WHERE VCPH.DELETED IS NULL}'),'SELECT 
CASE_ID,
SEQ_NUM,
START_DATE_PARTIAL,
STOP_DATE_PARTIAL,
UPPER(C_CONTINUE),
UPPER(C_CONTINUE_J),
UPPER(C_PARENT),
UPPER(C_PARENT_J),
C_ITEM_DICT,
C_NOTE,
ITEM_REPTD,
C_IND_DICT,
C_REACT_DICT,
C_ITEM_DICT_J,
UPPER(C_FAMILY_HISTORY),
C_NOTE_J,
UPPER(C_FAMILY_HISTORY_J)
FROM &MARTUSERNAME..DM_CASE_PATIENT_HISTORY
WHERE SEQ_NUM>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_REPORTERS','DM_CASE_REPORTERS','C_CONFIDENTIAL, PREFIX, FIRST_NAME, MIDDLE_NAME, LAST_NAME, INSTITUTION, DEPARTMENT, CITY, STATE, POSTCODE, PHONE, EMAIL, ADDRESS, ADDRESS_2, COUNTY, NOTES, NOTES_J',null,null,null,null,TO_CLOB(q'{SELECT
    vcr.case_id,
    vcr.seq_num,
    CASE
        WHEN vcr.confidential = 1 THEN 'YES'
        ELSE 'NO'
    END AS confidential_status,
    COALESCE(
        vcr.prefix,
        MAX(CASE WHEN vcnf.field_id = 3950019 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)
    ) AS prefix,
    COALESCE(
        vcr.first_name,
        MAX(CASE WHEN vcnf.field_id = 3950013 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)
    ) AS first_name,
    COALESCE(
        vcr.middle_name,
        MA}') || TO_CLOB(q'{X(CASE WHEN vcnf.field_id = 3950032 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)
    ) AS middle_name,
    COALESCE(
        vcr.last_name,
        MAX(CASE WHEN vcnf.field_id = 3950016 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)
    ) AS last_name,
    COALESCE(
        vcr.institution,
        MAX(CASE WHEN vcnf.field_id = 3950015 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)
    ) AS institution,
    COALESCE(
        vcr.department,
        MAX(CASE WHEN vcnf.field_id = }') || TO_CLOB(q'{3950031 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)
    ) AS department,
    COALESCE(
        vcr.city,
        MAX(CASE WHEN vcnf.field_id = 3950008 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)
    ) AS city,
    COALESCE(
        vcr.state,
        MAX(CASE WHEN vcnf.field_id = 3950026 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)
    ) AS state,
    COALESCE(
        vcr.postcode,
        MAX(CASE WHEN vcnf.field_id = 3950018 THEN '[NF:' || vcnf.c_null_flavor_value || ']}') || TO_CLOB(q'{' END)
    ) AS postcode,
    COALESCE(
        vcr.phone,
        MAX(CASE WHEN vcnf.field_id = 3950017 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)
    ) AS phone,
    COALESCE(
        vcr.email,
        MAX(CASE WHEN vcnf.field_id = 3950011 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)
    ) AS email,
    COALESCE(
        vcr.address,
        MAX(CASE WHEN vcnf.field_id = 3950006 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)
    ) AS address,
    COALESCE(
        vcr.add}') || TO_CLOB(q'{ress_2,
        MAX(CASE WHEN vcnf.field_id = 3950034 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)
    ) AS address_2,
    COALESCE(
        vcr.county,
        MAX(CASE WHEN vcnf.field_id = 3950333 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)
    ) AS county,
    CASE
            WHEN LENGTH(CRCN.SPLIT_NOTES) > 3997 THEN
                SUBSTR(CRCN.SPLIT_NOTES, 1, 3997) || '…'
            ELSE
                CRCN.SPLIT_NOTES
        END 
      AS NOTES,
      CASE
            WHE}') || TO_CLOB(q'{N LENGTH(CRCNJ.SPLIT_NOTES) > 3997 THEN
                SUBSTR(CRCNJ.SPLIT_NOTES, 1, 3997) || '…'
            ELSE
                CRCNJ.SPLIT_NOTES
        END 
      AS NOTES_J

FROM
    argus.v_case_reporters vcr, (
    SELECT *
    FROM &MARTUSERNAME..dm_case_null_flavor

) vcnf, (Select * from argus.v_CASE_REPORTERS_CLOB_NOTES where  Text_order=1) CRCN, 
(Select * from argus.v_CASE_REPORTERS_CLOB_NOTES_J where Text_order=1) CRCNJ

WHERE
    vcr.case_id = vcnf.case_id(+) 
    AND vcr.seq_}') || TO_CLOB(q'{num = vcnf.seq_num(+)
    AND vcr.deleted IS NULL
    AND vcr.case_id = CRCN.CASE_ID(+)
    AND VCR.SEQ_NUM = CRCN.SEQ_NUM(+)
    AND VCR.CASE_ID=CRCNJ.CASE_ID(+)
    AND VCR.SEQ_NUM = CRCNJ.SEQ_NUM(+)
GROUP BY
    vcr.case_id, vcr.seq_num, vcr.confidential, vcr.prefix, vcr.first_name, vcr.middle_name,
    vcr.last_name, vcr.institution, vcr.department, vcr.city, vcr.state, vcr.postcode,
    vcr.phone, vcr.email, vcr.address, vcr.address_2, vcr.county, crcn.split_notes, crcnj.split_notes}'),'SELECT CASE_ID,
SEQ_NUM,
UPPER(C_CONFIDENTIAL),
PREFIX,
FIRST_NAME,
MIDDLE_NAME,
LAST_NAME,
INSTITUTION,
DEPARTMENT,
CITY,
STATE,
POSTCODE,
PHONE,
EMAIL,
ADDRESS,
ADDRESS_2,
COUNTY,
TO_CHAR(NOTES),
TO_CHAR(NOTES_J)
FROM &MARTUSERNAME..DM_CASE_REPORTERS
WHERE SEQ_NUM>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_EVENT_DETAIL','DM_CASE_EVENT','CASE_ID,SEQ_NUM,LF_ACT_PRO_EVE_COMB',null,null,null,null,TO_CLOB(q'{SELECT 
        CE.case_id,
        CE.seq_num,
        LF.lf_act_pro_eve_comb AS lf_act_pro_eve_comb
FROM   argus.v_case_master  CM,
       argus.v_case_event   CE,
        (
         SELECT calc_sort_taken.case_id,calc_sort_taken.event_seq_num,to_char(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(E,CASE WHEN calc_sort_taken.act_taken_id IS NOT NULL THEN calc_sort_taken.sort_order || ') ' ||lat.action_taken || CHR(10) END).EXTRACT('//text()')ORDER BY calc_sort_taken.sort_order,calc_sort_taken.case_id,calc_so}') || TO_CLOB(q'{rt_taken.event_seq_num,calc_sort_taken.prod_seq_num)AS CLOB),CHR(10))) AS lf_act_pro_eve_comb
           FROM   
                 (SELECT ced.case_id,ced.prod_seq_num,ced.event_seq_num,ced.act_taken_id,(RANK() OVER (PARTITION BY  ced.case_id,ced.event_seq_num ORDER BY ced.case_id,cp.sort_id)) AS sort_order
                  FROM &MARTUSERNAME..dm_case_prod_evt_detail ced,&MARTUSERNAME..dm_case_product cp WHERE ced.case_id=cp.case_id and ced.prod_seq_num=cp.seq_num)calc_sort_taken,
        }') || TO_CLOB(q'{          argus.lm_action_taken lat
         WHERE    calc_sort_taken.act_taken_id = lat.act_taken_id
           AND    lat.deleted IS NULL
        GROUP BY  calc_sort_taken.case_id,calc_sort_taken.event_seq_num
        )           LF
WHERE  CM.case_id = CE.case_id
  AND  CE.case_id = LF.case_id(+)
  AND  CE.seq_num = LF.event_seq_num(+)
  AND  CE.deleted IS NULL}'),'SELECT case_id,seq_num,to_char(lf_act_pro_eve_comb) FROM &MARTUSERNAME..dm_case_event WHERE seq_num>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_AFSSAPS','DM_CASE_AFSSAPS','C_FUTURE_ACTIONS',null,null,null,null,'select 
VCA.case_id,
VCA.SEQ_NUM,
CASE
        WHEN LENGTH(VCACFA.SPLIT_FUTURE_ACTIONS) > 3997 THEN
            SUBSTR(VCACFA.SPLIT_FUTURE_ACTIONS, 1, 3997) || ''…''
        ELSE
            VCACFA.SPLIT_FUTURE_ACTIONS
    END AS FUTURE_ACTIONS
    FROM ARGUS.V_CASE_AFSSAPS VCA, ARGUS.V_CASE_AFSSAPS_CLOB_FUTURE_ACTNS VCACFA
    WHERE VCA.CASE_ID = VCACFA.CASE_ID
    AND VCA.SEQ_NUM = VCACFA.SEQ_NUM
    AND VCA.DELETED IS NULL
    AND VCACFA.text_order=1','SELECT 
CASE_ID,
SEQ_NUM,
C_FUTURE_ACTIONS
FROM &MARTUSERNAME..DM_CASE_AFSSAPS
WHERE SEQ_NUM>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_MEDWATCH_DATA','DM_CASE_MEDWATCH_DATA','C_NARRATIVE_TEXT',null,null,null,null,TO_CLOB(q'{SELECT 
VCM.CASE_ID,
(SELECT CASE
        WHEN LENGTH(VCMDCN.SPLIT_NARRATIVE_TEXT) > 3997 THEN
            SUBSTR(VCMDCN.SPLIT_NARRATIVE_TEXT, 1, 3997) || '…'
        ELSE
            SPLIT_NARRATIVE_TEXT
    END AS NARRATIVE_TEXT 
FROM ARGUS.V_CASE_MEDWATCH_DATA_CLOB_NARR VCMDCN
WHERE VCMD.CASE_ID=VCMDCN.CASE_ID(+)
AND VCMDCN.TEXT_ORDER=1) AS C_NARRATIVE_TEXT
FROM (SELECT * FROM ARGUS.V_CASE_MEDWATCH_DATA WHERE ARGUS.V_CASE_MEDWATCH_DATA.DELETED IS NULL) VCMD, ARGUS.V_CASE_MASTER VCM
WHERE VCM.}') || TO_CLOB(q'{CASE_ID=VCMD.CASE_ID(+)
AND VCM.DELETED IS NULL 
AND VCM.CASE_ID <> -1}'),'SELECT 
CASE_ID,
C_NARRATIVE_TEXT
FROM &MARTUSERNAME..DM_CASE_MEDWATCH_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('LM_DATASHEET','DM_LM_DATASHEET','C_NARRATIVE_TEXT',null,null,null,null,'select
VLMD.DATASHEET_ID,
VLMD.REVISION,
CASE
        WHEN LENGTH(VLMDCN.SPLIT_NOTES) > 3997 THEN
            SUBSTR(VLMDCN.SPLIT_NOTES, 1, 3997) || ''…''
        ELSE
            VLMDCN.SPLIT_NOTES
    END AS NOTES
from  ARGUS.V_LM_DATASHEET VLMD, ARGUS.V_LM_DATASHEET_CLOB_NOTES VLMDCN
where VLMD.DATASHEET_ID = VLMDCN.DATASHEET_ID
AND VLMD.REVISION = VLMDCN.REVISION
AND VLMD.DELETED IS NULL
AND VLMDCN.text_order=1','SELECT 
DATASHEET_ID,
REVISION,
C_NOTES
FROM &MARTUSERNAME..DM_LM_DATASHEET');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('LM_REGULATORY_CONTACT','DM_LM_REGULATORY_CONTACT','C_EMAIL_BODY',null,null,null,null,TO_CLOB(q'{SELECT 
VLC.AGENCY_ID,
CAST((SELECT CASE
        WHEN LENGTH(A.NOTES) > 3997 THEN
            SUBSTR(A.NOTES, 1, 3997) || '...'
        ELSE
            A.NOTES
    END AS NOTES
    from (select xmlcast(xmlagg(xmlelement(e, VLB.SPLIT_EMAIL_BODY).EXTRACT('//text()') ORDER BY VLB.text_order) AS clob) AS NOTES
    FROM ARGUS.V_LM_REG_CONTACT_CLOB_EMAIL_BODY VLB
        WHERE VLC.AGENCY_ID=VLB.AGENCY_ID
	AND VLB.TEXT_ORDER=1
     )A
    ) AS VARCHAR2(4000)) AS J_TEXT

FROM ARGUS.V_LM_REGULATORY_CONT}') || TO_CLOB(q'{ACT VLC
WHERE VLC.DELETED IS NULL}'),'SELECT 
AGENCY_ID,
C_EMAIL_BODY
FROM &MARTUSERNAME..DM_LM_REGULATORY_CONTACT');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_LAB_DATA','DM_CASE_LAB_DATA','TEST_DATE_PARTIAL, C_RESULT_VALUE, C_NOTES, C_COMMENTS, C_RESULT_VALUE_J, C_NOTES_J, C_COMMENTS_J',null,null,null,null,TO_CLOB(q'{SELECT 
    vcld.CASE_ID,
    vcld.SEQ_NUM,
    CASE 
        WHEN LENGTH(TEST_DATE_PARTIAL) = 4 THEN 
            CONCAT('??-???-', TEST_DATE_PARTIAL)
        WHEN LENGTH(TEST_DATE_PARTIAL) = 8 THEN 
            CONCAT('??-', TEST_DATE_PARTIAL)
        ELSE TEST_DATE_PARTIAL
    END AS TEST_DATE_PARTIAL,
    VCLD.RESULTS || ' ' || LDU.UNIT AS C_RESULT_VALUE,
    (SELECT CASE
            WHEN DBMS_LOB.GETLENGTH(XMLCAST(XMLAGG(XMLELEMENT(e, VCLDCN.SPLIT_NOTES )
                                   }') || TO_CLOB(q'{            ORDER BY VCLDCN.TEXT_ORDER) AS CLOB)) > 4000 THEN
                to_char(SUBSTR(XMLCAST(XMLAGG(XMLELEMENT(e, VCLDCN.SPLIT_NOTES) 
                       ORDER BY VCLDCN.TEXT_ORDER) AS CLOB), 1, 3997)) || '...' 
            ELSE
                to_char(XMLCAST(XMLAGG(XMLELEMENT(e, VCLDCN.SPLIT_NOTES) 
                       ORDER BY VCLDCN.TEXT_ORDER) AS CLOB))
        END
     FROM argus.V_CASE_LAB_DATA_CLOB_NOTES VCLDCN
     WHERE VCLD.CASE_ID = VCLDCN.CASE_ID
       AND VCLD.SEQ_N}') || TO_CLOB(q'{UM = VCLDCN.SEQ_NUM) AS NOTES,
    (SELECT CASE
            WHEN DBMS_LOB.GETLENGTH(XMLCAST(XMLAGG(XMLELEMENT(e, VCLDCC.SPLIT_COMMENTS) 
                                               ORDER BY VCLDCC.TEXT_ORDER) AS CLOB)) > 3997 THEN
                to_char(SUBSTR(XMLCAST(XMLAGG(XMLELEMENT(e, VCLDCC.SPLIT_COMMENTS ) --
                       ORDER BY VCLDCC.TEXT_ORDER) AS CLOB), 1, 3997)) || '...' 
            ELSE
                to_char(XMLCAST(XMLAGG(XMLELEMENT(e, VCLDCC.SPLIT_COMMENTS ) 
   }') || TO_CLOB(q'{                    ORDER BY VCLDCC.TEXT_ORDER) AS CLOB))
        END
     FROM argus.v_CASE_LAB_DATA_CLOB_COMMENTS VCLDCC
     WHERE VCLD.CASE_ID = VCLDCC.CASE_ID
       AND VCLD.SEQ_NUM = VCLDCC.SEQ_NUM) AS COMMENTS,
    VCLD.RESULTS_J || ' ' || LDU.UNIT_J AS RESULT_J,
    (SELECT CASE
            WHEN DBMS_LOB.GETLENGTH(XMLCAST(XMLAGG(XMLELEMENT(e, VCLDCNJ.SPLIT_NOTES ) 
                                               ORDER BY VCLDCNJ.TEXT_ORDER) AS CLOB)) > 3997 THEN
                to_char(S}') || TO_CLOB(q'{UBSTR(XMLCAST(XMLAGG(XMLELEMENT(e, VCLDCNJ.SPLIT_NOTES ) 
                       ORDER BY VCLDCNJ.TEXT_ORDER) AS CLOB), 1, 3997)) || '...'  
            ELSE
                to_char(XMLCAST(XMLAGG(XMLELEMENT(e, VCLDCNJ.SPLIT_NOTES ) 
                       ORDER BY VCLDCNJ.TEXT_ORDER) AS CLOB))
        END
     FROM argus.V_CASE_LAB_DATA_CLOB_NOTES_J VCLDCNJ
     WHERE VCLD.CASE_ID = VCLDCNJ.CASE_ID
       AND VCLD.SEQ_NUM = VCLDCNJ.SEQ_NUM) AS NOTES_J,
    (SELECT CASE
            WHEN DBMS_LOB}') || TO_CLOB(q'{.GETLENGTH(XMLCAST(XMLAGG(XMLELEMENT(e, VCLDCCJ.SPLIT_COMMENTS) --
                                               ORDER BY VCLDCCJ.TEXT_ORDER) AS CLOB)) > 3997 THEN
                to_char(SUBSTR(XMLCAST(XMLAGG(XMLELEMENT(e, VCLDCCJ.SPLIT_COMMENTS) --
                       ORDER BY VCLDCCJ.TEXT_ORDER) AS CLOB), 1, 3997)) || '...' 
            ELSE
                to_char(XMLCAST(XMLAGG(XMLELEMENT(e, VCLDCCJ.SPLIT_COMMENTS )
                       ORDER BY VCLDCCJ.TEXT_ORDER) AS CLOB))
        E}') || TO_CLOB(q'{ND
     FROM argus.v_CASE_LAB_DATA_CLOB_COMMENTS_J VCLDCCJ
     WHERE VCLD.CASE_ID = VCLDCCJ.CASE_ID
       AND VCLD.SEQ_NUM = VCLDCCJ.SEQ_NUM) AS COMMENTS_J
FROM 
    ARGUS.V_CASE_LAB_DATA VCLD
    LEFT JOIN (SELECT * FROM ARGUS.V_LM_DOSE_UNITS WHERE deleted IS NULL) LDU 
        ON VCLD.UNIT_ID = LDU.UNIT_ID
WHERE 
    VCLD.DELETED IS NULL }'),'SELECT 
    CASE_ID,
    SEQ_NUM,
    TEST_DATE_PARTIAL,
    C_RESULT_VALUE,
    C_NOTES,
    C_COMMENTS,
    C_RESULT_VALUE_J,
    C_NOTES_J,
    C_COMMENTS_J
FROM 
    &MARTUSERNAME..DM_CASE_LAB_DATA
WHERE 
    SEQ_NUM > 0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('LM_DEVICE_PRE_COMMENTS','DM_LM_DEVICE_PRE_COMMENTS','C_PRE_COMMENTS, C_PRE_COMMENTS_J',null,null,null,null,TO_CLOB(q'{SELECT 
    VLDPC.PRE_COMMENTS_ID,
    (SELECT 
        CASE
            WHEN LENGTH(VL_SUB.SPLIT_PRE_COMMENTS) > 3997 THEN
                SUBSTR(VL_SUB.SPLIT_PRE_COMMENTS, 1, 3997) || '…'
            ELSE
                VL_SUB.SPLIT_PRE_COMMENTS
        END 
     FROM ARGUS.V_LM_DEV_PRE_CMT_CLOB_PRE_CMTS VL_SUB
     WHERE VLDPC.PRE_COMMENTS_ID= VL_SUB.PRE_COMMENTS_ID
       AND VL_SUB.TEXT_ORDER = 1) AS PRE_COMMENTS,
    (SELECT 
        CASE
            WHEN LENGTH(VLJ_SUB.SPLIT_PRE_COMMENTS}') || TO_CLOB(q'{) > 3997 THEN
                SUBSTR(VLJ_SUB.SPLIT_PRE_COMMENTS, 1, 3997) || '…'
            ELSE
                VLJ_SUB.SPLIT_PRE_COMMENTS
        END 
     FROM ARGUS.V_LM_DEV_PRE_CMT_CLOB_PRE_CMTS_J VLJ_SUB
     WHERE VLDPC.PRE_COMMENTS_ID = VLJ_SUB.PRE_COMMENTS_ID
       AND VLJ_SUB.TEXT_ORDER = 1) AS PRE_COMMENTS_J
FROM 
    ARGUS.V_LM_DEVICE_PRE_COMMENTS VLDPC
    WHERE VLDPC.DELETED IS NULL}'),'SELECT 
PRE_COMMENTS_ID,
C_PRE_COMMENTS,
C_PRE_COMMENTS_J
FROM &MARTUSERNAME..DM_LM_DEVICE_PRE_COMMENTS');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('LM_LABELED_TERMS','DM_LM_LABELED_TERMS','C_NOTES, C_NOTES_J',null,null,null,null,TO_CLOB(q'{SELECT 
VLLT.DATASHEET_ID,
VLLT.SEQ_NUM,

(SELECT 
        CASE
            WHEN LENGTH(VL_SUB.SPLIT_NOTES) > 3997 THEN
                SUBSTR(VL_SUB.SPLIT_NOTES, 1, 3997) || '…'
            ELSE
                VL_SUB.SPLIT_NOTES
        END 
     FROM ARGUS.V_LM_LABELED_TERMS_CLOB_NOTES VL_SUB
     WHERE  VLLT.SEQ_NUM= VL_SUB.SEQ_NUM 
       AND VL_SUB.TEXT_ORDER = 1) AS NOTES,

(SELECT 
        CASE
            WHEN LENGTH(VLJ_SUB.SPLIT_NOTES) > 3997 THEN
                SUBSTR(VLJ_SUB.SPLIT_}') || TO_CLOB(q'{NOTES, 1, 3997) || '…'
            ELSE
                VLJ_SUB.SPLIT_NOTES
        END 
     FROM ARGUS.V_LM_LABELED_TERMS_CLOB_NOTES_J VLJ_SUB
     WHERE VLLT.SEQ_NUM= VLJ_SUB.SEQ_NUM 
       AND VLJ_SUB.TEXT_ORDER = 1) AS NOTES_J

FROM ARGUS.V_LM_LABELED_TERMS VLLT
WHERE VLLT.DELETED IS NULL}'),'SELECT
DATASHEET_ID,
SEQ_NUM,
C_NOTES,
C_NOTES_J
FROM &MARTUSERNAME..DM_LM_LABELED_TERMS');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_COMMENTS','DM_CASE_COMMENTS','C_CASE_COMMENT_TXT, C_CASE_COMMENT_TXT_J',null,null,null,null,TO_CLOB(q'{SELECT 
    VCM.CASE_ID,
    CAST((SELECT 
        CASE
            WHEN LENGTH(comment_text) >= 3000 THEN
                SUBSTR(comment_text, 1, 2997) || '...'
            ELSE
                SUBSTR(comment_text, 1, 2999)
        END 
     FROM (
        SELECT 
            xmlcast(xmlagg(xmlelement(e, split_comment_txt).EXTRACT('//text()') ORDER BY text_order) AS clob) AS comment_text
        FROM ARGUS.V_CASE_COMMENTS_CLOB_COMMENT_TXT VCT
        WHERE VCM.CASE_ID = VCT.CASE_ID
        GROU}') || TO_CLOB(q'{P BY VCT.CASE_ID
     )
    ) AS VARCHAR2(4000)) AS COMMENT_TXT,
    CAST((SELECT 
        CASE
            WHEN LENGTH(comment_text_j) >= 3000 THEN
                SUBSTR(comment_text_j, 1, 2997) || '...'
            ELSE
                SUBSTR(comment_text_j, 1, 2999)
        END 
     FROM (
        SELECT 
            xmlcast(xmlagg(xmlelement(e, split_comment_txt).EXTRACT('//text()') ORDER BY text_order) AS clob) AS comment_text_j
        FROM ARGUS.V_CASE_COMMENTS_CLOB_CMT_TXT_J VCTJ
     }') || TO_CLOB(q'{   WHERE VCM.CASE_ID = VCTJ.CASE_ID
        GROUP BY VCTJ.CASE_ID
     )
    ) AS VARCHAR2(4000)) AS COMMENT_TXT_J

FROM 
   (SELECT * FROM ARGUS.V_CASE_COMMENTS WHERE DELETED IS NULL) VCC
JOIN argus.V_CASE_MASTER VCM
   ON VCM.CASE_ID = VCC.CASE_ID(+)
WHERE 
    VCM.DELETED IS NULL
    AND VCM.CASE_ID <> -1}'),'SELECT 
    CASE_ID,
    CAST(C_CASE_COMMENT_TXT AS VARCHAR2(4000)) AS C_CASE_COMMENT_TXT,
    CAST(C_CASE_COMMENT_TXT_J AS VARCHAR2(4000)) AS C_CASE_COMMENT_TXT_J
FROM 
    &MARTUSERNAME..DM_CASE_COMMENTS');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PAT_TESTS','DM_CASE_COMMENTS','C_REL_TESTS, C_REL_TESTS_J',null,null,null,null,TO_CLOB(q'{SELECT 
    VCM.CASE_ID,
    CASE 
        WHEN dbms_lob.getlength(vrt.rel_tests) >= 3000 THEN 
            dbms_lob.substr(vrt.rel_tests, 2997, 1) || '...'
        ELSE 
            dbms_lob.substr(vrt.rel_tests, 2999, 1)
    END AS c_rel_tests,
    CASE 
        WHEN dbms_lob.getlength(vrtj.rel_tests_j) >= 3000 THEN 
            dbms_lob.substr(vrtj.rel_tests_j, 2997, 1) || '...'
        ELSE 
            dbms_lob.substr(vrtj.rel_tests_j, 2999, 1)
    END AS c_rel_tests_j
FROM (select * from a}') || TO_CLOB(q'{rgus.v_case_pat_tests where deleted is null) vcpt, 
      ARGUS.V_CASE_MASTER vcm,

      (SELECT a.rel_test_id, xmlcast(xmlagg(xmlelement(e, split_rel_tests).EXTRACT('//text()') ORDER BY text_order) AS clob) rel_tests
        FROM argus.v_case_pat_tests_clob_rel_tests a
        JOIN ARGUS.V_CASE_MASTER b ON a.rel_test_id = b.CASE_ID
        GROUP BY a.rel_test_id) vrt, -- 	  v_rel_tests vrt

        (SELECT rel_test_id,  xmlcast(xmlagg(xmlelement(e, split_rel_tests).EXTRACT('//text()') ORDER BY}') || TO_CLOB(q'{ text_order) AS clob) rel_tests_j
        FROM argus.v_case_pat_tests_clob_rel_test_j a
        JOIN ARGUS.V_CASE_MASTER b ON a.rel_test_id = b.CASE_ID
        GROUP BY a.rel_test_id) vrtj --  v_rel_tests_j vrtj,

WHERE   vcm.case_id = vcpt.rel_test_id (+) AND 
        vcm.casE_id = vrt.rel_test_id (+) AND 
        vcm.casE_id = vrtj.rel_test_id (+) AND 
        vcm.case_id<>-1 AND 
        NVL(vrt.rel_tests,vrtj.rel_tests_j) IS NOT NULL}'),'SELECT 
    CASE_ID,  
    C_REL_TESTS,
    C_REL_TESTS_J
FROM &MARTUSERNAME..DM_CASE_COMMENTS
WHERE NVL(C_REL_TESTS,C_REL_TESTS_J) IS NOT NULL');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_ASSESS','DM_CASE_DATA','C_LISTEDNESS, C_OUTCOME, C_SERIOUSNESS, C_AGENT_SUSPECT, C_BFARM_MANUAL_TEXT, C_DIAGNOSIS_DICT_ID, C_EVALUATION, C_AGENT_SUSPECT_J, C_OUTCOME_J, C_LISTEDNESS_J, C_SERIOUSNESS_J, C_EVALUATION_J',null,null,null,null,TO_CLOB(q'{SELECT 
    vca.case_id,
    DECODE(vca.listedness,
        1, 'LISTED',
        2, 'UNLISTED',
        3, 'UNKNOWN') AS listedness_description,
    upper(vle.EVT_OUTCOME),
    DECODE(vca.SERIOUSNESS,1,'YES','NO') AS Seriousness,
   (SELECT upper(state3) FROM "ARGUS".v_cmn_lookup WHERE id = vca.agent_suspect) AS agent_suspect,
		(SELECT vct1.SPLIT_BFARM_MANUAL_TEXT
     FROM ARGUS.V_CASE_ASSESS_CLOB_BFARM_MAN_TX vct1
     WHERE VCA.case_id= vct1.case_id
       AND vct1.TEXT_ORDER = 1
       ) AS}') || TO_CLOB(q'{ BFARM_MANUAL_TEXT,
        (SELECT  
        VCDG.name
     FROM 
        ARGUS.V_CFG_DICTIONARIES_ENTERPRISE VCDE, ARGUS.V_CFG_DICTIONARIES_GLOBAL VCDG 
     WHERE 
	    VCDE.GLOBAL_DICT_ID = VCDG.GLOBAL_DICT_ID
        AND UPPER(VCDG.DICTIONARY_SOURCE) = UPPER('MEDDRA')
        AND VCA.DIAGNOSIS_DICT_ID = VCDE.dict_id
        AND VCDE.DELETED IS NULL
        AND VCDG.DELETED IS NULL) AS DIAGNOSIS_DICT,

	(SELECT vct1.SPLIT_EVALUATION
     FROM ARGUS.CASE_ASSESS_CLOB_EVALUATION vct1
     WHERE}') || TO_CLOB(q'{ VCA.case_id = vct1.case_id
       AND vct1.TEXT_ORDER = 1
       ) AS EVALUATION,

    (SELECT upper(state3) FROM "ARGUS".v_cmn_lookup WHERE id = vca.agent_suspect) AS agent_suspect_j,
     vle.EVT_OUTCOME_J  ,
	 vll.LISTEDNESS_J,
      DECODE(vca.SERIOUSNESS,1,'YES','NO') AS Seriousness_j,
	(SELECT vct1.SPLIT_EVALUATION
     FROM ARGUS.CASE_ASSESS_CLOB_EVALUATION_J vct1
     WHERE VCA.case_id = vct1.case_id
       AND vct1.TEXT_ORDER = 1
       ) AS EVALUATION_J
FROM 
    ARGUS.V_CASE_ASSESS V}') || TO_CLOB(q'{CA, ARGUS.V_LM_EVT_OUTCOME VLE, ARGUS.V_LM_LISTEDNESS VLL
    WHERE VCA.OUTCOME=VLE.EVT_OUTCOME_ID(+)
    AND VCA.LISTEDNESS=VLL.LISTEDNESS_ID(+)
    AND VCA.DELETED IS NULL}'),'select case_id,
UPPER(C_LISTEDNESS),
UPPER(C_OUTCOME),
UPPER(C_SERIOUSNESS),
UPPER(C_AGENT_SUSPECT),
C_BFARM_MANUAL_TEXT,
C_DIAGNOSIS_DICT_ID,
C_EVALUATION,
UPPER(C_AGENT_SUSPECT_J),
UPPER(C_OUTCOME_J),
UPPER(C_LISTEDNESS_J),
UPPER(C_SERIOUSNESS_J),
C_EVALUATION_J
from &MARTUSERNAME..DM_CASE_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_COMPANY_CMTS','DM_CASE_COMMENTS','C_COMPANY_COMMENT_TXT, C_COMPANY_COMMENT_TXT_J',null,null,null,null,TO_CLOB(q'{SELECT 
    VCM.CASE_ID,
    CAST((SELECT 
        CASE
            WHEN LENGTH(comment_text) >= 3000 THEN
                SUBSTR(comment_text, 1, 2997) || '...'
            ELSE
                SUBSTR(comment_text, 1, 2999)
        END 
     FROM (
        SELECT 
            xmlcast(xmlagg(xmlelement(e, split_comment_txt).EXTRACT('//text()') ORDER BY text_order) AS clob) AS comment_text
        FROM ARGUS.V_CASE_COMPANY_CMTS_CLOB_CMT_TXT VCCCCCT
        WHERE VCM.CASE_ID = VCCCCCT.CASE_ID (+)
}') || TO_CLOB(q'{        GROUP BY VCCCCCT.CASE_ID
     )
    ) AS VARCHAR2(4000)) AS COMMENT_TXT,
    CAST((SELECT 
        CASE
            WHEN LENGTH(comment_text_j) >= 3000 THEN
                SUBSTR(comment_text_j, 1, 2997) || '...'
            ELSE
                SUBSTR(comment_text_j, 1, 2999)
        END 
     FROM (
        SELECT 
            xmlcast(xmlagg(xmlelement(e, split_comment_txt).EXTRACT('//text()') ORDER BY text_order) AS clob) AS comment_text_j
        FROM ARGUS.V_CASE_COMPANY_CMTS_CLOB_}') || TO_CLOB(q'{CMTTX_J VCCCCCJ
        WHERE VCM.CASE_ID = VCCCCCJ.CASE_ID (+)
        GROUP BY VCCCCCJ.CASE_ID
     )
    ) AS VARCHAR2(4000)) AS COMMENT_TXT_J

FROM 
   (SELECT * FROM ARGUS.V_CASE_COMPANY_CMTS WHERE DELETED IS NULL) VCC
JOIN V_CASE_MASTER VCM   ON VCM.CASE_ID = VCC.CASE_ID(+)
WHERE 
    VCM.DELETED IS NULL
    AND VCM.CASE_ID <> -1}'),'SELECT 
CASE_ID,
C_COMPANY_COMMENT_TXT,
C_COMPANY_COMMENT_TXT_J
FROM &MARTUSERNAME..DM_CASE_COMMENTS');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PRODUCT','DM_CASE_PRODUCT','CASE_ID, SEQ_NUM, C_DRUG_TYPE, C_DRUG_TYPE_J, C_COUNTRY, C_QC_RESULT, C_QC_COMMENT, C_SDRUG_NOT_ADMIN, C_QC_COMPLAINT_CAT_TEXT, C_QC_ANALYSIS_CAT_TEXT, C_QC_ANAL_SUMMARY_TEXT,  C_NOTES, C_BIOSIMILAR, C_BIOSIMILAR_J, C_PRE_1938, C_PRE_1938_J, C_COUNTRY_J, C_NOTES_J, C_QC_COMMENT_J, C_QC_COMPLAINT_CAT_TEXT_J, C_QC_RESULT_J, C_QC_ANAL_SUMMARY_TEXT_J, C_QC_ANALYSIS_CAT_TEXT_J, C_SDRUG_NOT_ADMIN_J, CSV_ALL_OTH_SUS_PROD, CSV_OTH_COMP_SUS_PROD, C_BLINDED_PRODUCT_NAME, C_CONFIGURED_PRODUCT, C_CONFIGURED_PRODUCT_J, C_FAMILY_NAME, C_FAMILY_NAME_J',null,null,null,null,TO_CLOB(q'{select 
		cp.CASE_ID,
		cp.SEQ_NUM, 
		CASE 
				WHEN cp.DRUG_TYPE = 1 THEN 'Suspect'
				WHEN cp.DRUG_TYPE = 2 THEN 'Concomitant'
				WHEN cp.DRUG_TYPE = 3 THEN 'Treatment'
		END AS DRUG_TYPE,
       CASE WHEN cp.drug_type = 1 THEN '容疑者'
            WHEN cp.drug_type = 2 THEN '併用'
            WHEN cp.drug_type = 3 THEN '処理'
        END AS DRUG_TYPE_J,
		lc.country AS Countries,
		CASE WHEN dbms_lob.getlength (ccp.qc_results) > 4000
				THEN
					TO_CHAR(substr(ccp.qc_results,3997)||'...')
				E}') || TO_CLOB(q'{LSE
					TO_CHAR(ccp.qc_results)
		END  AS C_QC_RESULT,
		CASE WHEN dbms_lob.getlength (ccp.qc_comments) > 4000
				THEN
					TO_CHAR(substr(ccp.qc_comments,3997)||'...')
				ELSE
					TO_CHAR(ccp.qc_comments)
		END  AS QC_COMMENT ,
		CASE 
				WHEN cp.SDRUG_NOT_ADMIN = 1 THEN 'Yes'
				ELSE 'No'
		END AS SDRUG_NOT_ADMIN_DESC,
		CASE WHEN dbms_lob.getlength (ccp.qc_complaint) > 4000
				THEN
					TO_CHAR(substr(ccp.qc_complaint,3997)||'...')
				ELSE
					TO_CHAR(ccp.qc_complaint)
		END AS QC_CO}') || TO_CLOB(q'{MPLAINT_CAT_TEXT,
		CASE WHEN dbms_lob.getlength (ccp.qc_analysis) > 4000
				THEN
					TO_CHAR(substr(ccp.qc_analysis,3997)||'...')
				ELSE
					TO_CHAR(ccp.qc_analysis)
		END AS QC_ANALYSIS_CAT_TEXT,
		CASE WHEN dbms_lob.getlength (ccp.qc_summary) > 4000
				THEN
					TO_CHAR(substr(ccp.qc_summary,3997)||'...')
				ELSE
					TO_CHAR(ccp.qc_summary)
		END AS QC_ANAL_SUMMARY_TEXT,

		CASE WHEN dbms_lob.getlength (ccp.notes) > 4000
				THEN
					TO_CHAR(substr(ccp.notes,3997)||'...')
				ELSE
		}') || TO_CLOB(q'{		   TO_CHAR(ccp.notes)
		END AS NOTES,
		CASE 
				WHEN cp.BIOSIMILAR = 1 THEN 'Yes'
				ELSE 'No'
			END AS BIOSIMILAR,
		CASE 
				WHEN cp.BIOSIMILAR = 1 THEN 'Yes'
				ELSE 'No'
			END AS BIOSIMILAR_J,
		CASE 
				WHEN cp.PRE_1938 = 1 THEN 'Yes'
				ELSE 'No'
			END AS PRE_1938,
		CASE 
				WHEN cp.PRE_1938 = 1 THEN 'Yes'
				ELSE 'No'
			END AS PRE_1938_J,
		--PRODUCT_ID

		lc.country_J AS Countries_J,


		CASE WHEN dbms_lob.getlength (ccp.notes_j) > 4000
				THEN
					TO_CHAR(substr(ccp.no}') || TO_CLOB(q'{tes_j,3997)||'...')
				ELSE
				   TO_CHAR(ccp.notes_j)
		END AS NOTES_J,


		CASE WHEN dbms_lob.getlength (ccp.qc_comments_j) > 4000
				THEN
					TO_CHAR(substr(ccp.qc_comments_j,3997)||'...')
				ELSE
				   TO_CHAR(ccp.qc_comments_j)
		END AS QC_COMMENT_J,

		CASE WHEN dbms_lob.getlength (ccp.complaint_j) > 4000
				THEN
					TO_CHAR(substr(ccp.complaint_j,3997)||'...')
				ELSE
				   TO_CHAR(ccp.complaint_j)
		END AS QC_COMPLAINT_J,
		--QC_COMPLAINT_CAT_TEXT_J
		CASE WHEN dbms_lob.getleng}') || TO_CLOB(q'{th (ccp.qc_results_j) > 4000
				THEN
					TO_CHAR(substr(ccp.qc_results_j,3997)||'...')
				ELSE
				   TO_CHAR(ccp.qc_results_j)
		END AS QC_RESULT_J,
		CASE WHEN dbms_lob.getlength (ccp.qc_summary_j) > 4000
				THEN
					TO_CHAR(substr(ccp.qc_summary_j,1,3997)||'...')
				ELSE
				   TO_CHAR(ccp.qc_summary_j)
		END AS C_QC_ANAL_SUMMARY_J,
        CASE WHEN dbms_lob.getlength (ccp.qc_analysis_j) > 4000
				THEN
					TO_CHAR(substr(ccp.qc_analysis_j,3997)||'...')
				ELSE
                   TO_}') || TO_CLOB(q'{CHAR(ccp.qc_analysis_j)
		END AS QC_ANALYSIS_J,
		CASE 
				WHEN cp.SDRUG_NOT_ADMIN = 1 THEN 'Yes'
				ELSE 'No'
		END AS SDRUG_NOT_ADMIN_DESC_J,
		cos.CSV_ALL_OTH_SUS_PROD AS CSV_ALL_OTH_SUS_PROD,
        csc.CSV_OTH_COMP_SUS_PROD as CSV_OTH_COMP_SUS_PROD,
        case when UPPER(cp.co_drug_code) = 'STUDY DRUG' then nvl((select lsc.blind_name
            from argus.v_case_study cs, 
            argus.v_lm_study_cohorts lsc,
            argus.v_lm_study_products lsp,
            argus.v_lm_studi}') || TO_CLOB(q'{es ls
            where cs.study_key = ls.study_key
            and cs.case_id = cp.case_id
            and cs.cohort_id = lsp.cohort_id
            and lsp.product_id = NVL(cp.product_id,cp.pat_exposure)
            and cs.study_key = lsc.study_key
            and cs.cohort_id = lsc.cohort_id
            and ((cs.study_type in (1,2)
            and ls.unblind_ok = 0) OR code_broken = 0)
            and ls.deleted is null
            and lsp.deleted is null
            and lsc.deleted is null),(}') || TO_CLOB(q'{(SELECT lp.prod_name FROM argus.v_lm_product lp WHERE lp.product_id = nvl(cp.product_id, cp.pat_exposure) AND lp.deleted IS NULL)))
        else cp.product_name end AS C_BLINDED_PRODUCT_NAME,
       (SELECT lp.prod_name FROM ARGUS.v_lm_product lp WHERE lp.product_id = nvl(cp.product_id,cp.pat_exposure) AND lp.deleted is null) AS C_CONFIGURED_PRODUCT,
       (SELECT lp.prod_name_j FROM ARGUS.v_lm_product lp WHERE lp.product_id = nvl(cp.product_id,cp.pat_exposure) AND lp.deleted is null) AS C_CONF}') || TO_CLOB(q'{IGURED_PRODUCT_J,
       decode((SELECT name FROM argus.v_lm_product_family lpf WHERE lpf.family_id = cp.family_id AND lpf.deleted is null), 'PARP Inhibitor', 'Pamiparib', 'BTK inhibitor', 
      'Zanubrutinib', 'Immune Checkpoint Inhibitor Against PD-1', 'Tislelizumab',(SELECT name FROM argus.v_lm_product_family lpf WHERE lpf.family_id = cp.family_id AND lpf.deleted is null)) as C_FAMILY_NAME,
      (SELECT name_j FROM ARGUS.v_lm_product_family lpf WHERE cp.family_id=lpf.family_id AND lpf.delet}') || TO_CLOB(q'{ed is null) AS C_FAMILY_NAME_J
FROM argus.v_case_master      cm,
     argus.v_CASE_PRODUCT     cp,
     (
    SELECT cpr.case_id,
           cpr.seq_num, 
          XMLCAST(XMLAGG(XMLELEMENT(E,cpr.split_qc_result).EXTRACT('//text()') ORDER BY cpr.text_order) AS CLOB) qc_results,
          XMLCAST(XMLAGG(XMLELEMENT(E,cpc.split_qc_comment).EXTRACT('//text()') ORDER BY cpc.text_order) AS CLOB) qc_comments,
          XMLCAST(XMLAGG(XMLELEMENT(E,cpqac.SPLIT_QC_ANALYSIS_CAT_TEXT).EXTRACT('//text()') O}') || TO_CLOB(q'{RDER BY cpqac.text_order) AS CLOB) qc_analysis,
          XMLCAST(XMLAGG(XMLELEMENT(E,cpcq.SPLIT_QC_COMPLAINT_CAT_TEXT).EXTRACT('//text()') ORDER BY cpcq.text_order) AS CLOB) qc_complaint,
          XMLCAST(XMLAGG(XMLELEMENT(E,cpqa.SPLIT_QC_ANAL_SUMMARY_TEXT).EXTRACT('//text()') ORDER BY cpqa.text_order) AS CLOB) qc_summary,
          XMLCAST(XMLAGG(XMLELEMENT(E,cpcn.SPLIT_NOTES).EXTRACT('//text()') ORDER BY cpcn.text_order) AS CLOB) notes,
          XMLCAST(XMLAGG(XMLELEMENT(E,cpcnj.SPLIT_NOTES}') || TO_CLOB(q'{).EXTRACT('//text()') ORDER BY cpcnj.text_order) AS CLOB) notes_j,
          XMLCAST(XMLAGG(XMLELEMENT(E,cpcj.split_qc_comment).EXTRACT('//text()') ORDER BY cpcj.text_order) AS CLOB) qc_comments_j,
          XMLCAST(XMLAGG(XMLELEMENT(E,cprj.split_qc_result).EXTRACT('//text()') ORDER BY cprj.text_order) AS CLOB) qc_results_j,
          XMLCAST(XMLAGG(XMLELEMENT(E,cpctj.SPLIT_QC_COMPLAINT_CAT_TEXT).EXTRACT('//text()') ORDER BY cpctj.text_order) AS CLOB) complaint_j,
          XMLCAST(XMLAGG(XMLELE}') || TO_CLOB(q'{MENT(E,cpasj.SPLIT_QC_ANAL_SUMMARY_TEXT).EXTRACT('//text()') ORDER BY cpasj.text_order) AS CLOB) qc_summary_j,
          XMLCAST(XMLAGG(XMLELEMENT(E,cpacj.SPLIT_QC_ANALYSIS_CAT_TEXT).EXTRACT('//text()') ORDER BY cpacj.text_order) AS CLOB) qc_analysis_j
          FROM "ARGUS".V_CASE_PRODUCT_CLOB_QC_RESULT cpr,
               "ARGUS".V_CASE_PRODUCT_CLOB_QC_comment cpc,
                ARGUS.V_CASE_PROD_CLOB_QC_CMPLNT_TEXT cpcq, 
                ARGUS.V_CASE_PROD_CLOB_QC_ANL_SUM_TEXT cpqa,
        }') || TO_CLOB(q'{        ARGUS.V_CASE_PROD_CLOB_QC_ANL_CAT_TEXT cpqac,
                ARGUS.V_CASE_PRODUCT_CLOB_NOTES        cpcn,
                ARGUS.V_CASE_PRODUCT_CLOB_NOTES_J      cpcnj,
                "ARGUS".V_CASE_PRODUCT_CLOB_QC_comment_j cpcj,
                "ARGUS".V_CASE_PRODUCT_CLOB_QC_RESULT_J  cprj,
                ARGUS.V_CASE_PROD_CLOB_QC_CMPLNT_TXT_J   cpctj,
                ARGUS.case_prod_clob_qc_anl_sum_tx_j     cpasj,
                 ARGUS.v_case_prod_clob_qc_anl_cat_tx_j  cpacj
      }') || TO_CLOB(q'{   WHERE cpr.case_id=cpc.case_id
           AND CPR.SEQ_NUM=cpc.seq_num
           AND cpr.case_id=cpcq.case_id
           AND cpr.seq_num=cpcq.seq_num
           AND cpr.case_id=cpcq.case_id
           AND cpr.seq_num=cpcq.seq_num
           AND cpr.case_id=cpqa.case_id
           AND cpr.seq_num=cpqa.seq_num
           AND cpr.case_id=cpqac.case_id
           AND cpr.seq_num=cpqac.seq_num
           AND cpr.case_id=cpcn.case_id
           AND cpr.seq_num=cpcn.seq_num
           AND cpr.case_id}') || TO_CLOB(q'{=cpcnj.case_id
           AND cpr.seq_num=cpcnj.seq_num
           AND cpr.case_id=cpcj.case_id
           AND cpr.seq_num=cpcj.seq_num
           AND cpr.case_id=cprj.case_id
           AND cpr.seq_num=cprj.seq_num
           AND cpr.case_id=cpctj.case_id
           AND cpr.seq_num=cpctj.seq_num
           AND cpr.case_id=cpasj.case_id
           AND cpr.seq_num=cpasj.seq_num
           AND cpr.case_id=cpacj.case_id
           AND cpr.seq_num=cpacj.seq_num
    GROUP BY cpr.case_id,cpr.seq_num
)}') || TO_CLOB(q'{                ccp,
     (SELECT cpr.case_id,cpr.seq_num,TO_CHAR( RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,cpr2.product_name||', ').EXTRACT('//text()') ORDER BY cpr2.case_id,cpr2.sort_id)AS CLOB),', ')) AS CSV_ALL_OTH_SUS_PROD
		   FROM ARGUS.V_CASE_PRODUCT cpr,
                ARGUS.V_CASE_PRODUCT cpr2
		   WHERE cpr2.drug_type=1 
             AND cpr.case_id=cpr2.case_id
		     AND cpr.seq_num <> cpr2.seq_num
		     AND cpr.deleted IS NULL
             AND cpr2.deleted IS NULL
		 GROUP BY cpr.case_i}') || TO_CLOB(q'{d,cpr.seq_num)              cos,
     (SELECT cpr.case_id,cpr.seq_num,TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,cpr2.product_name||', ').EXTRACT('//text()') ORDER BY cpr2.case_id,cpr2.sort_id)AS CLOB),', ')) AS CSV_OTH_COMP_SUS_PROD
		   FROM ARGUS.V_CASE_PRODUCT cpr,
                ARGUS.V_CASE_PRODUCT cpr2
		   WHERE cpr2.drug_type=1
		     AND nvl(cpr2.product_id,cpr2.pat_exposure)<>0
             AND cpr.case_id=cpr2.case_id
		     AND cpr.seq_num <> cpr2.seq_num
		     AND cpr.deleted IS N}') || TO_CLOB(q'{ULL
             AND cpr2.deleted IS NULL
		 GROUP BY cpr.case_id,cpr.seq_num)             csc,
     argus.lm_countries       lc
WHERE 
      cm.case_id=cp.case_id
  AND cp.case_id=ccp.case_id
  AND cp.seq_num=ccp.seq_num
  AND cp.country_id=lc.country_id(+)
  AND cp.case_id=cos.case_id(+)
  AND cp.seq_num=cos.seq_num(+)
  AND cp.case_id=csc.case_id(+)
  AND cp.seq_num=csc.seq_num(+)
  AND cp.deleted IS NULL
  AND lc.deleted  IS NULL}'),TO_CLOB(q'{select 
CASE_ID, SEQ_NUM, C_DRUG_TYPE, C_DRUG_TYPE_J, C_COUNTRY, C_QC_RESULT, C_QC_COMMENT, C_SDRUG_NOT_ADMIN, C_QC_COMPLAINT_CAT_TEXT, C_QC_ANALYSIS_CAT_TEXT, C_QC_ANAL_SUMMARY_TEXT,  C_NOTES, C_BIOSIMILAR, C_BIOSIMILAR_J, C_PRE_1938, C_PRE_1938_J, C_COUNTRY_J, C_NOTES_J, C_QC_COMMENT_J, C_QC_COMPLAINT_CAT_TEXT_J, C_QC_RESULT_J, C_QC_ANAL_SUMMARY_TEXT_J, C_QC_ANALYSIS_CAT_TEXT_J, C_SDRUG_NOT_ADMIN_J, TO_CHAR(CSV_ALL_OTH_SUS_PROD), TO_CHAR(CSV_OTH_COMP_SUS_PROD), C_BLINDED_PRODUCT_NAME, C_CONFIG}') || TO_CLOB(q'{URED_PRODUCT, C_CONFIGURED_PRODUCT_J, C_FAMILY_NAME, C_FAMILY_NAME_J
from &MARTUSERNAME..dm_case_product
where seq_num>0}'));
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_NARRATIVE','DM_CASE_COMMENTS','C_ABBREV_NARRATIVE, C_NARRATIVE, C_ABBREV_NARRATIVE_J, C_NARRATIVE_J',null,null,null,null,TO_CLOB(q'{SELECT 
    VCM.CASE_ID,
    CAST((SELECT 
        CASE
            WHEN LENGTH(abbrev_narrative) >= 3000 THEN
                SUBSTR(abbrev_narrative, 1, 2997) || '...'
            ELSE
                SUBSTR(abbrev_narrative, 1, 2999)
        END 
     FROM (
        SELECT 
            xmlcast(xmlagg(xmlelement(e, split_abbrev_narrative).EXTRACT('//text()') ORDER BY text_order) AS clob) AS abbrev_narrative
        FROM ARGUS.v_case_narrative_clob_abbrv_narr VCNCAN
        WHERE VCM.CASE_ID = }') || TO_CLOB(q'{VCNCAN.CASE_ID
        GROUP BY VCNCAN.CASE_ID
     )
    ) AS VARCHAR2(4000)) AS ABBREV_NARRATIVE,
	CAST((SELECT 
        CASE
            WHEN LENGTH(narrative) >= 1500 THEN
                SUBSTR(narrative, 1, 1497) || '...'
            ELSE
                SUBSTR(narrative, 1, 1499)
        END 
     FROM (
        SELECT 
            xmlcast(xmlagg(xmlelement(e, SPLIT_NARRATIVE).EXTRACT('//text()') ORDER BY text_order) AS clob) AS narrative
        FROM ARGUS.V_CASE_NARRATIVE_CLOB_NARRATIVE}') || TO_CLOB(q'{ VCNCN
        WHERE VCM.CASE_ID = VCNCN.CASE_ID
        GROUP BY VCNCN.CASE_ID
     )
    ) AS VARCHAR2(4000)) AS NARRATIVE,
	CAST((SELECT 
        CASE
            WHEN LENGTH(abbrev_narrative) >= 3000 THEN
                SUBSTR(abbrev_narrative, 1, 2997) || '...'
            ELSE
                SUBSTR(abbrev_narrative, 1, 2999)
        END 
     FROM (
        SELECT 
            xmlcast(xmlagg(xmlelement(e, split_abbrev_narrative).EXTRACT('//text()') ORDER BY text_order) AS clob) AS abbrev}') || TO_CLOB(q'{_narrative
        FROM ARGUS.V_CASE_NARRATIVE_CLOB_ABR_NARR_J VCNCANJ
        WHERE VCM.CASE_ID = VCNCANJ.CASE_ID
        GROUP BY VCNCANJ.CASE_ID
     )
    ) AS VARCHAR2(4000)) AS ABBREV_NARRATIVE_J,
    CAST((SELECT 
        CASE
            WHEN LENGTH(narrative) >= 1000 THEN
                SUBSTR(narrative, 1, 997) || '...'
            ELSE
                SUBSTR(narrative, 1, 999)
        END 
     FROM (
        SELECT 
            xmlcast(xmlagg(xmlelement(e, SPLIT_NARRATIVE).EXTRACT('}') || TO_CLOB(q'{//text()') ORDER BY text_order) AS clob) AS narrative
        FROM ARGUS.V_CASE_NARRATIVE_CLOB_NARR_J VCNCNJ
        WHERE VCM.CASE_ID = VCNCNJ.CASE_ID
        GROUP BY VCNCNJ.CASE_ID
     )
    ) AS VARCHAR2(4000)) AS NARRATIVE_J

FROM 
    (SELECT * FROM ARGUS.V_CASE_NARRATIVE WHERE DELETED IS NULL) VCN, ARGUS.V_CASE_MASTER VCM
WHERE 
VCM.CASE_ID= VCN.CASE_ID(+)
AND VCM.DELETED IS NULL
AND VCM.CASE_ID<>-1}'),'SELECT 
CASE_ID,
CAST(C_ABBREV_NARRATIVE AS VARCHAR2(4000)) AS C_ABBREV_NARRATIVE,
CAST(C_NARRATIVE AS VARCHAR2(4000)) AS C_NARRATIVE,
CAST(C_ABBREV_NARRATIVE_J AS VARCHAR2(4000)) AS C_ABBREV_NARRATIVE_J,
CAST(C_NARRATIVE_J AS VARCHAR2(4000)) AS C_NARRATIVE_J
from &MARTUSERNAME..DM_CASE_COMMENTS');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PROD_DEVICES','DM_CASE_PROD_DEVICES','EXPLANT_DATE_PARTIAL, IMPLANT_DATE_PARTIAL, EXP_DATE_PARTIAL, C_PRELIMINARY_COMMENTS, C_NARRATIVE_TEXT, MFG_DATE_PARTIAL, C_DEV_COMMENTS, C_PRELIMINARY_COMMENTS_J',null,null,null,null,TO_CLOB(q'{SELECT 
    VCPD.CASE_ID,
    VCPD.SEQ_NUM,
    -- Handling EXPLANT_DATE_PARTIAL
    CASE 
        WHEN LENGTH(VCPD.EXPLANT_DATE_PARTIAL) = 4 THEN CONCAT('??-???-', VCPD.EXPLANT_DATE_PARTIAL)
        WHEN LENGTH(VCPD.EXPLANT_DATE_PARTIAL) = 8 THEN CONCAT('??-', VCPD.EXPLANT_DATE_PARTIAL)
        ELSE VCPD.EXPLANT_DATE_PARTIAL
    END AS EXPLANT_DATE_PARTIAL,

    -- Handling IMPLANT_DATE_PARTIAL
    CASE 
        WHEN LENGTH(VCPD.IMPLANT_DATE_PARTIAL) = 4 THEN CONCAT('??-???-', VCPD.IMPLANT_DATE}') || TO_CLOB(q'{_PARTIAL)
        WHEN LENGTH(VCPD.IMPLANT_DATE_PARTIAL) = 8 THEN CONCAT('??-', VCPD.IMPLANT_DATE_PARTIAL)
        ELSE VCPD.IMPLANT_DATE_PARTIAL
    END AS IMPLANT_DATE_PARTIAL,

    -- Handling EXP_DATE_PARTIAL
    CASE 
        WHEN LENGTH(VCPD.EXP_DATE_PARTIAL) = 4 THEN CONCAT('??-???-', VCPD.EXP_DATE_PARTIAL)
        WHEN LENGTH(VCPD.EXP_DATE_PARTIAL) = 8 THEN CONCAT('??-', VCPD.EXP_DATE_PARTIAL)
        ELSE VCPD.EXP_DATE_PARTIAL
    END AS EXP_DATE_PARTIAL,

    -- Handling PRELIMINARY_CO}') || TO_CLOB(q'{MMENTS with truncation
    CASE
        WHEN LENGTH(VCPC.PRELIMINARY_COMMENTS) > 3997 THEN SUBSTR(VCPC.PRELIMINARY_COMMENTS, 1, 3997) || '...'
        ELSE VCPC.PRELIMINARY_COMMENTS
    END AS C_PRELIMINARY_COMMENTS,

    -- Handling NARRATIVE_TEXT with truncation
    CASE
        WHEN LENGTH(VNT.NARRATIVE_TEXT) > 3997 THEN SUBSTR(VNT.NARRATIVE_TEXT, 1, 3997) || '...'
        ELSE VNT.NARRATIVE_TEXT
    END AS C_NARRATIVE_TEXT,

    -- Handling MFG_DATE_PARTIAL
    CASE 
        WHEN LENGTH(VCPD}') || TO_CLOB(q'{.MFG_DATE_PARTIAL) = 4 THEN CONCAT('??-???-', VCPD.MFG_DATE_PARTIAL)
        WHEN LENGTH(VCPD.MFG_DATE_PARTIAL) = 8 THEN CONCAT('??-', VCPD.MFG_DATE_PARTIAL)
        ELSE VCPD.MFG_DATE_PARTIAL
    END AS MFG_DATE_PARTIAL,

    -- Handling DEV_COMMENTS with truncation
    CASE
        WHEN LENGTH(VDC.DEV_COMMENTS) > 3997 THEN SUBSTR(VDC.DEV_COMMENTS, 1, 3997) || '...'
        ELSE VDC.DEV_COMMENTS
    END AS C_DEV_COMMENTS,

    -- Handling PRELIMINARY_COMMENTS_J with truncation
    CASE
        }') || TO_CLOB(q'{WHEN LENGTH(VCPCJ.PRELIMINARY_COMMENTS_J) > 3997 THEN SUBSTR(VCPCJ.PRELIMINARY_COMMENTS_J, 1, 3997) || '...'
        ELSE VCPCJ.PRELIMINARY_COMMENTS_J
    END AS C_PRELIMINARY_COMMENTS_J

FROM 
    ARGUS.V_CASE_PROD_DEVICES VCPD

-- LEFT JOIN the CLOB tables
LEFT JOIN argus.v_CASE_PROD_DEV_CLOB_PRE_CMTS VCPC ON VCPD.CASE_ID = VCPC.CASE_ID AND VCPD.SEQ_NUM = VCPC.SEQ_NUM AND VCPC.TEXT_ORDER = 1
LEFT JOIN argus.v_CASE_PROD_DEV_CLOB_NARRATIVE VNT ON VCPD.CASE_ID = VNT.CASE_ID AND VCPD.SEQ_NUM = VNT}') || TO_CLOB(q'{.SEQ_NUM AND VNT.TEXT_ORDER = 1
LEFT JOIN argus.v_CASE_PROD_DEV_CLOB_dev_CMTS VDC ON VCPD.CASE_ID = VDC.CASE_ID AND VCPD.SEQ_NUM = VDC.SEQ_NUM AND VDC.TEXT_ORDER = 1
LEFT JOIN argus.v_CASE_PROD_DEV_CLOB_PRE_CMTS_J VCPCJ ON VCPD.CASE_ID = VCPCJ.CASE_ID AND VCPD.SEQ_NUM = VCPCJ.SEQ_NUM AND VCPCJ.TEXT_ORDER = 1

WHERE 
    VCPD.SEQ_NUM > 0
    AND VCPD.DELETED IS NULL}'),'SELECT 
    CASE_ID,
    SEQ_NUM,
    EXPLANT_DATE_PARTIAL,
    IMPLANT_DATE_PARTIAL,
    EXP_DATE_PARTIAL,
    C_PRELIMINARY_COMMENTS,
    C_NARRATIVE_TEXT,
    MFG_DATE_PARTIAL,
    C_DEV_COMMENTS,
    C_PRELIMINARY_COMMENTS_J
FROM &MARTUSERNAME..DM_CASE_PROD_DEVICES
WHERE SEQ_NUM > 0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PAT_INFO','DM_CASE_DATA','PAT_TITLE, PAT_INITIALS, PAT_FIRSTNAME, PAT_MI, PAT_LASTNAME, PAT_ADDRESS, ADDRESS_2, PAT_CITY, PAT_STATE, PAT_POSTAL_CODE, PAT_PHONE, PAT_DOB_PARTIAL, C_PAT_AGE_YEARS, C_IS_PREGNANCY_CASE, C_PARENT_CHILD_LINK, C_CONFIDENTIAL, C_CHILD_ONLY, NOTES, C_NOTES, COUNTY, EMAIL, C_PREGANCY_AND_NEONATAL, C_IS_PREGNANCY_CASE_J, C_CONFIDENTIAL_J, C_CHILD_ONLY_J, C_NOTES_J',null,null,null,null,TO_CLOB(q'{SELECT

    VCM.CASE_ID,
    COALESCE(
        VCPI.TITLE,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950087 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS TITLE,
	COALESCE(
        VCPI.PAT_INITIALS,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950019 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS PAT_INITIALS,
	COALESCE(
        VCPI.PAT_FIRSTNAME,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950015 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS PAT_FIRSTN}') || TO_CLOB(q'{AME,
	COALESCE(
        VCPI.PAT_MI,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950030 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS PAT_MI,
    COALESCE(
        VCPI.PAT_LASTNAME,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950020 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS PAT_LASTNAME,
    COALESCE(
        VCPI.PAT_ADDRESS,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950009 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS PAT_ADDRESS,
	COALESCE(
   }') || TO_CLOB(q'{     VCPI.ADDRESS_2,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950089 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS ADDRESS_2,
	COALESCE(
        VCPI.PAT_CITY,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950011 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS PAT_CITY,
	COALESCE(
        VCPI.PAT_STATE,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950023 AND VCNF.C_NULL_FLAVOR_VALUE IS NOT NULL THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS PAT_STATE,
	COA}') || TO_CLOB(q'{LESCE(
        VCPI.PAT_POSTAL_CODE,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950021  THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS PAT_POSTAL_CODE,
	COALESCE(
        VCPI.PAT_PHONE,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950078 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS PAT_PHONE,
COALESCE(

	(CASE 
        WHEN LENGTH(PAT_DOB_PARTIAL) = 4 THEN 
            CONCAT('??-???-', PAT_DOB_PARTIAL)
        WHEN LENGTH(PAT_DOB_PARTIAL) = 8 THEN 
            CONCA}') || TO_CLOB(q'{T('??-', PAT_DOB_PARTIAL)
        ELSE PAT_DOB_PARTIAL
    END),  MAX(CASE WHEN VCNF.FIELD_ID = 2940013 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)) AS PAT_DOB_PARTIAL,

    CASE 
        WHEN VCPI.AGE_UNIT_ID = '1' THEN ROUND(VCPI.PAT_AGE/8760,2)
        WHEN VCPI.AGE_UNIT_ID = '2' THEN ROUND(VCPI.PAT_AGE/365,2)
        WHEN VCPI.AGE_UNIT_ID = '3' THEN ROUND(VCPI.PAT_AGE/52,2)
        WHEN VCPI.AGE_UNIT_ID = '4' THEN ROUND(VCPI.PAT_AGE/12,2)
        WHEN VCPI.AGE_UNIT_ID = '5' THEN VCPI}') || TO_CLOB(q'{.PAT_AGE
        WHEN VCPI.AGE_UNIT_ID = '6' THEN ROUND(VCPI.PAT_AGE/525600,2)
        WHEN VCPI.AGE_UNIT_ID = '7' THEN ROUND(VCPI.PAT_AGE/31536000,2)
        WHEN VCPI.AGE_UNIT_ID = '8' THEN ROUND(VCPI.PAT_AGE/3,2)  
        WHEN VCPI.AGE_UNIT_ID = '9' THEN ROUND(VCPI.PAT_AGE*10,2)  
        END AS PAT_AGE_IN_YEARS, 
        CASE
        WHEN VCPI.PAT_STAT_PREG = 1 THEN 'YES'
        WHEN   VCPI.CASE_ID IS NOT NULL THEN 'NO'
        ELSE NULL
   END AS PREGNANT,
   CASE
        WHEN (SELECT  CO}') || TO_CLOB(q'{UNT(VLRT.TYPE_DESC)
     FROM ARGUS.V_CASE_REFERENCE  VCF , ARGUS.V_LM_REF_TYPES VLRT  
     WHERE VCPI.CASE_ID = VCF.CASE_ID (+)
     AND VCF.REF_TYPE_ID = VLRT.REF_TYPE_ID
     AND UPPER(VLRT.TYPE_DESC)= 'PARENT-CHILD LINK'
     AND VCF.DELETED IS NULL
     AND VLRT.DELETED IS NULL) = 1 THEN 'YES'
		WHEN VCPI.CASE_ID IS NOT NULL THEN  'NO'
     ELSE NULL
		END AS PARENT_CHILD_LINK,

    CASE
        WHEN VCPI.CONFIDENTIAL = 1 THEN 'YES'
        WHEN   VCPI.CASE_ID IS NOT NULL THEN 'NO'
       }') || TO_CLOB(q'{ ELSE NULL
   END AS CONFIDENTIAL,
    CASE
        WHEN VCPI.CHILD_ONLY = 1 THEN 'YES'
        WHEN  VCPI.CASE_ID IS NOT NULL THEN 'NO'
         ELSE NULL
  END AS CHILD_ONLY, COALESCE(     
        (CASE
        WHEN LENGTH(CPIN.SPLIT_NOTES) > 3997 THEN
            SUBSTR(REPLACE(REPLACE(CPIN.SPLIT_NOTES, CHR(10), ''), CHR(13), ''), 1, 3997) || '…'
        ELSE
            REPLACE(REPLACE(CPIN.SPLIT_NOTES, CHR(10), ''), CHR(13), '')
    END ),  MAX(CASE WHEN VCNF.FIELD_ID = 2950079 THEN '[NF:'}') || TO_CLOB(q'{ || VCNF.C_NULL_FLAVOR_VALUE || ']' END))
    AS  C_NOTES,
    COALESCE(
        VCPI.COUNTY,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950088 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS COUNTY,
	COALESCE(
        VCPI.EMAIL,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950090 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS EMAIL,
  CASE
        WHEN VCPI.PAT_STAT_PREG = 1 THEN 'YES'
        WHEN   VCPI.CASE_ID IS NOT NULL THEN 'NO'
        ELSE NULL
   END AS PREGNA}') || TO_CLOB(q'{NT_J,
    CASE
         WHEN VCPI.CONFIDENTIAL = 1 THEN 'YES'
        WHEN  VCPI.CASE_ID IS NOT NULL THEN 'NO'
        ELSE NULL
   END AS CONFIDENTIAL_J,
    CASE
         WHEN VCPI.CHILD_ONLY = 1 THEN 'YES'
         WHEN  VCPI.CASE_ID IS NOT NULL THEN 'NO'
         ELSE NULL
  END  AS CHILD_ONLY_J,

        CASE
            WHEN LENGTH(CPINJ.SPLIT_NOTES) > 3997 THEN
                SUBSTR(CPINJ.SPLIT_NOTES, 1, 3997) || '…'
            ELSE
                CPINJ.SPLIT_NOTES
        END 
      A}') || TO_CLOB(q'{S NOTES_J
FROM ARGUS.V_CASE_PAT_INFO VCPI, (SELECT * FROM &MARTUSERNAME..DM_CASE_NULL_FLAVOR where case_id in (select case_id from ARGUS.V_CASE_PAT_INFO where deleted is null) ) VCNF, ( SELECT * FROM  ARGUS.V_CASE_PAT_INFO_CLOB_NOTES_J 
     WHERE  TEXT_ORDER = 1) CPINJ, ( SELECT * FROM  ARGUS.V_CASE_PAT_INFO_CLOB_NOTES
     WHERE  TEXT_ORDER = 1) CPIN, ARGUS.V_CASE_MASTER VCM
     WHERE VCPI.DELETED IS NULL
     AND VCM.CASE_ID=VCPI.CASE_ID(+)
     AND VCM.CASE_ID<>-1
AND VCM.CASE_ID = VCNF.}') || TO_CLOB(q'{CASE_ID (+)
 AND VCM.CASE_ID = CPINJ.CASE_ID(+)
 AND VCM.CASE_ID = CPIN.CASE_ID(+)

 GROUP BY VCM.CASE_ID, VCPI.CASE_ID, VCPI.TITLE, VCPI.PAT_INITIALS, VCPI.PAT_FIRSTNAME,
 VCPI.PAT_MI,VCPI.PAT_LASTNAME,VCPI.PAT_ADDRESS,VCPI.ADDRESS_2 , 
 VCPI.PAT_CITY, VCPI.PAT_STATE , VCPI.PAT_POSTAL_CODE , VCPI.PAT_PHONE ,VCPI.PAT_DOB_PARTIAL,
 VCPI.AGE_UNIT_ID,VCPI.PAT_AGE , VCPI.PAT_STAT_PREG, 
 VCPI.CONFIDENTIAL, VCPI.CHILD_ONLY ,CPIN.SPLIT_NOTES,VCPI.COUNTY, VCPI.EMAIL, CPINJ.SPLIT_NOTES}'),'SELECT
CASE_ID,
PAT_TITLE,
PAT_INITIALS,
PAT_FIRSTNAME,
PAT_MI,
PAT_LASTNAME,
PAT_ADDRESS,
ADDRESS_2,
PAT_CITY,
PAT_STATE,
PAT_POSTAL_CODE,
PAT_PHONE,
PAT_DOB_PARTIAL,
C_PAT_AGE_YEARS,
UPPER(C_IS_PREGNANCY_CASE),  
UPPER(C_PARENT_CHILD_LINK),
UPPER(C_CONFIDENTIAL),
UPPER(C_CHILD_ONLY),
REPLACE(C_NOTES,CHR(10),''''),
COUNTY,
EMAIL,
UPPER(C_IS_PREGNANCY_CASE_J),
UPPER(C_CONFIDENTIAL_J),
UPPER(C_CHILD_ONLY_J),
C_NOTES_J
FROM &MARTUSERNAME..DM_CASE_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_REFERENCE','DM_CASE_REFERENCE','C_REF_CASE_NUM',null,null,null,null,'SELECT
    VCR.CASE_ID,
    VCR.SEQ_NUM,
    VCM.CASE_NUM AS CASE_NUM
FROM (SELECT * FROM ARGUS.V_CASE_REFERENCE WHERE DELETED IS NULL) VCR, ARGUS.V_CASE_MASTER VCM
WHERE 
VCR.REF_CASE_ID = VCM.CASE_ID(+)
AND VCM.DELETED IS NULL','SELECT 
CASE_ID,
SEQ_NUM,
C_REF_CASE_NUM
FROM &MARTUSERNAME..DM_CASE_REFERENCE
WHERE SEQ_NUM>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_LANGUAGE','DM_CASE_LANGUAGE','TEXT',null,null,null,null,TO_CLOB(q'{SELECT  
    CLCT.case_id,
    CLCT.seq_num,
    CLCT.language_id,
    CLCT.field_id, 
    CASE 
        WHEN dbms_lob.getlength(DBMS_XMLGEN.CONVERT(
                                          substr(
                                            xmlcast(
                                              xmlagg(
                                                xmlelement(E, 
                                                  DBMS_XMLGEN.CONVERT(REGEXP_REPLACE(substr(text,1,150029), '𫫇', '', 1, 0) , 0))
}') || TO_CLOB(q'{                                                order by text_order) AS CLOB), 1) , 1))> 1000
                                          THEN                                          
                                            TO_CHAR(SUBSTR(      
                                        DBMS_XMLGEN.CONVERT(
                                          substr(
                                            xmlcast(
                                              xmlagg(
                                 }') || TO_CLOB(q'{               xmlelement(E, 
                                                  DBMS_XMLGEN.CONVERT(REGEXP_REPLACE(substr(text,1,150029), '𫫇', '', 1, 0) , 0))
                                                order by text_order
                                              ) AS CLOB
                                            ), 1
                                          )
                                          , 1
                                        ),1,997) || '...')
                  }') || TO_CLOB(q'{                      ELSE 
                                        TO_CHAR(DBMS_XMLGEN.CONVERT(
                                          substr(
                                            xmlcast(
                                              xmlagg(
                                                xmlelement(E, 
                                                  DBMS_XMLGEN.CONVERT(REGEXP_REPLACE(substr(text,1,150029), '𫫇', '', 1, 0) , 0))
                                                order}') || TO_CLOB(q'{ by text_order
                                              ) AS CLOB
                                            ), 1)
                                          , 1)) END AS   lang_text
                                        FROM "ARGUS".V_CASE_LANGUAGE_CLOB_TEXT CLCT, &ETLUSERNAME..DM_ETL_CASES_TO_PROC ECP, argus.v_case_language vcl
                                        WHERE CLCT.CASE_ID  = ECP.CASE_ID (+)  and
                                              CLCT.case_id = vcl.case_id (+}') || TO_CLOB(q'{) and   
                                              CLCT.field_id = vcl.field_id (+) and 
                                              CLCT.language_id= vcl.language_id (+) and 
                                              CLCT.seq_num = vcl.seq_num (+)and 
                                              vcl.deleted is null
                                        GROUP BY CLCT.case_id,CLCT.field_id,CLCT.language_id,CLCT.seq_num}'),'SELECT 
    CASE_ID,
    SEQ_NUM,
    LANGUAGE_ID,
    field_id, 
    C_TEXT
FROM &MARTUSERNAME..DM_CASE_LANGUAGE 
WHERE SEQ_NUM > 0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('LM_LANGUAGE_DATA','DM_LM_LANGUAGE_DATA','TEXT',null,null,null,null,'SELECT 
    VLL.ID,
    (SELECT 
        CASE
            WHEN LENGTH(VCLCT.SPLIT_TEXT) > 3997 THEN
                SUBSTR(VCLCT.SPLIT_TEXT, 1, 3997) || ''...''
            ELSE
                VCLCT.SPLIT_TEXT
        END 
     FROM ARGUS.V_LM_LANGUAGE_DATA_clob_TEXT VCLCT
     WHERE VLL.ID = VCLCT.ID
       AND VLL.FIELD_ID = VCLCT.FIELD_ID
       AND VCLCT.TEXT_ORDER = 1) AS TEXT
FROM 
    ARGUS.V_LM_LANGUAGE_DATA VLL
WHERE 
    VLL.DELETED IS NULL','SELECT 
    ID,
    C_TEXT
FROM &MARTUSERNAME..DM_LM_LANGUAGE_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_REFERENCE','DM_CASE_DATA','LF_CASE_REFERENCES_NOTES, LF_CASE_REFERENCES, C_AUTHORITY_NUMBER, C_COMPANY_NUMBER, C_REF_AGG_INFO, LF_CASE_REFERENCES_J, LF_CASE_REFERENCES_NOTES_J, C_PQC, C_PATIENT_LINK, C_RAVE_ID, C_RAVE_FLAG',null,null,null,null,TO_CLOB(q'{SELECT  
 VCM.case_id,
   LISTAGG(
    REPLACE(REPLACE(
        COALESCE(vlrt.type_desc, '') || 
        CASE WHEN vlrt.type_desc IS NOT NULL THEN ':' ELSE '' END ||
        COALESCE(ref_no, '') || 
        CASE WHEN ref_no IS NOT NULL THEN ':' ELSE '' END ||
        COALESCE(notes, ''), 
    CHR(10), ' '), CHR(13), ' ') 
) WITHIN GROUP (ORDER BY VCR.case_id, VCR.SEQ_NUM) AS LF_CASE_REFERENCES_NOTES,

LISTAGG(
    REPLACE(REPLACE(
        COALESCE(vlrt.type_desc, '') || 
        CASE WHEN vlrt.t}') || TO_CLOB(q'{ype_desc IS NOT NULL THEN ':' ELSE '' END ||
        COALESCE(ref_no, ''), 
    CHR(10), ' '), CHR(13), ' ') 
) WITHIN GROUP (ORDER BY VCR.case_id, VCR.SEQ_NUM) AS LF_CASE_REFERENCES,

MAX(CASE 
    WHEN UPPER(vlrt.type_desc) = 'E2B AUTHORITY NUMBER' THEN ref_no
END) AS C_AUTHORITY_NUMBER,

MAX(CASE 
    WHEN UPPER(vlrt.type_desc) = 'E2B COMPANY NUMBER' THEN ref_no
END) AS C_COMPANY_NUMBER,

LISTAGG(
    REPLACE(REPLACE(
        CASE 
            WHEN UPPER(vlrt.type_desc) IN ('HUB/SP AE REPORT }') || TO_CLOB(q'{ID', 'LOCAL ID', 'REGULATORY REF.') 
            THEN vlrt.type_desc || ': ' || VCR.ref_no || ', Notes: ' || VCR.notes 
        END, 
    CHR(10), ' '), CHR(13), ' ') 
) WITHIN GROUP (ORDER BY VCR.case_id, VCR.SEQ_NUM) AS aggregated_reference_info,

LISTAGG(
    REPLACE(REPLACE(
        COALESCE(vlrt.type_desc_j, '') || 
        CASE WHEN vlrt.type_desc_j IS NOT NULL THEN ':' ELSE '' END ||
        COALESCE(ref_no, ''), 
    CHR(10), ' '), CHR(13), ' ') 
) WITHIN GROUP (ORDER BY VCR.case_id, VCR}') || TO_CLOB(q'{.SEQ_NUM) AS LF_CASE_REFERENCES_J,

LISTAGG(
    REPLACE(REPLACE(
        COALESCE(vlrt.type_desc_j, '') || 
        CASE WHEN vlrt.type_desc_j IS NOT NULL THEN ':' ELSE '' END ||
        COALESCE(ref_no, '') || 
        CASE WHEN ref_no IS NOT NULL THEN ':' ELSE '' END ||
        COALESCE(notes_j, ''), 
    CHR(10), ' '), CHR(13), ' ') 
) WITHIN GROUP (ORDER BY VCR.case_id, VCR.SEQ_NUM) AS LF_CASE_REFERENCES_NOTES_J,

REPLACE(
    REPLACE(
        REPLACE(
            LISTAGG(
                C}') || TO_CLOB(q'{ASE 
                    WHEN UPPER(vlrt.type_desc) = 'PRODUCT COMPLAINT NUMBER' THEN ref_no
                END) 
            WITHIN GROUP (ORDER BY VCR.case_id, VCR.SEQ_NUM), 
        CHR(10), ' '),   
    CHR(13), ' '),      
', ,', ',')             
AS C_PQC,
REPLACE(
    REPLACE(
        REPLACE(
            LISTAGG(
                CASE 
                    WHEN UPPER(vlrt.type_desc) = 'RAVE CASE ID' THEN ref_no
                END, ', ') 
            WITHIN GROUP (ORDER BY VCR.case_id, VC}') || TO_CLOB(q'{R.SEQ_NUM), 
        CHR(10), ' '),   
    CHR(13), ' '),      
', ,', ',')             
AS C_RAVE_ID,

MAX(CASE 
    WHEN EXISTS (
        SELECT 1
        FROM ARGUS.V_CASE_REFERENCE VCR2, ARGUS.V_LM_REF_TYPES vlrt2 
        WHERE VCR2.REF_TYPE_ID = vlrt2.REF_TYPE_ID 
        AND VCR2.case_id = VCR.case_id
        AND UPPER(vlrt.type_desc) = 'RAVE CASE ID'
        AND VCR2.DELETED IS NULL
        AND VLRT2.DELETED IS NULL
    ) THEN 1
    ELSE 0
END) AS C_RAVE_FLAG
FROM 
    (SELECT * FROM ARG}') || TO_CLOB(q'{US.V_CASE_REFERENCE WHERE deleted IS NULL) VCR, 
    (SELECT * FROM ARGUS.LM_REF_TYPES WHERE deleted IS NULL) vlrt, 
    ARGUS.CASE_MASTER VCM
WHERE 
    VCM.CASE_ID = VCR.CASE_ID(+) AND
    VCR.REF_TYPE_ID = vlrt.REF_TYPE_ID(+) AND 
    VCM.DELETED IS NULL 
    AND VCM.CASE_ID <> -1 
GROUP BY 
    VCM.case_id}'),'SELECT

    CASE_ID,
    TO_CHAR(REPLACE(LF_CASE_REFERENCES_NOTES, CHR(10), '''')),
    TO_CHAR(REPLACE(LF_CASE_REFERENCES, CHR(10), '''')),
    C_AUTHORITY_NUMBER,
    C_COMPANY_NUMBER,
    TO_CHAR(REPLACE(C_REF_AGG_INFO, CHR(10), '''')),
    TO_CHAR(REPLACE(LF_CASE_REFERENCES_J, CHR(10), '''')),
    TO_CHAR(REPLACE(LF_CASE_REFERENCES_NOTES_J, CHR(10), '''')),
 REPLACE(C_PQC,CHR(10), ''''),
REPLACE(C_RAVE_ID,CHR(10), ''''),
    C_RAVE_FLAG
FROM 
    &MARTUSERNAME..DM_CASE_DATA ');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_NULL_FLAVOR','DM_CASE_NULL_FLAVOR','C_COLUMN_NAME, C_FIELD_LABEL, C_TABLE_NAME, C_NULL_FLAVOR_VALUE, C_COLUMN_NAME_J, C_FIELD_LABEL_J, C_TABLE_NAME_J',null,null,null,null,TO_CLOB(q'{SELECT
    vcm.case_id,
    vcnf.seq_num,
    vcf.column_name   c_column_name,
    vcf.field_label   c_field_label,
    vcf.table_name    c_table_name,
    dlnf.null_flavor  c_null_flavor_value,
    vcf.field_label_j c_field_label
FROM
    argus.v_case_master vcm
    LEFT JOIN (
        SELECT
            case_id,
            field_id,
            seq_num,
            null_flavor_code,
            enterprise_id,
            int_seq_num,
            ROW_NUMBER()
            OVER(PARTITION BY case}') || TO_CLOB(q'{_id, field_id, seq_num
                 ORDER BY
                     int_seq_num
            ) rownum_1
        FROM
            argus.v_case_null_flavor
        WHERE
            deleted IS NULL
    )                                  vcnf ON vcm.case_id = vcnf.case_id
    LEFT JOIN (
        SELECT
            *
        FROM
            argus.v_cmn_fields vcf
        WHERE
            vcf.deleted IS NULL
    )                                  vcf ON vcnf.field_id = vcf.field_id
    LEFT JOIN d}') || TO_CLOB(q'{m_etl_owner_dev.dm_lm_null_flavor dlnf ON vcnf.null_flavor_code = dlnf.code
WHERE
    rownum_1 = 1}'),'SELECT
    case_id,
    seq_num,
    c_column_name,
    c_field_label,
    c_table_name,
    c_null_flavor_value,
    c_field_label_j
FROM
    &MARTUSERNAME..dm_case_null_flavor
WHERE
    seq_num > 0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_ROUTING','DM_CASE_ROUTING','C_CASE_STATUS, C_COMMENT_TXT, C_COMMENT_TXT_J, C_CASE_STATUS_J',null,null,null,null,TO_CLOB(q'{SELECT
VCR.CASE_ID,
VCR.SEQ_NUM,
    CASE
        WHEN CASE_STATUS = 1 THEN 'OPEN'
        WHEN CASE_STATUS = 2 THEN 'LOCKED'
        WHEN CASE_STATUS = 3 THEN 'CLOSED'
    END AS CASE_STATUS,
   (SELECT 
        CASE
            WHEN  VCRC.SPLIT_COMMENT_TXT IS NOT NULL THEN 
                SUBSTR(VCRC.SPLIT_COMMENT_TXT, 1, 3997) || '...'
            ELSE
                VCRC.SPLIT_COMMENT_TXT
        END 
     FROM ARGUS.V_CASE_ROUTING_CLOB_COMMENT_TXT VCRC
     WHERE VCR.CASE_ID = VCRC.CASE_I}') || TO_CLOB(q'{D
	AND VCR.SEQ_NUM=VCRC.SEQ_NUM	 
       AND VCRC.TEXT_ORDER = 1) AS COMMENT_TXT,

    (SELECT 
        CASE
            WHEN VCRC1.SPLIT_COMMENT_TXT IS NOT NULL THEN 
                SUBSTR(VCRC1.SPLIT_COMMENT_TXT, 1, 3997) || '...'
            ELSE
                VCRC1.SPLIT_COMMENT_TXT
        END                             
     FROM ARGUS.V_CASE_ROUTING_CLOB_CMT_TXT_J VCRC1
     WHERE VCR.CASE_ID = VCRC1.CASE_ID
	AND VCR.SEQ_NUM=VCRC1.SEQ_NUM	 
       AND VCRC1.TEXT_ORDER = 1) AS COMMENT_}') || TO_CLOB(q'{TXT_J,

    CASE
        WHEN CASE_STATUS = 1 THEN '開ける'
        WHEN CASE_STATUS = 2 THEN 'ロックされた'
        WHEN CASE_STATUS = 3 THEN '閉まっている'
    END AS CASE_STATUS_J
FROM
    ARGUS.V_CASE_ROUTING VCR
	WHERE DELETED IS NULL}'),'SELECT 
CASE_ID,
SEQ_NUM,
UPPER(C_CASE_STATUS),
C_COMMENT_TXT,
C_COMMENT_TXT_J,
UPPER(C_CASE_STATUS_J)
FROM &MARTUSERNAME..DM_CASE_ROUTING
WHERE SEQ_NUM>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PARENT_INFO','DM_CASE_DATA','C_PAR_AGE_YEARS, PAR_DATE_OF_LMP_PARTIAL, PAR_DOB_PARTIAL, PAR_INITIALS, PAR_FIRST_NAME, PAR_MIDDLE_NAME, PAR_LAST_NAME, C_PAR_MED_HIST_TEXT, C_PAR_BREASTFEEDING, C_PAR_MED_HIST_TEXT_J',null,null,null,null,TO_CLOB(q'{SELECT 
VCM.CASE_ID,
CASE
        WHEN vcpi.AGE IS NOT NULL THEN
            EXTRACT(YEAR FROM SYSDATE) - vcpi.AGE
            END AS PARENT_BIRTH_YEAR,
CASE
        WHEN vcpi.DATE_OF_LMP IS NOT NULL THEN vcpi.DATE_OF_LMP
        ELSE (
            SELECT
            TO_DATE(vcldd.display_value, 'DD-MM-YYYY')
            FROM argus.V_code_list_detail_discrete vcldd, ARGUS.v_case_null_flavor vcnf
            WHERE vcnf.null_flavor_code = vcldd.code
            AND vcnf.case_id = vcpi.case_id
    }') || TO_CLOB(q'{          AND vcnf.field_id = 28940003
              AND vcnf.deleted IS NULL
              AND vcldd.code_list_id = 'NULL_FLAVOR'
              AND vcldd.decode_context = 'en'
            GROUP BY vcldd.display_value
        )
    END AS DATE_OF_LMP,
CASE 
        WHEN LENGTH(vcpi.DATE_OF_LMP_PARTIAL) = 5 THEN 
            CONCAT('??-???-', vcpi.DATE_OF_LMP_PARTIAL)
        WHEN LENGTH(vcpi.DATE_OF_LMP_PARTIAL) = 7 THEN 
            CONCAT('??-', vcpi.DATE_OF_LMP_PARTIAL)
        ELSE vcpi.DATE}') || TO_CLOB(q'{_OF_LMP_PARTIAL
    END AS DATE_OF_LMP_PARTIAL,
CASE
        WHEN vcpi.DOB IS NOT NULL THEN vcpi.DOB
        ELSE (
            SELECT
            TO_DATE(vcldd.display_value, 'DD-MM-YYYY')
            FROM argus.V_code_list_detail_discrete vcldd, ARGUS.v_case_null_flavor vcnf
            WHERE vcnf.null_flavor_code = vcldd.code
                        AND vcnf.case_id = vcpi.case_id
              AND vcnf.field_id = 28940007
              AND vcnf.deleted IS NULL
              AND vcldd.code_li}') || TO_CLOB(q'{st_id = 'NULL_FLAVOR'
              AND vcldd.decode_context = 'en'
            GROUP BY vcldd.display_value
        )
    END AS DOB, CASE 
        WHEN LENGTH(vcpi.DOB_PARTIAL) = 5 THEN 
            CONCAT('??-???-', vcpi.DOB_PARTIAL)
        WHEN LENGTH(vcpi.DOB_PARTIAL) = 7 THEN 
            CONCAT('??-', vcpi.DOB_PARTIAL)
        ELSE vcpi.DOB_PARTIAL
    END AS DOB_PARTIAL,
CASE
        WHEN vcpi.INITIALS IS NOT NULL THEN vcpi.INITIALS
        ELSE (
            SELECT
            vcldd.di}') || TO_CLOB(q'{splay_value
            FROM argus.V_code_list_detail_discrete vcldd, ARGUS.v_case_null_flavor vcnf
            WHERE vcnf.null_flavor_code = vcldd.code
                        AND vcnf.case_id = vcpi.case_id
              AND vcnf.field_id = 28950010
              AND vcnf.deleted IS NULL
              AND vcldd.code_list_id = 'NULL_FLAVOR'
              AND vcldd.decode_context = 'en'
            GROUP BY vcldd.display_value
        )
    END AS INITIALS,
CASE
        WHEN vcpi.FIRST_NAME IS N}') || TO_CLOB(q'{OT NULL THEN vcpi.FIRST_NAME
        ELSE (
            SELECT
            vcldd.display_value
            FROM argus.V_code_list_detail_discrete vcldd, ARGUS.v_case_null_flavor vcnf
            WHERE vcnf.null_flavor_code = vcldd.code
                        AND vcnf.case_id = vcpi.case_id
              AND vcnf.field_id = 28950021
              AND vcnf.deleted IS NULL
              AND vcldd.code_list_id = 'NULL_FLAVOR'
              AND vcldd.decode_context = 'en'
            GROUP BY vcldd.}') || TO_CLOB(q'{display_value
        )
    END AS FIRST_NAME,
CASE
        WHEN vcpi.MIDDLE_NAME IS NOT NULL THEN vcpi.MIDDLE_NAME
        ELSE (
            SELECT
            vcldd.display_value
            FROM argus.V_code_list_detail_discrete vcldd, ARGUS.v_case_null_flavor vcnf
            WHERE vcnf.null_flavor_code = vcldd.code
                        AND vcnf.case_id = vcpi.case_id
              AND vcnf.field_id = 28950022
              AND vcnf.deleted IS NULL
              AND vcldd.code_list_id = }') || TO_CLOB(q'{'NULL_FLAVOR'
              AND vcldd.decode_context = 'en'
            GROUP BY vcldd.display_value
        )
    END AS MIDDLE_NAME, CASE
        WHEN vcpi.LAST_NAME IS NOT NULL THEN vcpi.LAST_NAME
        ELSE (
            SELECT
            vcldd.display_value
            FROM argus.V_code_list_detail_discrete vcldd, ARGUS.v_case_null_flavor vcnf
            WHERE vcnf.null_flavor_code = vcldd.code
                        AND vcnf.case_id = vcpi.case_id
              AND vcnf.field_id = 289}') || TO_CLOB(q'{50023
              AND vcnf.deleted IS NULL
              AND vcldd.code_list_id = 'NULL_FLAVOR'
              AND vcldd.decode_context = 'en'
            GROUP BY vcldd.display_value
        )
    END AS LAST_NAME,

	(SELECT 
        CASE
            WHEN LENGTH(CPIN.SPLIT_MED_HIST_TEXT) > 3997 THEN
                SUBSTR(CPIN.SPLIT_MED_HIST_TEXT, 1, 3997) || '…'
            ELSE
                CPIN.SPLIT_MED_HIST_TEXT
        END 
     FROM ARGUS.V_CASE_PAR_INF_CLOB_MEDHIST_TX CPIN
     WHER}') || TO_CLOB(q'{E VCPI.CASE_ID = CPIN.CASE_ID 
       AND CPIN.TEXT_ORDER = 1) AS MED_HIST_TEXT,

CASE 
        WHEN vcpi.BREASTFEEDING = 1 THEN 'YES'
        ELSE ''
    END AS BREASTFEEDING,
(SELECT 
        CASE
            WHEN LENGTH(CPINJ.SPLIT_MED_HIST_TEXT) > 3997 THEN
                SUBSTR(CPINJ.SPLIT_MED_HIST_TEXT, 1, 3997) || '…'
            ELSE
                CPINJ.SPLIT_MED_HIST_TEXT
        END 
     FROM ARGUS.V_CASE_PAR_INF_CLOB_MEDHIST_TX_J CPINJ
     WHERE VCPI.CASE_ID = CPINJ.CASE_ID 
    }') || TO_CLOB(q'{   AND CPINJ.TEXT_ORDER = 1) AS MED_HIST_TEXT_J
FROM (SELECT * FROM ARGUS.V_CASE_PARENT_INFO WHERE DELETED IS NULL) VCPI, ARGUS.V_CASE_MASTER VCM
WHERE VCM.CASE_ID=VCPI.CASE_ID(+)
AND VCM.DELETED IS NULL
AND VCM.CASE_ID<>-1}'),'SELECT 
    CASE_ID,
    C_PAR_AGE_YEARS,
    PAR_DATE_OF_LMP,
    PAR_DATE_OF_LMP_PARTIAL,
    PAR_DOB,
    PAR_DOB_PARTIAL,
    PAR_INITIALS,
    PAR_FIRST_NAME,
    PAR_MIDDLE_NAME,
    PAR_LAST_NAME,
    C_PAR_MED_HIST_TEXT,
    UPPER(C_PAR_BREASTFEEDING),
    C_PAR_MED_HIST_TEXT_J
FROM 
    &MARTUSERNAME..DM_CASE_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_FOLLOWUP','DM_CASE_INIT_FOLLOWUP','C_INIT_FOLLOWUP, C_FOLLOWUP_NUM, C_SIGNIFICANT, C_JUSTIFICATION, C_JUSTIFICATION_J',null,null,null,null,TO_CLOB(q'{(SELECT
    CM.CASE_ID,
    CF.SEQ_NUM,
    CASE
        WHEN CF.CASE_ID is not null
        THEN 'FOLLOWUP'
    END AS C_INIT_FOLLOWUP,
    CASE WHEN (SELECT COUNT(1) 
              FROM ARGUS.V_CASE_FOLLOWUP 
              WHERE ARGUS.V_CASE_FOLLOWUP.DELETED IS NULL 
              AND ARGUS.V_CASE_FOLLOWUP.CASE_ID = CM.CASE_ID) = 0 
        THEN 'YES'
    ELSE 
    (SELECT DECODE(CF.SIGNIFICANT, 1, 'YES', 0, 'NO') 
             FROM ARGUS.V_CASE_FOLLOWUP 
             WHERE ARGUS.V_CASE_FOLLOW}') || TO_CLOB(q'{UP.DELETED IS NULL 
             AND ARGUS.V_CASE_FOLLOWUP.CASE_ID = CM.CASE_ID 
             AND ARGUS.V_CASE_FOLLOWUP.SEQ_NUM = CF.SEQ_NUM)
    END AS SIGNIFICANT,
    (SELECT CASE
        WHEN LENGTH(SPLIT_JUSTIFICATION) > 3997 THEN
            SUBSTR(SPLIT_JUSTIFICATION, 1, 3997) || '…'
        ELSE
            SPLIT_JUSTIFICATION
    END 
    FROM ARGUS.V_CASE_FUP_CLOB_JUSTIFICATION
    WHERE ARGUS.V_CASE_FUP_CLOB_JUSTIFICATION.CASE_ID = CM.CASE_ID
    AND ARGUS.V_CASE_FUP_CLOB_JUSTIFICATIO}') || TO_CLOB(q'{N.SEQ_NUM = CF.SEQ_NUM
    AND TEXT_ORDER = 1) AS JUSTIFICATION,
    (SELECT CASE
        WHEN LENGTH(SPLIT_JUSTIFICATION) > 3997 THEN
            SUBSTR(SPLIT_JUSTIFICATION, 1, 3997) || '…'
        ELSE
            SPLIT_JUSTIFICATION
    END 
    FROM ARGUS.V_CASE_FUP_CLOB_JUSTIFICATION_J
    WHERE ARGUS.V_CASE_FUP_CLOB_JUSTIFICATION_J.CASE_ID = CM.CASE_ID
    AND ARGUS.V_CASE_FUP_CLOB_JUSTIFICATION_J.SEQ_NUM = CF.SEQ_NUM
    AND TEXT_ORDER = 1) AS JUSTIFICATION_J
FROM 
    (SELECT * FROM ARGU}') || TO_CLOB(q'{S.V_CASE_FOLLOWUP WHERE DELETED IS NULL and seq_num >0) CF,
    ARGUS.V_CASE_MASTER CM
WHERE 
    CM.CASE_ID = CF.CASE_ID
    AND CM.CASE_ID <> -1
    union all
    SELECT
    CM.CASE_ID,
    CF.SEQ_NUM,
    CASE
        WHEN CM.CASE_ID is not null
        THEN 'INITIAL'
    END AS C_INIT_FOLLOWUP,
    CASE WHEN CM.CASE_ID>0 
        THEN 'YES'
    ELSE 
    (SELECT DECODE(CF.SIGNIFICANT, 1, 'YES', 0, 'NO') 
             FROM ARGUS.V_CASE_FOLLOWUP 
             WHERE ARGUS.V_CASE_FOLLOWUP.DELETE}') || TO_CLOB(q'{D IS NULL 
             AND ARGUS.V_CASE_FOLLOWUP.CASE_ID = CM.CASE_ID 
             AND ARGUS.V_CASE_FOLLOWUP.SEQ_NUM = CF.SEQ_NUM)
    END AS SIGNIFICANT,
    (SELECT CASE
        WHEN LENGTH(SPLIT_JUSTIFICATION) > 3997 THEN
            SUBSTR(SPLIT_JUSTIFICATION, 1, 3997) || '…'
        ELSE
            SPLIT_JUSTIFICATION
    END 
    FROM ARGUS.V_CASE_FUP_CLOB_JUSTIFICATION
    WHERE ARGUS.V_CASE_FUP_CLOB_JUSTIFICATION.CASE_ID = CM.CASE_ID
    AND ARGUS.V_CASE_FUP_CLOB_JUSTIFICATION.SEQ_NUM}') || TO_CLOB(q'{ = CF.SEQ_NUM
    AND TEXT_ORDER = 1) AS JUSTIFICATION,
    (SELECT CASE
        WHEN LENGTH(SPLIT_JUSTIFICATION) > 3997 THEN
            SUBSTR(SPLIT_JUSTIFICATION, 1, 3997) || '…'
        ELSE
            SPLIT_JUSTIFICATION
    END 
    FROM ARGUS.V_CASE_FUP_CLOB_JUSTIFICATION_J
    WHERE ARGUS.V_CASE_FUP_CLOB_JUSTIFICATION_J.CASE_ID = CM.CASE_ID
    AND ARGUS.V_CASE_FUP_CLOB_JUSTIFICATION_J.SEQ_NUM = CF.SEQ_NUM
    AND TEXT_ORDER = 1) AS JUSTIFICATION_J
FROM 
    (SELECT * FROM ARGUS.V_CASE_}') || TO_CLOB(q'{FOLLOWUP WHERE DELETED IS NULL and seq_num is null) CF,
    ARGUS.V_CASE_MASTER CM
WHERE 
    CM.CASE_ID = CF.CASE_ID(+)
    AND CM.CASE_ID <> -1
)}'),'SELECT
CASE_ID,
SEQ_NUM,
UPPER(C_INIT_FOLLOWUP),
UPPER(C_SIGNIFICANT),
C_JUSTIFICATION,
C_JUSTIFICATION_J
FROM &MARTUSERNAME..DM_CASE_INIT_FOLLOWUP');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_EVENT_ASSESS','DM_CASE_EVENT','CASE_ID, SEQ_NUM, LF_CANADA_LISTEDNESS, LF_IB_LISTEDNESS, LF_JPPI_LISTEDNESS, LF_CORE_LISTEDNESS, LF_USPI_LISTEDNESS, 
  LF_SMPC_LISTEDNESS, LF_CHINA_LISTEDNESS, C_CAUSALITY_EVENT_PROD, LF_DET_CAU_PROD_EVE_COMB,C_DET_CAU_RELATEDNESS, 
  LF_DET_LIST_PROD_EVE_COMB, LF_REPT_CAU_PROD_EVE_COMB, C_REPT_CAU_RELATEDNESS, C_UNLISTED_IB, C_UNLISTED_CORE, C_UNLISTED_USPI, 
  C_UNLISTED_CANADA, C_UNLISTED_CHINA, C_UNLISTED_JPPI, C_UNLISTED_SMPC, C_SUSAR_IB, C_SUSAR_CORE, C_SUSAR_USPI, C_SUSAR_CANADA, 
  C_SUSAR_CHINA, C_SUSAR_JPPI, C_SUSAR_SMPC ',null,null,null,null,TO_CLOB(q'{SELECT 
    ce.case_id,
    ce.seq_num,
    pe.lf_canada_listedness,
    pe.lf_ib_listedness,
    pe.lf_jppi_listedness,
    pe.lf_core_listedness,
    pe.lf_uspi_listedness,
    pe.lf_smpc_listedness,
    pe.lf_china_listedness,
    pe.c_causality_event_prod,
    ldc.lf_det_cau_prod_eve_comb,
    ldc.c_det_cau_relatedness AS C_DET_CAU_RELATEDNESS,
    ldl.lf_det_list_prod_eve_comb,
    lrc.lf_rept_cau_prod_eve_comb,
    lrc.c_rept_cau_relatedness AS C_REPT_CAU_RELATEDNESS,
    pe.c_unlisted_ib,}') || TO_CLOB(q'{
    pe.c_unlisted_core,
    pe.c_unlisted_uspi,
    pe.c_unlisted_canada,
    pe.c_unlisted_china,
    pe.c_unlisted_jppi,
    pe.c_unlisted_smpc,
    CASE WHEN UPPER(pe.c_unlisted_ib)='YES' AND ce.seriousness=1
           THEN
              'Yes'
           ELSE
              NULL
    END AS C_SUSAR_IB,
    CASE WHEN UPPER(pe.c_unlisted_core)='YES' AND ce.seriousness=1
           THEN
              'Yes'
           ELSE
              NULL
    END AS C_SUSAR_CORE,
     CASE WHEN UPPER(pe.c_unli}') || TO_CLOB(q'{sted_uspi)='YES' AND ce.seriousness=1
           THEN
              'Yes'
           ELSE
              NULL
    END AS C_SUSAR_USPI,
     CASE WHEN UPPER(pe.c_unlisted_canada)='YES' AND ce.seriousness=1
           THEN
              'Yes'
           ELSE
              NULL
    END AS C_SUSAR_CANADA,
     CASE WHEN UPPER(pe.c_unlisted_china)='YES' AND ce.seriousness=1
           THEN
              'Yes'
           ELSE
              NULL
    END AS C_SUSAR_CHINA,
     CASE WHEN UPPER(pe.c_unlist}') || TO_CLOB(q'{ed_jppi)='YES' AND ce.seriousness=1
           THEN
              'Yes'
           ELSE
              NULL
    END AS C_SUSAR_JPPI,
     CASE WHEN UPPER(pe.c_unlisted_smpc)='YES' AND ce.seriousness=1
           THEN
              'Yes'
           ELSE
              NULL
    END AS C_SUSAR_SMPC
FROM   argus.V_case_master cm,
       argus.v_case_event  ce,
       (SELECT cpe.case_id,
         cpe.event_seq_num,
		 TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN cpe.c_listedness_canada IS NOT N}') || TO_CLOB(q'{ULL THEN calc_pro.product_name || ': ' ||cpe.c_listedness_canada|| chr(10) END).EXTRACT('//text()')ORDER BY calc_pro.sort_order,cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(10))) AS LF_CANADA_LISTEDNESS,
		 TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN cpe.c_listedness_ib IS NOT NULL THEN calc_pro.product_name || ': ' ||cpe.c_listedness_ib || chr(10) END).EXTRACT('//text()')ORDER BY calc_pro.sort_order,cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(10))) AS LF_I}') || TO_CLOB(q'{B_LISTEDNESS,
		 TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN cpe.c_listedness_jppi IS NOT NULL THEN calc_pro.product_name || ': ' ||cpe.c_listedness_jppi || chr(10) END).EXTRACT('//text()')ORDER BY calc_pro.sort_order,cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(10))) AS LF_JPPI_LISTEDNESS,
		 TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN cpe.c_listedness_core IS NOT NULL THEN calc_pro.product_name || ': ' ||cpe.c_listedness_core || chr(10) END).EXTRACT('//text()')OR}') || TO_CLOB(q'{DER BY calc_pro.sort_order,cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(10))) AS LF_CORE_LISTEDNESS,
         TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN cpe.c_listedness_uspi IS NOT NULL THEN calc_pro.product_name || ': ' ||cpe.c_listedness_uspi || chr(10) END).EXTRACT('//text()')ORDER BY calc_pro.sort_order,cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(10))) AS LF_USPI_LISTEDNESS,
		 TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN cpe.c_listedness_smpc }') || TO_CLOB(q'{IS NOT NULL THEN calc_pro.product_name || ': ' ||cpe.c_listedness_smpc || chr(10) END).EXTRACT('//text()')ORDER BY calc_pro.sort_order,cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(10))) AS LF_SMPC_LISTEDNESS,
		 TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN cpe.c_listedness_china IS NOT NULL THEN calc_pro.product_name || ': ' ||cpe.c_listedness_china || chr(10) END).EXTRACT('//text()')ORDER BY calc_pro.sort_order,cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(10}') || TO_CLOB(q'{))) AS LF_CHINA_LISTEDNESS,
		 CASE WHEN TO_CHAR(UPPER(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,UPPER(cpe.c_listedness_ib) || chr(10)).EXTRACT('//text()')ORDER BY cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(10)))) LIKE '%UNLISTED%'
		         THEN 'Yes'
			  ELSE 
			     null END AS C_UNLISTED_IB,
		 CASE WHEN TO_CHAR(UPPER(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,UPPER(cpe.c_listedness_core) || chr(10)).EXTRACT('//text()')ORDER BY cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(1}') || TO_CLOB(q'{0)))) LIKE '%UNLISTED%'
		         THEN 'Yes'
			  ELSE 
			     null END AS C_UNLISTED_CORE,
		 CASE WHEN TO_CHAR(UPPER(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,UPPER(cpe.c_listedness_uspi) || chr(10)).EXTRACT('//text()')ORDER BY cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(10)))) LIKE '%UNLISTED%'
		         THEN 'Yes'
			  ELSE 
			     null END AS C_UNLISTED_USPI,
		 CASE WHEN TO_CHAR(UPPER(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,UPPER(cpe.c_listedness_canada) || chr(10)).EXTRACT('//text()}') || TO_CLOB(q'{')ORDER BY cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(10)))) LIKE '%UNLISTED%'
		         THEN 'Yes'
			  ELSE 
			     null END AS C_UNLISTED_CANADA,
		 CASE WHEN TO_CHAR(UPPER(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,UPPER(cpe.c_listedness_china) || chr(10)).EXTRACT('//text()')ORDER BY cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(10)))) LIKE '%UNLISTED%'
		         THEN 'Yes'
			  ELSE 
			     null END AS C_UNLISTED_CHINA,
         CASE WHEN TO_CHAR(UPPER(RTRIM(XMLCAS}') || TO_CLOB(q'{T(XMLAGG(XMLELEMENT(e,UPPER(cpe.c_listedness_jppi) || chr(10)).EXTRACT('//text()')ORDER BY cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(10)))) LIKE '%UNLISTED%'
		         THEN 'Yes'
			  ELSE 
			     null END AS C_UNLISTED_JPPI,
		 CASE WHEN TO_CHAR(UPPER(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,UPPER(cpe.c_listedness_smpc) || chr(10)).EXTRACT('//text()')ORDER BY cpe.CASE_ID,cpe.EVENT_SEQ_NUM,cpe.PROD_SEQ_NUM)AS CLOB),chr(10)))) LIKE '%UNLISTED%'
		         THEN 'Yes'
			  ELSE 
			   }') || TO_CLOB(q'{  null END AS C_UNLISTED_SMPC,
		 CASE WHEN MAX(CPE.C_CAUSALITY_EVENT_PRODUCT)=0 
		        THEN 'Not Related'
			  ELSE
			     'Related' END AS C_CAUSALITY_EVENT_PROD
        FROM  &MARTUSERNAME..DM_CASE_PROD_EVT_DETAIL CPE,(select cpe.case_id,cpe.event_seq_num,cpe.prod_seq_num,cpe.seq_num,cp.product_name,(rank() over (partition by cpe.case_id,cpe.event_seq_num order by cpe.case_id, cp.sort_id) )as sort_order
              FROM &MARTUSERNAME..DM_CASE_PROD_EVT_DETAIL CPE,ARGUS.V_CASE_PROD}') || TO_CLOB(q'{UCT CP WHERE cpe.case_id=cp.case_id AND cpe.prod_seq_num=cp.seq_num and cp.deleted IS NULL)calc_pro                    
        WHERE cpe.case_id=calc_pro.case_id
          AND cpe.prod_seq_num=calc_pro.prod_seq_num
		  AND cpe.event_seq_num=calc_pro.event_seq_num
        GROUP BY cpe.case_id,cpe.event_seq_num
       )            pe,
       (SELECT     calc_sort_det.case_id,calc_sort_det.event_seq_num,
	        TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN calc_sort_det.c_listedness_all_da}') || TO_CLOB(q'{tasheet IS NOT NULL THEN calc_sort_det.sort_order || ') ' ||calc_sort_det.C_LISTEDNESS_ALL_DATASHEET|| chr(10) END).EXTRACT('//text()')ORDER BY CALC_SORT_DET.SORT_ORDER,CALC_SORT_DET.CASE_ID,CALC_SORT_DET.EVENT_SEQ_NUM)AS CLOB),chr(10))) AS LF_DET_LIST_PROD_EVE_COMB
            FROM (SELECT CEPD.CASE_ID,CEPD.EVENT_SEQ_NUM,CEPD.PROD_SEQ_NUM,CEPD.C_LISTEDNESS_ALL_DATASHEET , (RANK() OVER (PARTITION BY  CEPD.CASE_ID,CEPD.EVENT_SEQ_NUM ORDER BY  CEPD.CASE_ID,CP.SORT_ID)) as sort_order
              }') || TO_CLOB(q'{   FROM &MARTUSERNAME..DM_CASE_PROD_EVT_DETAIL CEPD,&MARTUSERNAME..DM_CASE_PRODUCT CP WHERE  CEPD.CASE_ID=CP.CASE_ID AND CEPD.PROD_SEQ_NUM=CP.SEQ_NUM) calc_sort_det
             GROUP BY CALC_SORT_DET.case_id,CALC_SORT_DET.event_seq_num) ldl,
       (
       SELECT    calc_sort_rpt_caus.case_id,calc_sort_rpt_caus.event_seq_num,
	        TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN calc_sort_rpt_caus.c_causality_rept IS NOT NULL THEN calc_sort_rpt_caus.sort_order || ') ' ||calc_sort_}') || TO_CLOB(q'{rpt_caus.C_CAUSALITY_REPT || chr(10) END).EXTRACT('//text()')ORDER BY calc_sort_rpt_caus.sort_order,calc_sort_rpt_caus.CASE_ID,calc_sort_rpt_caus.EVENT_SEQ_NUM)AS CLOB),chr(10))) AS LF_REPT_CAU_PROD_EVE_COMB,
            CASE WHEN 	( UPPER(TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,calc_sort_rpt_caus.sort_order || ') ' ||calc_sort_rpt_caus.C_CAUSALITY_REPT || chr(10)).EXTRACT('//text()')ORDER BY calc_sort_rpt_caus.CASE_ID,calc_sort_rpt_caus.EVENT_SEQ_NUM,calc_sort_rpt_caus.sort_order)AS CLOB),chr}') || TO_CLOB(q'{(10)))) LIKE  '%NOT RELATED%'
                     OR  UPPER(TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,calc_sort_rpt_caus.sort_order || ') ' ||calc_sort_rpt_caus.C_CAUSALITY_REPT || chr(10)).EXTRACT('//text()')ORDER BY calc_sort_rpt_caus.CASE_ID,calc_sort_rpt_caus.EVENT_SEQ_NUM,calc_sort_rpt_caus.sort_order)AS CLOB),chr(10)))) LIKE  '%UNLIKELY%'
                     OR  UPPER(TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,calc_sort_rpt_caus.sort_order || ') ' ||calc_sort_rpt_caus.C_CAUSALITY_REPT || }') || TO_CLOB(q'{chr(10)).EXTRACT('//text()')ORDER BY calc_sort_rpt_caus.CASE_ID,calc_sort_rpt_caus.EVENT_SEQ_NUM,calc_sort_rpt_caus.sort_order)AS CLOB),chr(10)))) LIKE  '%UNLIKELY RELATED%'
                     OR  UPPER(TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,calc_sort_rpt_caus.sort_order || ') ' ||calc_sort_rpt_caus.C_CAUSALITY_REPT || chr(10)).EXTRACT('//text()')ORDER BY calc_sort_rpt_caus.CASE_ID,calc_sort_rpt_caus.EVENT_SEQ_NUM,calc_sort_rpt_caus.sort_order)AS CLOB),chr(10)))) LIKE  '%UNRELATED%')
      }') || TO_CLOB(q'{            THEN   
                     'Not Related'
            ELSE
                     'Related'
            END AS C_REPT_CAU_RELATEDNESS

			FROM  
                  (SELECT CED.CASE_ID,CED.PROD_SEQ_NUM,CED.EVENT_SEQ_NUM,CED.C_CAUSALITY_REPT,(RANK() OVER (PARTITION BY  CED.CASE_ID,CED.EVENT_SEQ_NUM ORDER BY CED.CASE_ID,CP.SORT_ID)) as sort_order
                  FROM &MARTUSERNAME..DM_CASE_PROD_EVT_DETAIL CED,&MARTUSERNAME..DM_CASE_PRODUCT CP WHERE  CED.CASE_ID=CP.CASE_ID AND CED.}') || TO_CLOB(q'{PROD_SEQ_NUM=CP.SEQ_NUM) calc_sort_rpt_caus

	    GROUP BY calc_sort_rpt_caus.case_id,calc_sort_rpt_caus.event_seq_num


       )         lrc,
       (
       SELECT  calc_sort_det_caus.case_id,calc_sort_det_caus.event_seq_num,
	        TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN calc_sort_det_caus.c_det_causality IS NOT NULL THEN calc_sort_det_caus.sort_order || ') ' ||calc_sort_det_caus.C_DET_CAUSALITY || chr(10) END).EXTRACT('//text()')ORDER BY calc_sort_det_caus.sort_order,calc_sort_}') || TO_CLOB(q'{det_caus.CASE_ID,calc_sort_det_caus.EVENT_SEQ_NUM)AS CLOB),chr(10))) AS LF_DET_CAU_PROD_EVE_COMB,
            CASE WHEN 	 (UPPER(TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,calc_sort_det_caus.sort_order || ') ' ||calc_sort_det_caus.C_DET_CAUSALITY || chr(10)).EXTRACT('//text()')ORDER BY calc_sort_det_caus.CASE_ID,calc_sort_det_caus.EVENT_SEQ_NUM,calc_sort_det_caus.sort_order)AS CLOB),chr(10))))  LIKE '%NOT RELATED%'
                     OR  UPPER(TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,calc_sort}') || TO_CLOB(q'{_det_caus.sort_order || ') ' ||calc_sort_det_caus.C_DET_CAUSALITY || chr(10)).EXTRACT('//text()')ORDER BY calc_sort_det_caus.CASE_ID,calc_sort_det_caus.EVENT_SEQ_NUM,calc_sort_det_caus.sort_order)AS CLOB),chr(10))))  LIKE '%UNLIKELY%'
                     OR  UPPER(TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,calc_sort_det_caus.sort_order || ') ' ||calc_sort_det_caus.C_DET_CAUSALITY|| chr(10)).EXTRACT('//text()')ORDER BY calc_sort_det_caus.CASE_ID,calc_sort_det_caus.EVENT_SEQ_NUM,calc_sort_det_caus}') || TO_CLOB(q'{.sort_order)AS CLOB),chr(10))))  LIKE '%UNLIKELY RELATED%'
                     OR  UPPER(TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,calc_sort_det_caus.sort_order || ') ' ||calc_sort_det_caus.C_DET_CAUSALITY || chr(10)).EXTRACT('//text()')ORDER BY calc_sort_det_caus.CASE_ID,calc_sort_det_caus.EVENT_SEQ_NUM,calc_sort_det_caus.sort_order)AS CLOB),chr(10))))  LIKE '%UNRELATED%')

                  THEN   
                     'Not Related'
            ELSE
                     'Related'
            }') || TO_CLOB(q'{END AS C_DET_CAU_RELATEDNESS
            FROM  (SELECT CED.CASE_ID,CED.PROD_SEQ_NUM,CED.EVENT_SEQ_NUM,CED.C_DET_CAUSALITY,(RANK() OVER (PARTITION BY  CED.CASE_ID,CED.EVENT_SEQ_NUM ORDER BY CED.CASE_ID,CP.SORT_ID)) as sort_order
                  FROM &MARTUSERNAME..DM_CASE_PROD_EVT_DETAIL CED,&MARTUSERNAME..DM_CASE_PRODUCT CP WHERE  CED.CASE_ID=CP.CASE_ID AND CED.PROD_SEQ_NUM=CP.SEQ_NUM) calc_sort_det_caus

	    GROUP BY calc_sort_det_caus.case_id,calc_sort_det_caus.event_seq_num
        )}') || TO_CLOB(q'{          ldc
WHERE  cm.case_id=ce.case_id
  AND  ce.case_id=pe.case_id(+)
  AND  ce.seq_num=pe.event_seq_num(+)
  AND  ce.case_id=ldl.case_id(+)
  AND  ce.seq_num=ldl.event_seq_num(+)
  AND  ce.case_id=ldc.case_id(+)
  AND  ce.seq_num=ldc.event_seq_num(+)
  AND  ce.case_id=lrc.case_id(+)
  AND  ce.seq_num=lrc.event_seq_num(+)
  AND  ce.deleted is null}'),TO_CLOB(q'{select CASE_ID, SEQ_NUM, to_char(LF_CANADA_LISTEDNESS), to_char(LF_IB_LISTEDNESS), to_char(LF_JPPI_LISTEDNESS), to_char(LF_CORE_LISTEDNESS), to_char(LF_USPI_LISTEDNESS), 
  to_char(LF_SMPC_LISTEDNESS), to_char(LF_CHINA_LISTEDNESS), C_CAUSALITY_EVENT_PROD, to_char(LF_DET_CAU_PROD_EVE_COMB),C_DET_CAU_RELATEDNESS, 
  to_char(LF_DET_LIST_PROD_EVE_COMB), to_char(LF_REPT_CAU_PROD_EVE_COMB), C_REPT_CAU_RELATEDNESS, C_UNLISTED_IB, C_UNLISTED_CORE, C_UNLISTED_USPI, 
  C_UNLISTED_CANADA, C_UNLISTED_CHINA,}') || TO_CLOB(q'{ C_UNLISTED_JPPI, C_UNLISTED_SMPC, C_SUSAR_IB, C_SUSAR_CORE, C_SUSAR_USPI, C_SUSAR_CANADA, 
  C_SUSAR_CHINA, C_SUSAR_JPPI, C_SUSAR_SMPC from &MARTUSERNAME..dm_case_event where seq_num>0}'));
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CMN_REG_REPORTS','DM_CASE_DATA','C_BEIGENE_SUB_DATE, CSV_EMA_REPT_SUB_DATE_CT, CSV_EMA_REPT_SUB_DATE_PM, CSV_UK_REPT_SUB_DATE_CT, CSV_UK_REPT_SUB_DATE_PM, CSV_US_REPT_SUB_DATE_CT, CSV_US_REPT_SUB_DATE_PM, CSV_CHINA_REPT_SUB_DATE_CT, CSV_CHINA_REPT_SUB_DATE_PM, CSV_EMA_REPT_DUE_DATE_CT, CSV_EMA_REPT_DUE_DATE_PM, CSV_UK_REPT_DUE_DATE_CT, CSV_UK_REPT_DUE_DATE_PM, CSV_US_REPT_DUE_DATE_CT, CSV_US_REPT_DUE_DATE_PM, CSV_CHINA_REPT_DUE_DATE_CT, CSV_CHINA_REPT_DUE_DATE_PM, C_FOLLWUP_DATE_AFTR_AWARE_DATE, CSV_SENT_DATE',null,null,null,null,TO_CLOB(q'{SELECT
    VCM.CASE_ID,
    TO_CHAR(MAX(CASE 
        WHEN LRC.AGENCY_NAME = '{SP} BeiGene' 
        THEN CASE_REPORTS.DATE_SUBMITTED
        ELSE NULL 
    END)) AS C_BEIGENE_SUB_DATE,

    LISTAGG(
        CASE 
            WHEN LRC.AGENCY_NAME = '{HA} EMA - CT' AND CASE_REPORTS.DATE_SUBMITTED IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DATE_SUBMITTED) || 
                CASE 
                    WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)'
                    ELSE}') || TO_CLOB(q'{ '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_EMA_REPT_SUB_DATE_CT,
        LISTAGG(
        CASE 
            WHEN LRC.AGENCY_NAME = '{HA} EMA - PM' AND CASE_REPORTS.DATE_SUBMITTED  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DATE_SUBMITTED) || 
                CASE 
                    WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)' 
         }') || TO_CLOB(q'{           ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_EMA_REPT_SUB_DATE_PM,
         LISTAGG(
        CASE 
            WHEN LRC.AGENCY_NAME = '{HA} United Kingdom - CT' AND CASE_REPORTS.DATE_SUBMITTED  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DATE_SUBMITTED) || 
                CASE 
                    WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
              }') || TO_CLOB(q'{      THEN '(I)'
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_UK_REPT_SUB_DATE_CT,
        LISTAGG(
        CASE 
            WHEN LRC.AGENCY_NAME = '{HA} United Kingdom - PM' AND CASE_REPORTS.DATE_SUBMITTED  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DATE_SUBMITTED) || 
                CASE 
                    WHEN CASE_REPORTS.FOLLOWUP}') || TO_CLOB(q'{_NUM = 0 
                    THEN '(I)'
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_UK_REPT_SUB_DATE_PM,
         LISTAGG(
        CASE 
            WHEN LRC.AGENCY_NAME = '{HA} United States - CT' AND CASE_REPORTS.DATE_SUBMITTED  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DATE_SUBMITTED) || 
                CASE 
                    WH}') || TO_CLOB(q'{EN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)'
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_US_REPT_SUB_DATE_CT, LISTAGG(
        CASE 
            WHEN LRC.AGENCY_NAME = '{HA} UNITED STATES - PM' AND CASE_REPORTS.DATE_SUBMITTED  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DATE_SUBMITTED) || 
                CASE 
       }') || TO_CLOB(q'{             WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)'
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_US_REPT_SUB_DATE_PM,
		 LISTAGG(
        CASE 
            WHEN LRC.AGENCY_NAME = '{HA} China - CT' AND CASE_REPORTS.DATE_SUBMITTED  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DATE_SUBMITTED) || 
                CAS}') || TO_CLOB(q'{E 
                    WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)'
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_CHINA_REPT_SUB_DATE_CT , LISTAGG(
        CASE 
            WHEN LRC.AGENCY_NAME = '{HA} China - CDR - E2B' AND CASE_REPORTS.DATE_SUBMITTED  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DATE_SUBMITTED) || 
 }') || TO_CLOB(q'{               CASE 
                    WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)'
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_CHINA_REPT_SUB_DATE_PM,
        LISTAGG(
        CASE 
            WHEN LRC.AGENCY_NAME = '{HA} EMA - CT'  AND CASE_REPORTS.DUE_DATE  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DUE_DATE,'}') || TO_CLOB(q'{DD-MON-YYYY') || 
                CASE 
                    WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)'
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID, CASE_REPORTS.DUE_DATE) AS CSV_EMA_REPT_DUE_DATE_CT,
        LISTAGG(
        CASE 
            WHEN LRC.AGENCY_NAME = '{HA} EMA - PM' AND CASE_REPORTS.DUE_DATE  IS NOT NULL
         }') || TO_CLOB(q'{   THEN TO_CHAR(CASE_REPORTS.DUE_DATE,'DD-MON-YYYY') || 
                CASE 
                    WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)' 
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_EMA_REPT_DUE_DATE_PM,
         LISTAGG(
        CASE 
            WHEN LRC.AGENCY_NAME = '{HA} United Kingdom - CT' AND CASE_REPORTS.DU}') || TO_CLOB(q'{E_DATE  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DUE_DATE,'DD-MON-YYYY') || 
                CASE 
                    WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)'
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_UK_REPT_DUE_DATE_CT,
        LISTAGG(
        CASE 
            WHEN LRC.AGENCY_NAME = '{HA} United Kingdom}') || TO_CLOB(q'{ - PM' AND CASE_REPORTS.DUE_DATE  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DUE_DATE,'DD-MON-YYYY') || 
                CASE 
                    WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)'
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_UK_REPT_DUE_DATE_PM, LISTAGG(
        CASE 
            WHEN LRC.AGENCY_NAME = '{}') || TO_CLOB(q'{HA} United States - CT' AND CASE_REPORTS.DUE_DATE  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DUE_DATE,'DD-MON-YYYY') || 
                CASE 
                    WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)'
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_US_REPT_DUE_DATE_CT,
		 LISTAGG(
        CASE 
            WHEN }') || TO_CLOB(q'{LRC.AGENCY_NAME = '{HA} UNITED STATES - PM' AND CASE_REPORTS.DUE_DATE  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DUE_DATE,'DD-MON-YYYY') || 
                CASE 
                    WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)'
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_US_REPT_DUE_DATE_PM , LISTAGG(
        CASE }') || TO_CLOB(q'{
            WHEN LRC.AGENCY_NAME = '{HA} China - CT' AND CASE_REPORTS.DUE_DATE  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DUE_DATE,'DD-MON-YYYY') || 
                CASE 
                    WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)'
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_CHINA_REPT_DUE_DATE_CT,
		 LISTAGG}') || TO_CLOB(q'{(
        CASE 
            WHEN LRC.AGENCY_NAME = '{HA} China - CDR - E2B' AND CASE_REPORTS.DUE_DATE  IS NOT NULL
            THEN TO_CHAR(CASE_REPORTS.DUE_DATE,'DD-MON-YYYY') || 
                CASE 
                    WHEN CASE_REPORTS.FOLLOWUP_NUM = 0 
                    THEN '(I)'
                    ELSE '(F/U#' || CASE_REPORTS.FOLLOWUP_NUM || ')' 
                END
            ELSE NULL
        END, ', ') 
        WITHIN GROUP (ORDER BY CASE_REPORTS.REG_REPORT_ID) AS CSV_CHINA_REPT_D}') || TO_CLOB(q'{UE_DATE_PM

FROM 

    (SELECT * FROM ARGUS.V_LM_REGULATORY_CONTACT WHERE DELETED IS NULL) LRC , ARGUS.V_CASE_MASTER VCM,
    (SELECT 
         cr.case_id,
         cr.reg_report_id,
         crr.agency_id,
         crr.date_submitted,
         crr.due_date,
         crr.license_id,
         crr.aware_method,
         crr.followup_num
     FROM argus.v_case_reg_reports cr
     JOIN argus.v_cmn_reg_reports crr ON cr.reg_report_id = crr.reg_report_id
     WHERE cr.deleted IS NULL
       AND crr.de}') || TO_CLOB(q'{leted IS NULL
    ) CASE_REPORTS 
          WHERE  
         VCM.CASE_ID=CASE_REPORTS.CASE_ID(+) 
          AND CASE_REPORTS.AGENCY_ID = LRC.AGENCY_ID(+)
          AND VCM.CASE_ID<>-1
GROUP BY 
    VCM.CASE_ID}'),TO_CLOB(q'{SELECT
CASE_ID,
TO_CHAR(C_BEIGENE_SUB_DATE),
TO_CHAR(CSV_EMA_REPT_SUB_DATE_CT),
TO_CHAR(CSV_EMA_REPT_SUB_DATE_PM),
TO_CHAR(CSV_UK_REPT_SUB_DATE_CT),
TO_CHAR(CSV_UK_REPT_SUB_DATE_PM),
TO_CHAR(CSV_US_REPT_SUB_DATE_CT),
TO_CHAR(CSV_US_REPT_SUB_DATE_PM),
TO_CHAR(CSV_CHINA_REPT_SUB_DATE_CT),
TO_CHAR(CSV_CHINA_REPT_SUB_DATE_PM),
TO_CHAR(CSV_EMA_REPT_DUE_DATE_CT),
TO_CHAR(CSV_EMA_REPT_DUE_DATE_PM),
TO_CHAR(CSV_UK_REPT_DUE_DATE_CT),
TO_CHAR(CSV_UK_REPT_DUE_DATE_PM),
TO_CHAR(CSV_US_REPT_DUE_DATE_CT),
TO_}') || TO_CLOB(q'{CHAR(CSV_US_REPT_DUE_DATE_PM),
TO_CHAR(CSV_CHINA_REPT_DUE_DATE_CT),
TO_CHAR(CSV_CHINA_REPT_DUE_DATE_PM)
from &MARTUSERNAME..DM_CASE_DATA}'));
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_EVENT_DETAIL','DM_CASE_PROD_EVT_DETAIL','C_DECHALLENGE, C_RECHALLENGE',0,0,'SUCCESSFUL',null,TO_CLOB(q'{SELECT 
    ced.CASE_ID,
    ced.SEQ_NUM,
    DECODE(DECHALLENGE, 
           0, 'Neg', 
           1, 'Pos', 
           2, 'Unk', 
           3, 'N/A', 
           NULL) AS DECHALLENGE,
    DECODE(RECHALLENGE, 
           0, 'Neg', 
           1, 'Pos', 
           2, 'Unk', 
           3, 'N/A', 
           NULL) AS RECHALLENGE
FROM 
    (select * from   ARGUS.V_CASE_EVENT_DETAIL where deleted is null) ced , 
    (select * from  ARGUS.V_CASE_EVENT_ASSESS where deleted is null and license_id =}') || TO_CLOB(q'{ 0 and datasheet_id  =0 ) cea
    WHERE  ced.case_id = cea.case_id 
        AND ced.event_seq_num = cea.event_seq_num
        AND ced.prod_seq_num = cea.prod_seq_num
        AND NVL(DECHALLENGE,RECHALLENGE) IS NOT NULL }'),'SELECT 
    CASE_ID,
    SEQ_NUM,
    C_DECHALLENGE,
    C_RECHALLENGE
    FROM &MARTUSERNAME..DM_CASE_PROD_EVT_DETAIL
    WHERE SEQ_NUM>0 AND NVL(C_DECHALLENGE,C_RECHALLENGE) IS NOT NULL');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PAT_HIST','DM_CASE_DATA','CSV_PATIENT_HISTORY, CSV_PAT_HIST_CURRENT_COND, CSV_PAT_HIST_HISTORICAL_COND',null,null,null,null,TO_CLOB(q'{SELECT
    VCM.case_id,
TRIM(RTRIM(DBMS_LOB.SUBSTR(XMLCAST(XMLAGG(XMLELEMENT(E, 
        (CASE 
            WHEN VCPH.ITEM_CODED IS NOT NULL 
            THEN VLCT.COND_TYPE || ': ' || VCPH.ITEM_CODED || '; '
        END ) )
    .EXTRACT('//text()') ORDER BY VCPH.SEQ_NUM) AS CLOB), 4000, 1),'; ')) PATIENT_HISTORY,
   REPLACE(REPLACE( LISTAGG(
        CASE 
            WHEN VCPH.CONDITION_TYPE_ID = 4 
            THEN VCPH.ITEM_CODED 
            ELSE NULL 
        END, ', ' ON OVERFLOW TRUNCATE
}') || TO_CLOB(q'{    ) 
    WITHIN GROUP (ORDER BY VCPH.SEQ_NUM), CHR(13),''),CHR(10),'') AS CURRENT_CONDITION,
    REPLACE(REPLACE( LISTAGG(
        CASE 
            WHEN VCPH.CONDITION_TYPE_ID = 1 
            THEN VCPH.ITEM_CODED 
            ELSE NULL 
        END, ', ' ON OVERFLOW TRUNCATE
    ) 
    WITHIN GROUP (ORDER BY VCPH.SEQ_NUM), CHR(13),''),CHR(10),'') AS HISTORICAL_CONDITION  

FROM (Select * from ARGUS.V_CASE_PAT_HIST where deleted is null) VCPH , ARGUS.V_CASE_MASTER VCM, (Select * from ARGUS.V_}') || TO_CLOB(q'{LM_CONDITION_TYPE where deleted is null) VLCT
Where VCM.CASE_ID=VCPH.CASE_ID(+)
AND VCPH.CONDITION_TYPE_ID = VLCT.CONDITION_TYPE_ID(+)
AND VCM.CASE_ID<>-1
GROUP BY VCM.CASE_ID}'),'SELECT 
CASE_ID,
TRIM(DBMS_LOB.SUBSTR(CSV_PATIENT_HISTORY,4000,1)) AS CSV_PATIENT_HISTORY,
REPLACE(REPLACE(TO_CHAR(SUBSTR(CSV_PAT_HIST_CURRENT_COND, 1, 4000)), CHR(13), ''''), CHR(10), '''') AS CSV_PAT_HIST_CURRENT_COND,
REPLACE(REPLACE(TO_CHAR(SUBSTR(CSV_PAT_HIST_HISTORICAL_COND, 1, 4000)), CHR(13), ''''), CHR(10), '''') AS CSV_PAT_HIST_HISTORICAL_COND
FROM &MARTUSERNAME..DM_CASE_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('ACKNOWLEDGMENT','DM_ACKNOWLEDGMENT','C_STATUS',null,null,null,null,'SELECT 
VA.ACK_ID, 
VA.MSG_ID,
(SELECT DISTINCT(esm_ae_status_name)
    FROM argus.esm_ae_status_lkup easl 
    WHERE easl.esm_status_type_cd=VA.status)AS STATUS 
FROM ARGUS.V_ACKNOWLEDGMENT VA , ARGUS.V_SAFETYREPORT B, ARGUS.V_CASE_MASTER VCM
where VA.MSG_ID=ARGUS.B.MSG_ID
AND VCM.CASE_ID = B.CASE_XREF
AND  VCM.DELETED IS NULL','SELECT ACK_ID, MSG_ID, C_STATUS 
FROM &MARTUSERNAME..DM_ACKNOWLEDGMENT');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_ROUTING','DM_CASE_DATA','C_LATEST_ROUTE_DATE,C_LATEST_ROUTE_SEQ_NUM',null,null,null,null,'SELECT
    vcm.case_id,
    MAX(route_date) c_latest_route_date,
    MAX(seq_num)    c_latest_route_seq_num
FROM
    (
        SELECT
            *
        FROM
            argus.v_case_routing
        WHERE
            deleted IS NULL
    )                   a,
    argus.v_case_master vcm
WHERE
        vcm.case_id = a.case_id (+)
    AND vcm.case_id <> - 1
GROUP BY
    vcm.case_id','SELECT
    case_id,
    c_latest_route_date,
    c_latest_route_seq_num
FROM
    &MARTUSERNAME..dm_case_data');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_DOSE_REGIMENS','DM_CASE_DATA','LF_PRIM_PRD_DOSE_DESC,LF_PRIM_PRD_DOSE_DESC_BLND,LF_PRIM_PRD_DOSE_DESC_STBLND,LF_PRIM_PRD_DOSE_DESC_BLND_J
LF_PRIM_PRD_DOSE_DESC_J,LF_PRIM_PRD_DOSE_DESC_STBD_J,LF_PRIM_PRD_DOSE_DESC_STBLND_J',null,null,null,null,TO_CLOB(q'{SELECT vcm.case_id,	   
               To_char(lf_prim_prd_dose_desc),
               To_char(lf_prim_prd_dose_desc_blnd),
               To_char(lf_prim_prd_dose_desc_stblnd),
               To_char(lf_prim_prd_dose_desc_blnd_j),
               To_Char(lf_prim_prd_dose_desc_j),
               To_Char(lf_prim_prd_dose_desc_stbd_j),
               To_Char(lf_prim_prd_dose_desc_stbd_j) lf_prim_prd_dose_desc_stblnd_j
          FROM argus.v_case_master vcm,
               (SELECT case_id,
				      }') || TO_CLOB(q'{ concate_data lf_prim_prd_dose_desc,
					   CASE
						   WHEN (case_blinded = 0 )
						   THEN NVL (concate_data,blind_name)
						   ELSE concate_data
					   END	lf_prim_prd_dose_desc_blnd,
					   CASE
					          WHEN case_blinded = 0
							  THEN
							      NVL(concate_data,blind_name)
							  WHEN case_blinded = 1
							   AND study_blinded = 0
							  THEN NVL (concate_data,blind_name)
							  WHEN case_blinded = 1
                               AND study_blinded = 1 
							}') || TO_CLOB(q'{  THEN concate_data
                              ELSE concate_data
						   END lf_prim_prd_dose_desc_stblnd,
					    CASE
						   WHEN (case_blinded = 0 )
						   THEN NVL (concate_data_j,blind_name)
						   ELSE concate_data_j
					   END	 lf_prim_prd_dose_desc_blnd_j,
					   concate_data_j lf_prim_prd_dose_desc_j,
					    CASE
					          WHEN case_blinded = 0
							  THEN
							      NVL(concate_data_j,blind_name)
							  WHEN case_blinded = 1
							   AND study_blinded = 0
			}') || TO_CLOB(q'{				  THEN NVL (concate_data_j,blind_name)
							  WHEN case_blinded = 1
                               AND study_blinded = 1 
							  THEN concate_data_j
                              ELSE concate_data_j
						   END lf_prim_prd_dose_desc_stbd_j,
					   NULL lf_prim_prd_dose_desc_stblnd_j FROM (SELECT
						 cdr_j.concate_data_j, cdr.*,
						  CASE
							  WHEN cp.co_drug_code = 'Study Drug'
							   AND cs.code_broken = 4
						       AND lst.study_type = 'Not Blinded' THEN 1
							   E}') || TO_CLOB(q'{LSE 0
						  END open_label_study,
						  CASE
							  WHEN NVL (co_drug_code, '-999') = 'Study Drug'
						       AND lst.study_type <> 'Not Blinded'
						       AND cs.code_broken = 0 THEN 0
						      WHEN NVL (co_drug_code, '-999') = 'Study Drug'
						       AND lst.study_type <> 'Not Blinded'
						       AND cs.code_broken > 0 THEN 1
						      ELSE -1
						  END case_blinded,
						  CASE
						      WHEN NVL (co_drug_code, '-999') = 'Study Drug'
							   AND lst.study_type <> 'N}') || TO_CLOB(q'{ot Blinded'
							   AND ls.unblind_ok = 0 THEN 0
							  WHEN NVL (co_drug_code, '-999') = 'Study Drug'
							   AND lst.study_type <> 'Not Blinded'
							   AND ls.unblind_ok = 1 THEN 1
						      ELSE -1
						  END study_blinded,
						  cs.blind_name
					  FROM (SELECT A.case_id,seq_num , RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,split_dose_description||CHR(10)).EXTRACT('//text()') ORDER BY text_order, seq_num , log_no) AS CLOB),CHR(10)) concate_data
                                FROM "ARGU}') || TO_CLOB(q'{S".v_case_dose_reg_clob_dose_desc A , argus.v_case_master B
                                WHERE A.CASE_ID =B.CASE_ID
                                GROUP BY A.case_id,seq_num) cdr,
                            (SELECT A.case_id,seq_num , RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,split_dose_description||CHR(10)).EXTRACT('//text()') ORDER BY text_order, seq_num , log_no) AS CLOB),CHR(10)) concate_data_j
                                FROM "ARGUS".v_case_dose_reg_clob_dose_desc_j A , argus.v_case_master}') || TO_CLOB(q'{ B
                                WHERE A.CASE_ID =B.CASE_ID
                                GROUP BY A.case_id,seq_num) cdr_j,
                      argus.v_case_master vcm1,
					       (SELECT * FROM "ARGUS".v_case_product WHERE deleted IS NULL) cp,
						  (SELECT * FROM "ARGUS".v_case_study WHERE deleted IS NULL) cs,
						  (SELECT * FROM "ARGUS".v_lm_studies WHERE deleted IS NULL) ls,
						  (SELECT * FROM "ARGUS".v_lm_study_types WHERE deleted IS NULL) lst,
						  (SELECT * FROM "ARGU}') || TO_CLOB(q'{S".v_lm_product WHERE deleted IS NULL) lp
					  WHERE cdr.case_id = cp.case_id
						AND cp.first_sus_prod = 1
                        and vcm1.case_id = cp.case_id
                        and cdr_j.case_id = cp.case_id
                        AND cp.seq_num  = cdr.seq_num
						and cp.seq_num  = cdr_j.seq_num
					    AND cp.case_id = cs.case_id(+)
					    AND cs.study_key = ls.study_key(+)
					    AND cs.study_type = lst.study_type_id(+)
					    AND GREATEST (NVL(cp.product_id,-1), NVL(cp.}') || TO_CLOB(q'{pat_exposure, -1) ) = lp.product_id(+))) vcdr			   
            WHERE vcm.case_id = vcdr.case_id(+) and vcm.case_id<>-1}'),'SELECT
             case_id,
             To_char(lf_prim_prd_dose_desc),
             To_Char(lf_prim_prd_dose_desc_blnd),
             To_char(lf_prim_prd_dose_desc_stblnd),
             To_char(lf_prim_prd_dose_desc_blnd_j),
             To_Char(lf_prim_prd_dose_desc_j),
             To_Char(lf_prim_prd_dose_desc_stbd_j),
             To_Char(lf_prim_prd_dose_desc_stblnd_j)
         FROM
             &MARTUSERNAME..dm_case_data');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PROD_DRUGS','DM_CASE_PRODUCT','C_TOTAL_DOSE, C_DECHALLENGE, C_RECHALLENGE, FIRST_DOSE_PARTIAL, LAST_DOSE_PARTIAL, C_RELATED_DEVICE',null,null,null,null,TO_CLOB(q'{SELECT 
    VCP.CASE_ID,
    VCP.SEQ_NUM,
    TRIM(LISTAGG(VCPD.TOTAL_DOSE || ' ' || VLDU.UNIT, ', ') 
            WITHIN GROUP (ORDER BY VCPD.CASE_ID)) AS total_dose_combined,
    DECODE(VCPD.DECHALLENGE, 
           0, 'Neg', 
           1, 'Pos', 
           2, 'Unk', 
           3, 'N/A', 
           NULL) AS DECHALLENGE_STATUS,
    DECODE(VCPD.RECHALLENGE, 
           0, 'Neg', 
           1, 'Pos', 
           2, 'Unk', 
           3, 'N/A', 
           NULL) AS RECHALLENGE_STATUS,
    CAS}') || TO_CLOB(q'{E 
        WHEN LENGTH(VCPD.FIRST_DOSE_PARTIAL) = 4 THEN 
            '??-???-' || VCPD.FIRST_DOSE_PARTIAL
        WHEN LENGTH(VCPD.FIRST_DOSE_PARTIAL) = 8 THEN 
            '??-' || VCPD.FIRST_DOSE_PARTIAL
        ELSE 
            VCPD.FIRST_DOSE_PARTIAL
    END AS FIRST_DOSE_PARTIAL,
    CASE 
        WHEN LENGTH(VCPD.LAST_DOSE_PARTIAL) = 4 THEN 
            '??-???-' || VCPD.LAST_DOSE_PARTIAL
        WHEN LENGTH(VCPD.LAST_DOSE_PARTIAL) = 8 THEN 
            '??-' || VCPD.LAST_DOSE_PARTIAL
  }') || TO_CLOB(q'{      ELSE 
            VCPD.LAST_DOSE_PARTIAL
    END AS LAST_DOSE_PARTIAL,
    TRIM(VCEDCT.RELATED_DEVICE) AS RELATED_DEVICE
FROM 
(SELECT * FROM ARGUS.V_CASE_PRODUCT WHERE DELETED IS NULL) VCP
LEFT JOIN 
    (SELECT * FROM ARGUS.V_CASE_PROD_DRUGS WHERE DELETED IS NULL) VCPD
    ON (VCP.CASE_ID = VCPD.CASE_ID AND VCP.SEQ_NUM = VCPD.SEQ_NUM)
LEFT JOIN 
    (SELECT * FROM ARGUS.V_LM_DOSE_UNITS  WHERE DELETED IS NULL) VLDU ON VCPD.TOT_DOSE_UNIT_ID = VLDU.UNIT_ID
LEFT JOIN 
    (SELECT 
         C}') || TO_CLOB(q'{ASE_ID,
         SEQ_NUM,
         CASE 
             WHEN LENGTH(RELATED_DEVICE) > 3997 THEN
                 SUBSTR(RELATED_DEVICE, 1, 3997) || '...'
             ELSE
                 RELATED_DEVICE
         END AS RELATED_DEVICE
     FROM 
         argus.v_CASE_PROD_DRUGS_CLOB_REL_DEV 
     WHERE 
         TEXT_ORDER = 1) VCEDCT ON VCPD.CASE_ID = VCEDCT.CASE_ID AND VCPD.SEQ_NUM = VCEDCT.SEQ_NUM
GROUP BY 
    VCP.CASE_ID,
    VCP.SEQ_NUM,
    VCPD.DECHALLENGE,
    VCPD.RECHALLENGE,
    VCPD.F}') || TO_CLOB(q'{IRST_DOSE_PARTIAL,
    VCPD.LAST_DOSE_PARTIAL,
    VCEDCT.RELATED_DEVICE}'),'SELECT
    CASE_ID,
    SEQ_NUM,
    C_TOTAL_DOSE,
    C_DECHALLENGE,  
    C_RECHALLENGE,  
    FIRST_DOSE_PARTIAL,
    LAST_DOSE_PARTIAL,
    C_RELATED_DEVICE
FROM 
    &MARTUSERNAME..DM_CASE_PRODUCT
WHERE 
    SEQ_NUM > 0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_DOSE_REGIMENS','DM_CASE_DOSE_REGIMENS','C_DOSE_UNIT, C_DAILY_DOSE, C_TOT_REG_DOSE, EXP_DATE_PARTIAL, START_DATE_PARTIAL, STOP_DATE_PARTIAL, LOT_NO, C_DOSE_DESCRIPTION, C_DOSE_UNIT_J, C_DAILY_DOSE_J, C_TOT_REG_DOSE_J, C_DOSE_DESCRIPTION_J',null,null,null,null,TO_CLOB(q'{SELECT
    vcp.case_id,
    nvl(vcdg.log_no,-99999),
    TRIM(CASE
        WHEN vcdg.dose IS NOT NULL THEN
            vcdg.dose
            || ' 'END
               ||    (SELECT unit FROM ARGUS.v_lm_dose_units cfg WHERE cfg.unit_id = VCDG.DOSE_UNIT_ID AND cfg.deleted is null  )
             )                      AS dose_unit,
   TRIM( CASE
        WHEN vcdg.daily_dose IS NOT NULL THEN
            vcdg.daily_dose
            || ' ' END
               ||   (SELECT uniT FROM ARGUS.v_lm_dose_unit}') || TO_CLOB(q'{s cfg WHERE cfg.unit_id = VCDG.DAILY_DOSE_UNIT_ID AND cfg.deleted is null  )
            )                        AS daily_dose,
  TRIM(  CASE
        WHEN vcdg.total_reg_dose IS NOT NULL THEN
            vcdg.total_reg_dose
            || ' ' END
               ||   (SELECT unit FROM ARGUS.v_lm_dose_units cfg WHERE cfg.unit_id = VCDG.tot_reg_dose_unit_id AND cfg.deleted is null  )
                        )              AS total_reg_dose,
    CASE
        WHEN length(vcdg.exp_date_partial) = 4 T}') || TO_CLOB(q'{HEN
            concat('??-???-', vcdg.exp_date_partial)
        WHEN length(vcdg.exp_date_partial) = 8 THEN
            concat('??-', vcdg.exp_date_partial)
        ELSE
            vcdg.exp_date_partial
    END                              AS exp_date_partial,
    CASE
        WHEN length(vcdg.start_date_partial) = 4 THEN
            concat('??-???-', vcdg.start_date_partial)
        WHEN length(vcdg.start_date_partial) = 8 THEN
            concat('??-', vcdg.start_date_partial)
        ELSE
 }') || TO_CLOB(q'{           vcdg.start_date_partial
    END                              AS start_date_partial,
    CASE
        WHEN length(vcdg.stop_date_partial) = 4 THEN
            concat('??-???-', vcdg.stop_date_partial)
        WHEN length(vcdg.stop_date_partial) = 8 THEN
            concat('??-', vcdg.stop_date_partial)
        ELSE
            vcdg.stop_date_partial
    END                              AS stop_date_partial,
    nvl(vcdg.lot_no, nf.null_flavor) AS lot_no,
    ddo.dose_description,
  TRI}') || TO_CLOB(q'{M(  CASE
        WHEN vcdg.dose IS NOT NULL THEN
            vcdg.dose
            || ' ' END
               ||  (SELECT unit_j FROM ARGUS.v_lm_dose_units cfg WHERE cfg.unit_id = VCDG.dose_unit_id AND cfg.deleted is null  )
                    )               AS dose_unit_j,
   TRIM( CASE
        WHEN vcdg.daily_dose IS NOT NULL THEN
            vcdg.daily_dose
            || ' ' END
               || (SELECT unit_j FROM ARGUS.v_lm_dose_units cfg WHERE cfg.unit_id = VCDG.DAILY_DOSE_UNIT_ID AND c}') || TO_CLOB(q'{fg.deleted is null  )
                  )                    AS daily_dose_unit_j,
  TRIM(  CASE
        WHEN vcdg.total_reg_dose IS NOT NULL THEN
            vcdg.total_reg_dose
            || ' ' END
               ||  (SELECT unit_j FROM ARGUS.v_lm_dose_units cfg WHERE cfg.unit_id = VCDG.tot_reg_dose_unit_id AND cfg.deleted is null  )
                               )       AS total_reg_dose_jFROM
    (
        SELECT
            *
        FROM
            argus.v_case_dose_regimens
        WH}') || TO_CLOB(q'{ERE
            deleted IS NULL
    )                     vcdg, 
	(
        SELECT
            CASE_ID , SEQ_NUM
        FROM
            argus.V_CASE_PRODUCT
        WHERE
            deleted IS NULL
    )                     VCP, 
    (
        SELECT
            case_id,
            seq_num,
            log_no,
            text_order,
            CASE
                WHEN length(split_dose_description) > 3997 THEN
                    substr(split_dose_description, 1, 3997)
                   }') || TO_CLOB(q'{ || '...'
                ELSE
                    split_dose_description
            END AS dose_description
        FROM
            argus.v_case_dose_reg_clob_dose_desc
        WHERE
            text_order = 1
    )                     ddo,
    (
        SELECT
            CASE
                WHEN nf.null_flavor IS NOT NULL THEN
                    'NF:[' || nf.null_flavor
                              || ']'
                ELSE
                    NULL
            END null_flavor,
        }') || TO_CLOB(q'{    cf.case_id,
            cf.seq_num
        FROM
            &MARTUSERNAME..DM_CASE_NULL_FLAVOR cf,
            &ETLUSERNAME..dm_lm_null_flavor nf
        WHERE  cf.null_flavor_code = nf.code
        AND cf.field_id = 1050013
    )  nf
WHERE
         vcdg.case_id = ddo.case_id (+)
        AND vcdg.seq_num = ddo.seq_num (+)
        AND vcdg.log_no = ddo.log_no (+)
        AND vcdg.case_id = nf.case_id (+)
        AND vcdg.log_no = nf.seq_num (+)
        AND VCP.case_id=VCDG.CASE_ID (}') || TO_CLOB(q'{+)
        AND VCP.SEQ_NUM=VCDG.SEQ_NUM (+)}'),'SELECT
    case_id,
    log_no,
    c_dose_unit,
    c_daily_dose,
    c_tot_reg_dose,
    exp_date_partial,
    start_date_partial,
    stop_date_partial,
    lot_no,
    c_dose_description,
    c_dose_unit_j,
    c_daily_dose_j,
    c_tot_reg_dose_j
FROM
    &MARTUSERNAME..dm_case_dose_regimens
    WHERE SEQ_NUM>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_MASTER','DM_CASE_DATA','C_PARTNER_CASE, C_CLINICAL_CASE_FLAG, C_INCL_TRIAL, C_INVALID_CASE, C_CLINICAL_CASE_FLAG_J, C_DELETED_BY_USER_NAME, C_DELETED_FLAG',null,null,null,null,TO_CLOB(q'{SELECT 
    VCM.CASE_ID,
    CASE 
        WHEN (select 1 from argus.v_case_classifications VCC, argus.lm_case_classification VLC
        where VCM.CASE_ID=VCC.CASE_ID(+)
        AND VCC.classification_id = vlc.classification_id
        and VLC.DESCRIPTION LIKE '%Partner%'
        AND VCC.deleted is null
        and VLC.deleted is null) is not null
        THEN 'YES'
        ELSE 'NO'
    END AS PARTNER_CASE,

   CASE 
            WHEN VLRT.INCL_TRIAL = 0 THEN 'NO'
            WHEN VLRT.INCL_TRI}') || TO_CLOB(q'{AL = 1 THEN 'YES'
        END AS CLINICAL_CASE_FLAG,
    CASE 
            WHEN VLRT.INCL_TRIAL = 0 THEN '0'
            WHEN VLRT.INCL_TRIAL = 1 THEN '1'
        END AS INCL_TRIAL_FLAG,

   CASE 
			WHEN VLRT.REPORT_TYPE in ('Cross Reporting - CT', 'Invalid Case')
			THEN '1'
			ELSE '0' END AS INVALID_CASE,

	CASE 
            WHEN VLRT.INCL_TRIAL = 0 THEN 'NO'
            WHEN VLRT.INCL_TRIAL = 1 THEN 'YES'
        END AS CLINICAL_CASE_FLAG_J,

	CASE    WHEN VCM.STATE_ID=1
			THEN VCU.USER_FU}') || TO_CLOB(q'{LLNAME
			ELSE NULL
			END AS DELETED_BY_USERNAME,
	CASE 	WHEN VCM.STATE_ID=1
			THEN '1'
			ELSE '0'
			END AS DELETED_FLAG


FROM 
    argus.v_CASE_MASTER VCM,(select * from  argus.V_LM_REPORT_TYPE where deleted is null) VLRT,  (SELECT * from ARGUS.v_CFG_USERS) VCU

	Where 
	VCM.RPT_TYPE_ID = VLRT.RPT_TYPE_ID
    AND VCM.LAST_UPDATE_USER_ID = VCU.USER_ID(+)
}'),'select 
case_id,
Upper(C_PARTNER_CASE),
Upper(C_CLINICAL_CASE_FLAG),
TO_CHAR(Upper(C_INCL_TRIAL)),
TO_CHAR(C_INVALID_CASE),
Upper(C_CLINICAL_CASE_FLAG_J),
C_DELETED_BY_USER_NAME,
TO_CHAR(C_DELETED_FLAG)
from &MARTUSERNAME..DM_CASE_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('LM_STUDY_COHORTS','DM_LM_STUDY_COHORTS','C_STUDY_PROD_DOS_UNIT, C_STUDY_PROD_LICENSE',null,null,null,null,TO_CLOB(q'{SELECT 

    A.cohort_id, 
    A.Prod_dosage_concentration, 
    B.Product_License 
FROM 
   (SELECT DISTINCT study_id, COHORT_ID
,LISTAGG(PROD_DOSAGE_CONCENTRATION, '') WITHIN
GROUP (
ORDER BY PROD_DOSAGE_CONCENTRATION
) PROD_DOSAGE_CONCENTRATION
FROM (
SELECT a.study_num study_id, coh.cohort_id
,('<Prod_Name: ' || h.PROD_NAME || ' Dose: ' || i.formulation || ' Strength: ' || h.concentration || ' Unit: ' || du.unit || ' Blinded: ' || DECODE(D.BLINDED, 1, 'Checked', 'Unchecked') || '>;') Prod_do}') || TO_CLOB(q'{sage_concentration
FROM ARGUS.V_LM_STUDIES A
JOIN ARGUS.V_LM_STUDY_COHORTS COH ON A.STUDY_KEY = COH.STUDY_KEY
JOIN ARGUS.V_LM_STUDY_PRODUCTS D ON COH.COHORT_ID = D.COHORT_ID
AND D.DELETED IS NULL
LEFT JOIN ARGUS.V_LM_PRODUCT H ON D.PRODUCT_ID = H.PRODUCT_ID
AND H.DELETED IS NULL
LEFT JOIN ARGUS.V_LM_FORMULATION I ON H.FORMULATION_ID = I.FORMULATION_ID
AND I.DELETED IS NULL
LEFT JOIN ARGUS.V_LM_DOSE_UNITS DU ON H.CONC_UNIT_ID = DU.UNIT_ID
AND DU.DELETED IS NULL
WHERE A.DELETED IS NULL
)
GROUP BY }') || TO_CLOB(q'{study_id, cohort_id
) A , (SELECT a.study_num study_id, coh.cohort_id
,MIN('(' || C.A3 || ' ' || L.LIC_NUMBER || ') ' || L.TRADE_NAME) Product_License
FROM ARGUS.V_LM_STUDIES A
JOIN ARGUS.V_LM_STUDY_COHORTS COH ON A.STUDY_KEY = COH.STUDY_KEY
AND COH.DELETED IS NULL
JOIN ARGUS.V_LM_STUDY_PRODUCTS P ON COH.COHORT_ID = P.COHORT_ID
AND P.DELETED IS NULL
LEFT JOIN ARGUS.V_LM_LICENSE L ON P.LICENSE_ID = L.LICENSE_ID
AND L.DELETED IS NULL
LEFT JOIN ARGUS.V_LM_COUNTRIES C ON L.COUNTRY_ID = C.COUNTRY_ID
}') || TO_CLOB(q'{AND C.DELETED IS NULL
WHERE A.DELETED IS NULL
GROUP BY a.study_num, COH.COHORT_ID) B
WHERE  A.study_id = B.study_id AND A.cohort_id = B.cohort_id}'),'SELECT   COHORT_ID, C_STUDY_PROD_DOS_UNIT, C_STUDY_PROD_LICENSE from &MARTUSERNAME..DM_LM_STUDY_COHORTS');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_JUSTIFICATIONS','DM_CASE_DATA','C_DELETE_DATE, C_DELETED_REASON, C_DELETE_DATE_J, C_DELETED_REASON_J',null,null,null,null,TO_CLOB(q'{SELECT
    VCM.case_id,
    TO_CHAR(VCJ.UPDATED_TIME, 'DD-MON-YYYY') AS UPDATED_TIME,


CAST((SELECT 
        CASE
        WHEN LENGTH(A.J_TEXT) >= 4000 THEN
            SUBSTR(A.J_TEXT, 1, 3997) || '...'
        ELSE
            A.J_TEXT
    END AS J_TEXT
     FROM ( 
           SELECT 
        xmlcast(xmlagg(xmlelement(e, vct1.SPLIT_J_TEXT).EXTRACT('//text()') ORDER BY vct1.text_order) AS clob) AS J_TEXT
    FROM ARGUS.V_CASE_JUSTIFICAT_CLOB_J_TXT vct1
        WHERE vcj.CASE_ID = vct1.CASE_ID(}') || TO_CLOB(q'{+)
        AND VCJ.Field_id=vct1.Field_id(+)
		AND VCJ.Primary_seq_num=vct1.Primary_seq_num(+)
		AND VCJ.Alt_seq_num=vct1.Alt_seq_num(+)
        AND VCT1.TEXT_ORDER=1
     )A
    ) AS VARCHAR2(4000)) AS J_TEXT,

   TO_CHAR(VCJ.UPDATED_TIME, 'DD-MON-YYYY') AS UPDATED_TIME_J,

    CAST((SELECT 
        CASE
        WHEN LENGTH(B.J_TEXT_J) >= 4000 THEN
            SUBSTR(B.J_TEXT_J, 1, 3997) || '...'
        ELSE
            B.J_TEXT_J
    END AS J_TEXT_J
     FROM (
        SELECT 
            xml}') || TO_CLOB(q'{cast(xmlagg(xmlelement(e, vctj1.SPLIT_J_TEXT).EXTRACT('//text()') ORDER BY text_order) AS clob) AS J_TEXT_J
        FROM ARGUS.V_CASE_JUSTIFICAT_CLOB_J_TXT_J vctj1
        WHERE vcj.CASE_ID = vctj1.CASE_ID(+)
        AND VCJ.Field_id=vctj1.Field_id(+)
		AND VCJ.Primary_seq_num=vctj1.Primary_seq_num(+)
		AND VCJ.Alt_seq_num=vctj1.Alt_seq_num(+)
     )B
    ) AS VARCHAR2(4000)) AS J_TEXT_J
FROM 
    ARGUS.V_CASE_MASTER VCM,
    (select * from ARGUS.V_CASE_JUSTIFICATIONS where deleted is null and p}') || TO_CLOB(q'{rimary_seq_num=1 and alt_seq_num=1 and field_id= 2110018) VCJ 

WHERE 
	VCM.CASE_ID=VCJ.CASE_ID(+)
    AND VCM.DELETED IS NULL
	AND VCM.CASE_ID<>-1}'),'SELECT
    CASE_ID,
    TO_CHAR(C_DELETE_DATE, ''DD-MON-YYYY'') AS UPDATED_TIME,
    TO_CHAR (C_DELETED_REASON) AS J_TEXT,
    TO_CHAR(C_DELETE_DATE_J, ''DD-MON-YYYY'') AS UPDATED_TIME_J,
    TO_CHAR(C_DELETED_REASON_J)
FROM 
    &MARTUSERNAME..DM_CASE_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CMN_REG_REPORTS','DM_SUBMISSION_DATA','REG_REPORT_ID, C_INIT_FUP_CREATED, C_INIT_FUP_RECEIPT,  C_SUB_DUE_DATE, C_FOLLOWUP_NUM, C_DOWNGRADE, C_RECEIVED_DATE, C_DEADLINE, C_REG_LATE_CMT_FLAG',null,null,null,null,TO_CLOB(q'{SELECT 
    vcrr.REG_REPORT_ID,
    CASE WHEN ((lrc.agency_name LIKE '%{RG} Regulatory Reporting Group%'
			                                             			   OR lrc.agency_name LIKE '%{HA}%'
			                                             			   OR lrc.agency_name LIKE '%{EC}%'
			                                             			   OR lrc.agency_name LIKE '%{IN}%'
			                                             			   OR lrc.agency_name LIKE '%{SA}%'
			                                            }') || TO_CLOB(q'{ 			   OR lrc.agency_name LIKE '%{LO}%'
			                                             			   OR lrc.agency_name LIKE '%{RA}%'
			                                             			   OR lrc.agency_name LIKE '%{LEC}%'
			                                             			   OR lrc.agency_name LIKE '%{Distributor}%'
			                                             			   OR lrc.agency_name LIKE '%(LO)%')
			                                             			   AND lrc.agency_name NOT IN ('{SA} Japan Tobacco}') || TO_CLOB(q'{', '{SA} Panion'))
			                                             		 AND vcmnrr.submit_required != 0
			                                             		 AND vcmnrr.aware_date = cmcf.receipt_date
			                                             		 AND cmcf.init_fup_create_date < vcmnrr.date_scheduled
			                                             THEN 'Yes'
			                                             ELSE 'No' END c_init_fup_created, 
														 CASE WHEN vcmnrr.aware_date = cmcf.receipt_}') || TO_CLOB(q'{date
			                                              	AND (lrc.agency_name NOT LIKE '%{SP}%'
			                                              		 AND lrc.agency_name NOT LIKE '%{SR}%')
			                                              	AND (vcmnrr.message_type_id != 4
			                                              		 OR vcmnrr.message_type_id IS NULL)
			                                              	AND vcmnrr.submit_required != 0
		                                                 THEN 'Yes' E}') || TO_CLOB(q'{LSE 'No' END c_init_fup_receipt,
                                                         CASE   WHEN lrc.agency_name= '{HA} France F/LT - CT'		
                                                        AND ( MOD( MOD( To_number( To_char(
                                                              vcmnrr.due_date,
                                                              'D' ) )
                                                                  - To_number( To_char( To_date( '2003-01-06',
   }') || TO_CLOB(q'{                                                           'YYYY-MM-DD' ),
                                                              'D' ) ) +
                                                              7,
                                                                  7 ) + 1
                                                                  - 1 + 7, 7 )
                                                              + 1 ) = 6 THEN ( vcmnrr.due_date + (
                                    }') || TO_CLOB(q'{                                           interval '1' day * ( 2 ) ) )
                                                                  WHEN 
		                                                 lrc.agency_name= '{HA} France F/LT - CT'
                                                        AND ( MOD( MOD( To_number( To_char(
                                                              vcmnrr.due_date,
                                                              'D' ) )
                       }') || TO_CLOB(q'{                                           - To_number( To_char( To_date( '2003-01-06',
                                                              'YYYY-MM-DD' ),
                                                              'D' ) ) +
                                                              7,
                                                                  7 ) + 1
                                                                  - 1 + 7, 7 )
                                            }') || TO_CLOB(q'{                  + 1 ) = 7 THEN ( vcmnrr.due_date + (
                                                                               interval '1' day * ( 1 ) ) )
                                                                  WHEN CASE
                                                                         WHEN vcmnrr.submit_notes LIKE
                                                                              '%Downgrade%' THEN
                                                             }') || TO_CLOB(q'{            'Yes'
                                                                         ELSE 'No'
                                                                       END = 'Yes'
                                                                       AND ( Trunc(Cast(vcmnrr.due_date AS
                                                                                        TIMESTAMP))
                                                                             -
                              }') || TO_CLOB(q'{                                                   Trunc(Cast(vcmnrr.aware_date
                                                                                            AS
                                                                                            TIMESTAMP)) )
                                                                           = 7
                                                                       AND lrc.agency_name NOT IN ( '{HA} Mexico - CT', '{HA} New Zealand - }') || TO_CLOB(q'{CT')				   
		                                                				   THEN (
                                                                  vcmnrr.due_date +
                                                                  ( interval '1' day * ( 8 ) ) )
                                                                  ELSE vcmnrr.due_date
                                                        END C_SUB_DUE_DATE,
                                                        CASE WHEN vcmnrr.followu}') || TO_CLOB(q'{p_num = 0
																				THEN
																					'I'
																					ELSE
																						'F/U('||vcmnrr.followup_num||')'
																				END  fOLLOWUP_NUM, 
                                                                                CASE WHEN vcmnrr.submit_notes LIKE '%Downgrade%'
																				THEN
																					'Yes'
                                                                                ELSE
                                                     }') || TO_CLOB(q'{                                'No'
																				END AS c_downgrade,
                                                                                 (SELECT
                                                             nvl(max(cfup1.receipt_date),cmas1.init_rept_date)
                                                        FROM
                                                             argus.v_case_master   cmas1,
                                                            (select * fr}') || TO_CLOB(q'{om  argus.v_case_followup where deleted is null ) cfup1
                                                        WHERE
                                                             vcrr.case_id = cmas1.case_id
                                                         AND cmas1.case_id  = cfup1.case_id (+)
                                                         AND cfup1.receipt_date BETWEEN trunc(add_months(sysdate, - 1),'MM') AND last_day(add_months(sysdate, - 1))
                                }') || TO_CLOB(q'{                         AND  NVL(cfup1.receipt_date ,cmas1.init_rept_date) <   vcmnrr.date_xmit
                                                         GROUP  BY cfup1.receipt_date,cmas1.init_rept_date
                                                         ) AS C_RECEIVED_DATE ,
                                                         vcmnrr.due_date-vcmnrr.aware_date C_DEADLINE,
                                                         DECODE(FLAG,1,0,1)  C_REG_LATE_CMT_FLAG
FROM 
    (selec}') || TO_CLOB(q'{t * from argus.v_cmn_reg_reports vcmnrr where vcmnrr.deleted IS NULL) vcmnrr,
                                                  (select * from argus.v_case_reg_reports vcrr where vcrr.deleted   IS NULL) vcrr	,
                                                  (select * from argus.lm_regulatory_contact where deleted is null ) lrc,
                                                  (SELECT case_id,init_rept_date AS receipt_date,
		                                                       create_time A}') || TO_CLOB(q'{S init_fup_create_date , 0 seq_num
		                                                       FROM  argus.v_case_master CM
		                                                       UNION ALL
		                                                       SELECT case_id,receipt_date,time_stamp AS init_fup_create_date , seq_num
		                                                       FROM argus.v_case_followup cf
		                                                       WHERE cf.deleted IS NULL) cmcf,
      }') || TO_CLOB(q'{                                                         (SELECT DISTINCT REG_REPORT_ID , 1 FLAG FROM  argus.cmn_reg_rpts_clob_null_reason  WHERE split_nullification_reason  LIKE   '%NOT LATE%') CN
                                              WHERE    vcmnrr.reg_report_id = vcrr.reg_report_id  
                                              and lrc.agency_id(+) = vcmnrr.agency_id
                                              and vcrr.case_id = cmcf.case_id(+)
                                    }') || TO_CLOB(q'{          and  cmcf.seq_num(+) = vcmnrr.aware_method
                                              AND CN.REG_REPORT_ID(+)  =VCMNRR.REG_rEPORT_ID}'),'SELECT  REG_REPORT_ID, C_INIT_FUP_CREATED, C_INIT_FUP_RECEIPT, TO_DATE(C_SUB_DUE_DATE), C_FOLLOWUP_NUM, C_DOWNGRADE, C_RECEIVED_DATE, C_DEADLINE, C_REG_LATE_CMT_FLAG
FROM &MARTUSERNAME..DM_SUBMISSION_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('MESSAGES','DM_MESSAGES','msg_id , c_status , C_STATUS_J',null,null,null,null,TO_CLOB(q'{SELECT  
			       vm.msg_id,
				  
				   (SELECT DISTINCT(esm_ae_status_name) FROM "ARGUS".esm_ae_status_lkup es WHERE es.esm_status_type_cd = vm.status),
				   (SELECT DISTINCT(esm_ae_status_name) FROM "ARGUS".esm_ae_status_lkup es WHERE es.esm_status_type_cd = vm.status)
			FROM  "ARGUS".V_CASE_MASTER ecp,
				 "ARGUS".v_safetyreport sr,
				 "ARGUS".v_messages vm,
				 "ARGUS".messages_ackheader_ty ah,
				 "ARGUS".messages_msgheader_ty mh
           WHERE ecp.case_id = sr.case_xref(+)
  }') || TO_CLOB(q'{           AND sr.msg_id = vm.msg_id
             AND vm.msg_id = ah.msg_id
             AND vm.msg_id = mh.msg_id}'),'select msg_id , c_status , C_STATUS_J from &MARTUSERNAME..dm_messages');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('SAFETYREPORT','DM_SAFETYREPORT','REPORT_ID ,C_CASE_NUM_CUR_STATE, C_RECEIVED_DATE , C_NULLIFICATIONREASON',null,null,null,null,TO_CLOB(q'{SELECT vsa.report_id, 
            (
                SELECT
                   min( cma.case_num
                        || ' -- '
                        || cwst.state_name)
                FROM
                      "ARGUS".cfg_workflow_states cwst
                WHERE
                         cma.state_id = cwst.state_id
                    AND vsa.safetyreportversion <> 0
                    AND vsa.e2b_type IN ( 1, 3 )
            ),
            
            (select
        }') || TO_CLOB(q'{         max(nvl(cfup1.receipt_date,cmas1.init_rept_date))
            from argus.v_case_master   cmas1,
                 (select * from argus.v_case_followup where deleted is null) cfup1
            where VSA.case_xref = cmas1.case_id 
            and   cmas1.case_id = cfup1.case_id(+)
            and   nvl(cfup1.receipt_date,cmas1.init_rept_date) < to_date(substr(vsa.transmissiondater3,1,14),'YYYYMMDDHH24MISS')) ,
            trim((SELECT substr(split_nullificationreason,1,100) FROM "ARG}') || TO_CLOB(q'{US".sftyrpt_clob_nullify_ireason WHERE REPORT_ID = VSA.REPORT_ID )) C_NULLIFICATIONREASON
        FROM   "ARGUS".v_safetyreport         vsa  , ARGUS.v_case_master            cma  
        WHERE VSA.CASE_XREF = CMA.CASe_ID}'),'SELECT   REPORT_ID , C_CASE_NUM_CUR_STATE , C_RECEIVED_DATE , trim(substr(C_NULLIFICATIONREASON,1,100)) 
        FROM &MARTUSERNAME..DM_SAFETYREPORT');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_MASTER','DM_SAFETYREPORT','REPORT_ID ,C_CASE_NUM_CUR_STATE',null,null,null,null,TO_CLOB(q'{SELECT 
			vsa.report_id, 
              (
                SELECT
                   min( cma.case_num
                        || ' -- '
                        || cwst.state_name)
                FROM
                      "ARGUS".cfg_workflow_states cwst
                WHERE
                         cma.state_id = cwst.state_id
                    AND vsa.safetyreportversion <> 0
                    AND vsa.e2b_type IN ( 1, 3 )
            )
        FROM   "ARGUS".v_safetyreport         vsa  }') || TO_CLOB(q'{, ARGUS.v_case_master            cma  
        WHERE VSA.CASE_XREF = CMA.CASe_ID}'),'SELECT REPORT_ID ,C_CASE_NUM_CUR_STATE  FROM &MARTUSERNAME..DM_SAFETYREPORT  WHERE REPORT_ID IS NOT NULL');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PROD_INDICATIONS','DM_CASE_DATA','C_OFF_LABEL_USE_CASE',null,null,null,null,TO_CLOB(q'{select VCM.CASE_ID, 
CASE WHEN MAX(CASE WHEN (upper(VCE.PREF_TERM) in ('OFF LABEL USE', 'DRUG EFFECTIVE FOR UNAPPROVED INDICATION', 'DRUG INEFFECTIVE FOR UNAPPROVED INDICATION', 'THERAPEUTIC PRODUCT EFFECTIVE FOR UNAPPROVED INDICATION', 'THERAPEUTIC PRODUCT INEFFECTIVE FOR UNAPPROVED INDICATION', 'PRODUCT USE IN UNAPPROVED INDICATION', 'UNINTENTIONAL USE FOR UNAPPROVED INDICATION')
AND VCM.RPT_TYPE_ID in (6,3,1,101025, 101026)) OR (Upper(CPI.IND_PREF_TERM) in ('PRODUCT USED FOR UNKNOWN INDICATIO}') || TO_CLOB(q'{N', 'PRODUCT USE IN UNAPPROVED INDICATION')
AND VCM.RPT_TYPE_ID in (6,3,1,101025, 101026)) OR (CPI.IND_PREF_TERM IS NULL and  VCM.RPT_TYPE_ID in (6,3,1,101025, 101026)) THEN 'YES'
ELSE 'NO' END) ='YES' THEN 'YES'
ELSE 'NO' END AS OFF_LABEL_USE_CASE
FROM (Select * from argus.v_case_prod_indications where deleted is null) CPI, ARGUS.V_CASE_MASTER VCM, (Select * from ARGUS.V_CASE_EVENT where deleted is NULL) VCE
WHERE VCM.CASE_ID = VCE.CASE_ID(+)
AND VCM.CASE_ID = CPI.CASE_ID(+)
AND VCM.CASE_ID<>-1}') || TO_CLOB(q'{
GROUP BY VCM.CASE_ID}'),'select 
case_id,
upper(C_OFF_LABEL_USE_CASE)
from &MARTUSERNAME..DM_CASE_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_EVENT_ASSESS','DM_CASE_PRODUCT','CASE_ID,SEQ_NUM,LF_DET_LIST_PROD_EVE_COMB,LF_DET_CAU_PROD_EVE_COMB,LF_REPT_CAU_PROD_EVE_COMB',null,null,null,null,TO_CLOB(q'{SELECT    
          cp.case_id,
          cp.seq_num,
	      ldl.LF_DET_LIST_PROD_EVE_COMB AS LF_DET_LIST_PROD_EVE_COMB ,
	      ldc.LF_DET_CAU_PROD_EVE_COMB  AS LF_DET_CAU_PROD_EVE_COMB,
	      lrc.LF_REPT_CAU_PROD_EVE_COMB AS LF_REPT_CAU_PROD_EVE_COMB
FROM   argus.v_case_master         cm,  
       argus.v_case_product        cp,
       (SELECT     calc_sort_det.case_id,calc_sort_det.prod_seq_num,
	        TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,calc_sort_det.sort_order || ') ' ||CASE WHEN }') || TO_CLOB(q'{calc_sort_det.conserv = 100 THEN 'Unlisted' WHEN  calc_sort_det.conserv = 99  THEN 'Unknown' ELSE 'Listed' END|| chr(10)).EXTRACT('//text()')ORDER BY CALC_SORT_DET.CASE_ID,CALC_SORT_DET.PROD_SEQ_NUM,CALC_SORT_DET.sort_order)AS CLOB),chr(10))) AS LF_DET_LIST_PROD_EVE_COMB
            FROM (SELECT CED.CASE_ID,CED.PROD_SEQ_NUM,CED.EVENT_SEQ_NUM,MAX(DECODE(CED.det_listedness_id,1,98,2,100,3,99)) AS conserv,MAX(CED.det_listedness_id) , RANK() OVER (PARTITION BY  CED.CASE_ID,CED.PROD_SEQ_NUM ORDER BY }') || TO_CLOB(q'{ CED.CASE_ID,CE.SORT_ID) as sort_order
                 FROM ARGUS.V_CASE_EVENT_ASSESS CED,ARGUS.V_CASE_EVENT CE WHERE CED.DELETED IS NULL AND CE.DELETED IS NULL AND CED.det_listedness_id IS NOT NULL AND CED.CASE_ID=CE.CASE_ID AND CED.EVENT_SEQ_NUM=CE.SEQ_NUM aND CED.LICENSE_ID<>0 GROUP BY CED.CASE_ID,CED.PROD_SEQ_NUM,CED.EVENT_SEQ_NUM,CE.SORT_ID) calc_sort_det
	   GROUP BY CALc_SORT_DET.case_id,CALC_SORT_DET.prod_seq_num
       )                          ldl,
       (
         SELECT  calc_sort}') || TO_CLOB(q'{_det_caus.case_id,calc_sort_det_caus.prod_seq_num,
	        TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,calc_sort_det_caus.sort_order || ') ' ||ldc.causality || chr(10)).EXTRACT('//text()')ORDER BY calc_sort_det_caus.CASE_ID,calc_sort_det_caus.PROD_SEQ_NUM,calc_sort_det_caus.sort_order)AS CLOB),chr(10))) AS LF_DET_CAU_PROD_EVE_COMB
            FROM  (SELECT CED.CASE_ID,CED.PROD_SEQ_NUM,CED.EVENT_SEQ_NUM,CED.det_causality_ID,(RANK() OVER (PARTITION BY  CED.CASE_ID,CED.PROD_SEQ_NUM ORDER BY CED.CASE}') || TO_CLOB(q'{_ID,CE.SORT_ID)) as sort_order
                  FROM ARGUS.V_CASE_EVENT_ASSESS CED,ARGUS.V_CASE_EVENT CE WHERE CED.DELETED IS NULL AND CE.DELETED IS NULL AND CED.det_causality_ID IS NOT NULL AND CED.CASE_ID=CE.CASE_ID AND CED.EVENT_SEQ_NUM=CE.SEQ_NUM) calc_sort_det_caus,
            argus.vw_lm_causality ldc     
		    WHERE calc_sort_det_caus.det_causality_ID=LDC.CAUSALITY_ID
            AND   ldc.deleted IS NULL
	    GROUP BY calc_sort_det_caus.case_id,calc_sort_det_caus.prod_seq_num
        }') || TO_CLOB(q'{)                         ldc,
       (
           SELECT    calc_sort_rpt_caus.case_id,calc_sort_rpt_caus.prod_seq_num,
	        TO_CHAR(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(e,calc_sort_rpt_caus.sort_order || ') ' ||lrc.causality || chr(10)).EXTRACT('//text()')ORDER BY calc_sort_rpt_caus.CASE_ID,calc_sort_rpt_caus.PROD_SEQ_NUM,calc_sort_rpt_caus.sort_order)AS CLOB),chr(10))) AS LF_REPT_CAU_PROD_EVE_COMB
			FROM  
                  (SELECT CED.CASE_ID,CED.PROD_SEQ_NUM,CED.EVENT_SEQ_NUM,CED.RPT_CAUSAL}') || TO_CLOB(q'{ITY_ID,(RANK() OVER (PARTITION BY  CED.CASE_ID,CED.PROD_SEQ_NUM ORDER BY CED.CASE_ID,CE.SORT_ID)) as sort_order
                  FROM ARGUS.V_CASE_EVENT_ASSESS CED,ARGUS.V_CASE_EVENT CE WHERE CED.DELETED IS NULL AND CE.DELETED IS NULL AND CED.RPT_CAUSALITY_ID IS NOT NULL AND CED.CASE_ID=CE.CASE_ID AND CED.EVENT_SEQ_NUM=CE.SEQ_NUM) calc_sort_rpt_caus,
                  argus.vw_lm_causality lrc
		    WHERE calc_sort_rpt_caus.RPT_CAUSALITY_ID=LRC.CAUSALITY_ID
			AND   lrc.deleted IS NULL
	    GRO}') || TO_CLOB(q'{UP BY calc_sort_rpt_caus.case_id,calc_sort_rpt_caus.prod_seq_num
       )                    lrc
WHERE  cm.case_id=cp.case_id
  AND  cp.case_id=ldl.case_id(+)
  AND  cp.seq_num=ldl.prod_seq_num(+)
  AND  cp.case_id=ldc.case_id(+)
  AND  cp.seq_num=ldc.prod_seq_num(+)
  AND  cp.case_id=lrc.case_id(+)
  AND  cp.seq_num=lrc.prod_seq_num(+)
  AND  cp.deleted  IS NULL}'),'SELECT CASE_ID,SEQ_NUM,TO_CHAR(LF_DET_LIST_PROD_EVE_COMB),TO_CHAR(LF_DET_CAU_PROD_EVE_COMB),TO_CHAR(LF_REPT_CAU_PROD_EVE_COMB) FROM &MARTUSERNAME..DM_CASE_PRODUCT WHERE SEQ_NUM>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_EVENT_DETAIL','DM_CASE_PRODUCT','CASE_ID,SEQ_NUM,LF_ACT_TAKEN_PROD_EVE_COB',null,null,null,null,TO_CLOB(q'{SELECT 
        cp.case_id,
        cp.seq_num,
        LF. lf_act_taken_prod_eve_cob AS lf_act_taken_prod_eve_cob
FROM  argus.v_case_master  CM,
      argus.v_case_product cp,
      (SELECT calc_sort_taken.case_id,calc_sort_taken.prod_seq_num,to_char(RTRIM(XMLCAST(XMLAGG(XMLELEMENT(E,calc_sort_taken.sort_order || ') ' ||lat.action_taken || CHR(10)).EXTRACT('//text()')ORDER BY calc_sort_taken.case_id,calc_sort_taken.prod_seq_num,calc_sort_taken.sort_order)AS CLOB),CHR(10)))  AS lf_act_taken_prod}') || TO_CLOB(q'{_eve_cob
           FROM (SELECT ced.case_id,ced.prod_seq_num,ced.event_seq_num,ced.act_taken_id,(RANK() OVER (PARTITION BY  ced.case_id,ced.prod_seq_num ORDER BY ced.case_id,ce.sort_id)) AS sort_order
                  FROM argus.v_case_event_detail ced,argus.v_Case_event ce WHERE ced.deleted IS NULL AND ced.act_taken_id IS NOT NULL AND ce.deleted IS NULL and ced.case_id=ce.case_id and ced.event_seq_num=ce.seq_num)calc_sort_taken,
                  argus.lm_action_taken lat
        WHERE
      }') || TO_CLOB(q'{       calc_sort_taken.act_taken_id = lat.act_taken_id
             AND lat.deleted IS NULL
        GROUP BY calc_sort_taken.case_id,calc_sort_taken.prod_seq_num)            LF
WHERE CM.case_id=cp.case_id
AND   cp.case_id = LF.case_id(+)
AND  cp.seq_num =  LF.prod_seq_num(+)
AND cp.deleted IS NULL}'),'SELECT case_id,seq_num,to_char(lf_act_taken_prod_eve_cob) FROM &MARTUSERNAME..dm_case_product WHERE seq_num>0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_REG_REPORTS','DM_RPT_PDF','CASE_ID',null,null,null,null,'SELECT
    vcm.case_id
FROM
    argus.v_case_master        vcm,
    (
        SELECT
            *
        FROM
            "ARGUS".v_rpt_pdf rp
        WHERE
            rp.deleted IS NULL
    )                          rp,
    "ARGUS".v_case_reg_reports vcrr
WHERE
        rp.case_num = vcm.case_num
    AND vcm.case_id = vcrr.case_id (+)','SELECT
    case_id
FROM
    &MARTUSERNAME..dm_rpt_pdf');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PRODUCT','DM_CASE_EXP_PROD_FAMILY','CASE_VID, CASE_ID, VERSION_NO, CASE_NUM, PROD_SEQ_NUM, STUDY_KEY, STUDY_NUM, FAMILY_ID, FAMILY_NAME, EXPANDED_FAMILY_ID, EXPANDED_FAMILY_NAME, CASE_PRODUCT_ID, PROD_NAME, PRODUCT_NAME_BLINDED, IS_STUDY_DRUG, IS_BEIGENE_ACTIVE, IS_CASE_BLINDED, IS_STUDY_PRODUCT_BLINDED, IS_STUDY_DRUG_NOT_ADMIN, IS_STUDY_BLINDED, PRODUCT_PROD_TYPE_ID, EXP_FAM_PROD_TYPE_ID, IS_BLINDED_BLINDED, IS_BLINDED_UNBLINDED, IS_IMP_BLINDED, IS_IMP_UNBLINDED, IS_COMPARATOR_BLINDED, IS_COMPARATOR_UNBLINDED, IS_OTHER_STUDY_BLINDED, IS_OTHER_STUDY_UNBLINDED, IS_PLACEBO_BLINDED, IS_PLACEBO_UNBLINDED ',null,null,null,null,TO_CLOB(q'{SELECT
    outer_sql.*,
    CASE
        WHEN ( is_blinded_blinded = 0
               AND is_study_drug_not_admin <> 1
               AND is_beigene_active = 1 ) THEN
            (
                CASE
                    WHEN ( product_prod_type_id = 2
                           AND exp_fam_prod_type_id = 2 )
                         AND study_key IS NOT NULL THEN
                        1
                    ELSE
                        0
                END
            )
        ELSE
        }') || TO_CLOB(q'{    0
    END     AS is_imp_blinded,
    CASE
        WHEN ( is_blinded_unblinded = 0
               AND is_study_drug_not_admin <> 1
               AND is_beigene_active = 1 ) THEN
            (
                CASE
                    WHEN ( product_prod_type_id = 2
                           AND exp_fam_prod_type_id = 2 )
                         AND study_key IS NOT NULL THEN
                        1
                    ELSE
                        0
                END
            )
      }') || TO_CLOB(q'{  ELSE
            0
    END     AS is_imp_unblinded,
    CASE
        WHEN ( is_blinded_blinded = 0
               AND is_study_drug_not_admin <> 1 ) THEN
            (
                CASE
                    WHEN ( product_prod_type_id = 1 ) THEN
                        1
                    ELSE
                        0
                END
            )
        ELSE
            0
    END     AS is_comparator_blinded,
    CASE
        WHEN ( is_blinded_unblinded = 0
               AND is_stu}') || TO_CLOB(q'{dy_drug_not_admin <> 1 ) THEN
            (
                CASE
                    WHEN ( product_prod_type_id = 1 ) THEN
                        1
                    ELSE
                        0
                END
            )
        ELSE
            0
    END     AS is_comparator_unblinded,
    CASE
        WHEN ( is_blinded_blinded = 0
               AND is_study_drug_not_admin <> 1
               AND is_study_drug = 1 ) THEN
            (
                CASE
                    WHEN}') || TO_CLOB(q'{ ( ( product_prod_type_id IS NULL )
                           OR ( product_prod_type_id = 5 )
                           OR ( product_prod_type_id = 2
                                AND exp_fam_prod_type_id = 5
                                AND is_beigene_active = 0 )
                           OR ( product_prod_type_id = 2
                                AND exp_fam_prod_type_id = 2
                                AND is_beigene_active = 0 ) ) THEN
                        1
                }') || TO_CLOB(q'{    ELSE
                        0
                END
            )
        ELSE
            0
    END     AS is_other_study_blinded,
    CASE
        WHEN ( is_blinded_unblinded = 0
               AND is_study_drug_not_admin <> 1
               AND is_study_drug = 1 ) THEN
            (
                CASE
                    WHEN ( ( product_prod_type_id IS NULL )
                           OR ( product_prod_type_id = 5 )
                           OR ( product_prod_type_id = 2
             }') || TO_CLOB(q'{                   AND exp_fam_prod_type_id = 5
                                AND is_beigene_active = 0 )
                           OR ( product_prod_type_id = 2
                                AND exp_fam_prod_type_id = 2
                                AND is_beigene_active = 0 ) ) THEN
                        1
                    ELSE
                        0
                END
            )
        ELSE
            0
    END     AS is_other_study_unblinded,
    CASE
        WHEN ( is_b}') || TO_CLOB(q'{linded_blinded = 0
               AND is_study_drug_not_admin <> 1 ) THEN
            (
                CASE
                    WHEN ( ( product_prod_type_id = 2
                             AND exp_fam_prod_type_id = 3 )
                           OR ( product_prod_type_id = 3 ) ) THEN
                        1
                    ELSE
                        0
                END
            )
        ELSE
            0
    END     AS is_placebo_blinded,
    CASE
        WHEN ( is_blinded_unb}') || TO_CLOB(q'{linded = 0
               AND is_study_drug_not_admin <> 1 ) THEN
            (
                CASE
                    WHEN ( ( product_prod_type_id = 2
                             AND exp_fam_prod_type_id = 3 )
                           OR ( product_prod_type_id = 3 ) ) THEN
                        1
                    ELSE
                        0
                END
            )
        ELSE
            0
    END     AS is_placebo_unblinded
FROM
    (
          SELECT
            case_}') || TO_CLOB(q'{id,
            inner_sql.case_num,
            inner_sql.seq_num                                                                                  prod_seq_num,
            inner_sql.study_key,
            inner_sql.study_num,
            decode(inner_sql.family_id, 100605, 101414, 100813, 101208,
                   100755, 101445, inner_sql.family_id)                                                        family_id,
            decode(inner_sql.name, 'PARP Inhibitor', 'Pamiparib', 'BTK inhibito}') || TO_CLOB(q'{r', 'Zanubrutinib',
                   'Immune Checkpoint Inhibitor Against PD-1', 'Tislelizumab', inner_sql.name)                 family_name,
            decode(inner_sql.expanded_family_id, 100605, 101414, 100813, 101208,
                   100755, 101445, inner_sql.expanded_family_id)                                               expanded_family_id,
            decode(inner_sql.expanded_family_name, 'PARP Inhibitor', 'Pamiparib', 'BTK inhibitor', 'Zanubrutinib',
                   'Immune Ch}') || TO_CLOB(q'{eckpoint Inhibitor Against PD-1', 'Tislelizumab', inner_sql.expanded_family_name) expanded_family_name,
            inner_sql.case_product_id,
            inner_sql.prod_name,
            inner_sql.product_name_blinded,
            inner_sql.is_study_drug,
            inner_sql.is_beigene_active,
            inner_sql.is_case_blinded,
            inner_sql.is_study_product_blinded,
            inner_sql.is_study_drug_not_admin,
            inner_sql.is_study_blinded,
            inner_sql.produc}') || TO_CLOB(q'{t_prod_type_id,
            inner_sql.exp_fam_prod_type_id,
            (
                CASE
                    WHEN ( inner_sql.is_study_blinded = 1
                           AND is_study_product_blinded = 1
                           AND is_study_drug_not_admin <> 1 )
                         OR ( is_case_blinded = 1
                              AND is_study_product_blinded = 1
                              AND is_study_drug_not_admin <> 1 ) THEN
                        1
                }') || TO_CLOB(q'{    ELSE
                        0
                END
            )                                                                                                  is_blinded_blinded,
            (
                CASE
                    WHEN ( is_case_blinded = 1
                              AND is_study_product_blinded = 1
                              AND is_study_drug_not_admin <> 1 ) THEN
                        1
                    ELSE
                        0
                END
  }') || TO_CLOB(q'{          )                                                                                                  is_blinded_unblinded
        FROM
            (
                SELECT
                    vcs.case_id,
                    vcm.case_num,
                    vcp.seq_num,
                    vcs.study_key,
                    vcs.study_num,
                    vcp.family_id,
                    vlpf.name,
                    vlpf_e.family_id                              expanded_family_id}') || TO_CLOB(q'{,
                    vlpf_e.name                                   expanded_family_name,
                    decode(nvl(vcp.product_id, vcp.pat_exposure),
                           0,
                           NULL,
                           nvl(vcp.product_id, vcp.pat_exposure)) case_product_id,
                    vlp.prod_name,
                    CASE
                        WHEN (vlsc.study_type_id IN ( 1, 2 )
                             AND vls.unblind_ok = 0) OR (nvl(vcs.code_broken,}') || TO_CLOB(q'{ 0) IN ( - 1, 0 ) and decode(vcp.co_drug_code, 'Study Drug', 1, 0)  = 1 and vlsp.blinded = 1 ) THEN
                            vlsc.blind_name
                        ELSE
                            vlp.prod_name
                    END                                           product_name_blinded,
                    decode(vcp.co_drug_code, 'Study Drug', 1, 0)  is_study_drug,
                    CASE
                        WHEN vlpf_e.family_id = vcp.family_id THEN
                        }') || TO_CLOB(q'{    1
                        ELSE
                            0
                    END                                           is_beigene_active,
                    CASE
                        WHEN nvl(vcs.code_broken, 0) IN ( - 1, 0 ) THEN
                            1
                        ELSE
                            0
                    END                                           is_case_blinded,
                   CASE
                        WHEN vlsp.blinded = 1 THEN
      }') || TO_CLOB(q'{                      1
                        ELSE
                            0
                    END                                           is_study_product_blinded,
                    CASE
                        WHEN vcp.sdrug_not_admin = 1 THEN
                            1
                        ELSE
                            0
                    END                                           is_study_drug_not_admin,
                    CASE
                        WHEN vlsc.stu}') || TO_CLOB(q'{dy_type_id IN ( 1, 2 )
                             AND vls.unblind_ok = 0 THEN
                            1
                        ELSE
                            0
                    END                                           is_study_blinded,
                    vlsp.prod_type_id                             product_prod_type_id,
                    vlsp_e.prod_type_id                           exp_fam_prod_type_id
                 FROM
                    argus.v_case_study        vcs,}') || TO_CLOB(q'{
                    argus.v_case_product      vcp,
                    argus.v_lm_product        vlp,
                    argus.v_case_master       vcm,
                    (
                        SELECT
                            vlsp_e.cohort_id,
                            product_id,
                            prod_type_id,
                            study_key,
                            ROW_NUMBER()
                            OVER(PARTITION BY study_key, product_id
                 }') || TO_CLOB(q'{                ORDER BY
                                     vlsp_e.cohort_id
                            ) rownumber
                        FROM
                            argus.v_lm_study_products vlsp_e,
                            argus.lm_study_cohorts    vlsc2
                        WHERE
                            vlsp_e.deleted IS NULL
                            AND vlsc2.deleted IS NULL
                            AND vlsp_e.cohort_id = vlsc2.cohort_id
                    )       }') || TO_CLOB(q'{                  vlsp_e,
                    argus.v_lm_study_cohorts  vlsc_e,
                    argus.v_lm_product_family vlpf,
                    argus.v_lm_product_family vlpf_e,
                    argus.v_lm_product        vlp_e,
                    argus.v_lm_studies        vls,
                    argus.v_lm_study_cohorts  vlsc,
                    argus.v_lm_study_products vlsp

 WHERE
                        vcs.case_id = vcp.case_id
                    AND vcp.deleted IS NULL
     }') || TO_CLOB(q'{               AND vcs.study_key = vlsc_e.study_key
                    AND vlsp_e.cohort_id = vlsc_e.cohort_id
                    AND vlsc_e.deleted IS NULL
                    AND vcm.case_id = vcs.case_id
                    AND vlpf.family_id = vlp.family_id
                    AND vlpf.deleted IS NULL
                    AND vlpf_e.family_id = vlp_e.family_id
                    AND vlp_e.product_id = vlsp_e.product_id
                    AND vlp_e.deleted IS NULL
                    AND v}') || TO_CLOB(q'{lpf_e.deleted IS NULL
                    AND vcp.drug_type = 1
                    AND rownumber = 1
                    AND vls.study_key = vcs.study_key
                    AND vls.study_key = vlsc.study_key
                    AND vlsc.cohort_id = vcs.cohort_id
                    AND vlsp.cohort_id (+) = vcs.cohort_id
                    AND vlsp.product_id (+) = vlp.product_id
                    AND vlp.deleted IS NULL
                    AND vcs.study_key IS NOT NULL
                    }') || TO_CLOB(q'{AND vlsp.deleted IS NULL
                    AND ( upper(vlpf_e.name) NOT LIKE '%_EXT%'
                          AND nvl(vlsp_e.prod_type_id, 0) <> 4
                          AND nvl(vlsp.prod_type_id, 0) <> 4 )
                    AND (
                        CASE
                            WHEN vcp.product_id IS NULL
                                 AND vcp.pat_exposure IS NOT NULL THEN
                                vcp.pat_exposure
                            ELSE
                      }') || TO_CLOB(q'{          vcp.product_id
                        END
                    ) = vlp.product_id (+)

 UNION ALL
                SELECT
                    vcs.case_id,
                    vcm.case_num,
                    vcp.seq_num,
                    vcs.study_key,
                    vcs.study_num,
                    vcp.family_id,
                    vlpf.name,
                    vcp.family_id                                 expanded_family_id,
                    vlpf.name                  }') || TO_CLOB(q'{                   expanded_family_name,
                    decode(nvl(vcp.product_id, vcp.pat_exposure),
                           0,
                           NULL,
                           nvl(vcp.product_id, vcp.pat_exposure)) case_product_id,
                    vlp.prod_name,
                    vlp.prod_name                                 product_name_blinded,
                    decode(vcp.co_drug_code, 'Study Drug', 1, 0)  is_study_drug,
                    CASE
                  }') || TO_CLOB(q'{      WHEN vcp.family_id IS NOT NULL THEN
                            1
                        ELSE
                            0
                    END                                           is_beigene_active,
                    0                                             is_case_blinded,
                    0                                             is_study_product_blinded,
                    CASE
                        WHEN sdrug_not_admin = 1 THEN
                            1
}') || TO_CLOB(q'{                        ELSE
                            0
                    END                                           is_study_drug_not_admin,
                    0                                             is_study_blinded,
                    0                                             product_prod_type_id,

 NULL                                          exp_fam_prod_type_id
                FROM
                    argus.v_case_study        vcs,
                    argus.v_case_prod}') || TO_CLOB(q'{uct      vcp,
                    argus.v_lm_product        vlp,
                    argus.v_case_master       vcm,
                    argus.v_lm_product_family vlpf
                WHERE
                        vcs.case_id = vcp.case_id
                    AND vcp.deleted IS NULL
                    AND vcm.case_id = vcs.case_id
                    AND vlpf.family_id = vlp.family_id
                    AND vlpf.deleted IS NULL
                    AND vlp.deleted IS NULL
                    AND}') || TO_CLOB(q'{ vcp.drug_type = 1
                    AND vcs.study_key IS NULL
                    AND (
                        CASE
                            WHEN vcp.product_id IS NULL
                                 AND vcp.pat_exposure IS NOT NULL THEN
                                vcp.pat_exposure
                            ELSE
                                vcp.product_id
                        END
                    ) = vlp.product_id (+)
            ) inner_sql
    ) outer_sql }'),TO_CLOB(q'{SELECT
CASE_ID,
CASE_NUM,
PROD_SEQ_NUM,
STUDY_KEY,
STUDY_NUM,
FAMILY_ID,
FAMILY_NAME,
EXPANDED_FAMILY_ID,
EXPANDED_FAMILY_NAME,
CASE_PRODUCT_ID,
PROD_NAME,
PRODUCT_NAME_BLINDED,
IS_STUDY_DRUG,
IS_BEIGENE_ACTIVE,
IS_CASE_BLINDED,
IS_STUDY_PRODUCT_BLINDED,
IS_STUDY_DRUG_NOT_ADMIN,
IS_STUDY_BLINDED,
PRODUCT_PROD_TYPE_ID,
EXP_FAM_PROD_TYPE_ID,
IS_BLINDED_BLINDED,
IS_BLINDED_UNBLINDED,
IS_IMP_BLINDED,
IS_IMP_UNBLINDED,
IS_COMPARATOR_BLINDED,
IS_COMPARATOR_UNBLINDED,
IS_OTHER_STUDY_BLINDED,
IS_OTHER_S}') || TO_CLOB(q'{TUDY_UNBLINDED,
IS_PLACEBO_BLINDED,
IS_PLACEBO_UNBLINDED FROM &MARTUSERNAME..DM_CASE_EXP_PROD_FAMILY}'));
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_EVENT_NATURE','DM_CASE_EVENT_NATURE','CASE_ID, EVENT_SEQ_NUM',null,null,null,null,'SELECT
    cm.case_id,
    ce.seq_num AS event_seq_num
FROM
         argus.case_master cm
    INNER JOIN (
        SELECT
            *
        FROM
            argus.v_case_event cp
        WHERE
            deleted IS NULL
    ) ce ON cm.case_id = ce.case_id
    LEFT JOIN (
        SELECT
            *
        FROM
            "ARGUS".v_case_event_nature vcen
        WHERE
            vcen.deleted IS NULL
    ) vcen ON ce.case_id = vcen.case_id
              AND ce.seq_num = vcen.event_seq_num','SELECT
    dcen.case_id,
    dcen.event_seq_num
FROM
    &MARTUSERNAME..dm_case_event_nature dcen
WHERE
    dcen.event_seq_num > 0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_REPORTERS','DM_CASE_DATA','C_PRIM_REPORTER_OCCUPATION, C_PRIM_REPORTER_HCP_FLAG_DESC, C_PRIM_REPORTER_TYPE, C_PRIM_REPORTER_COUNTRY, C_PRIM_REPORTER_NAME, C_PRIM_REPORTER_INSTITUTE, C_PRIM_REPORTER_OCCUPATION_J, C_PRIM_REPORTER_HCP_FLAG_DES_J, C_PRIM_REPORTER_TYPE_J, C_PRIM_REPORTER_COUNTRY_J, C_PRIM_REPORTER_NAME_J, C_PRIM_REPORTER_INSTITUTE_J, CSV_ALL_REPORTER_NAME',null,null,null,null,TO_CLOB(q'{SELECT
     vcm.case_id,
    pr.primary_reporter_occupation,
    pr.primary_hcp_flag,
    pr.primary_reporter_type,
    pr.primary_reporter_country,
    pr.primary_reporter_name,
    pr.primary_reporter_occupation_j,
    pr.primary_hcp_flag_j,
    pr.primary_reporter_type_j,
    pr.primary_reporter_country_j,
    pr.primary_reporter_name_j,
 COALESCE(ar.all_reporter_names, '') AS all_reporter_names
FROM (
    SELECT DISTINCT
    vcr.case_id,
    lo.occupation AS primary_reporter_occupation,
    }') || TO_CLOB(q'{lh.hcp AS primary_hcp_flag,
    lrt.reporter_type AS primary_reporter_type,
    lc.country AS primary_reporter_country,
    CASE 
        WHEN COALESCE(vcr.first_name, MAX(CASE WHEN vcnf.field_id = 3950013 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)) IS NOT NULL 
        THEN COALESCE(vcr.first_name, MAX(CASE WHEN vcnf.field_id = 3950013 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)) 
             || CASE 
                 WHEN COALESCE(vcr.last_name, MAX(CASE WHEN vcnf.field_id = }') || TO_CLOB(q'{3950016 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)) IS NOT NULL 
                 THEN ' - ' || COALESCE(vcr.last_name, MAX(CASE WHEN vcnf.field_id = 3950016 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)) 
                 ELSE  ''               
             END
             ELSE COALESCE(RTRIM(vcr.last_name,'-'), MAX(CASE WHEN vcnf.field_id = 3950016 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END))
    END AS primary_reporter_name,
    lo.occupation_j AS primary_reporter_occ}') || TO_CLOB(q'{upation_j,
    lh.hcp_j AS primary_hcp_flag_j,
    lrt.reporter_type_j AS primary_reporter_type_j,
    lc.country_j AS primary_reporter_country_j,
   CASE 
        WHEN COALESCE(vcr.first_name_j, MAX(CASE WHEN vcnf.field_id = 3950013 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)) IS NOT NULL 
        THEN COALESCE(vcr.first_name_j, MAX(CASE WHEN vcnf.field_id = 3950013 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)) 
             || CASE 
                 WHEN COALESCE(vcr.last_name_j}') || TO_CLOB(q'{, MAX(CASE WHEN vcnf.field_id = 3950016 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)) IS NOT NULL 
                 THEN ' - ' || COALESCE(vcr.last_name_j, MAX(CASE WHEN vcnf.field_id = 3950016 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END)) 
                 ELSE ''
             END
             ELSE COALESCE(vcr.last_name_j, MAX(CASE WHEN vcnf.field_id = 3950016 THEN '[NF:' || vcnf.c_null_flavor_value || ']' END))
    END AS primary_reporter_name_j
FROM 

    argus.v_case_reporters}') || TO_CLOB(q'{ vcr, &MARTUSERNAME..DM_CASE_NULL_FLAVOR vcnf ,argus.v_lm_occupations lo , argus.v_lm_hcp lh, argus.v_lm_reporter_type lrt, argus.v_lm_countries lc
WHERE 
  vcr.case_id = vcnf.case_id(+)
   AND vcr.seq_num = vcnf.seq_num(+)
   AND vcr.occupation_id = lo.occupation_id(+)
   AND vcr.hcp_flag = lh.hcp_id(+)
   AND vcr.reporter_type = lrt.rptr_type_id(+)
   AND vcr.country_id = lc.country_id(+)
    AND vcr.primary_contact = 1 
    AND vcr.deleted IS NULL 
GROUP BY 
    vcr.case_id, lo.occupation,}') || TO_CLOB(q'{ lh.hcp, lrt.reporter_type, lc.country, 
    vcr.first_name, vcr.last_name, lo.occupation_j, lh.hcp_j, 
    lrt.reporter_type_j, lc.country_j, vcr.first_name_j, vcr.last_name_j


) pr, (
    SELECT
    case_id,
    LISTAGG(
        COALESCE(first_name, '') || 
        CASE 
            WHEN first_name IS NOT NULL AND last_name IS NOT NULL THEN ' - ' 
            ELSE '' 
        END || 
        COALESCE(last_name, ''), ', ') 
        WITHIN GROUP (ORDER BY case_id, seq_num) AS all_reporter_names}') || TO_CLOB(q'{
FROM argus.v_case_reporters
WHERE deleted IS NULL
GROUP BY case_id
) ar, Argus.v_case_master vcm
where 
vcm.case_id=pr.case_id(+)
and vcm.case_id = ar.case_id(+)
and pr.case_id = ar.case_id(+)
and vcm.case_id<>-1 COALESCE(     
        (CASE
        WHEN LENGTH(CPIN.SPLIT_NOTES) > 3997 THEN
            SUBSTR(REPLACE(REPLACE(CPIN.SPLIT_NOTES, CHR(10), ''), CHR(13), ''), 1, 3997) || '…'
        ELSE
            REPLACE(REPLACE(CPIN.SPLIT_NOTES, CHR(10), ''), CHR(13), '')
    END ),  MAX(CASE WHE}') || TO_CLOB(q'{N VCNF.FIELD_ID = 2950079 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END))
    AS  C_NOTES,
    COALESCE(
        VCPI.COUNTY,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950088 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS COUNTY,
	COALESCE(
        VCPI.EMAIL,
        MAX(CASE WHEN VCNF.FIELD_ID = 2950090 THEN '[NF:' || VCNF.C_NULL_FLAVOR_VALUE || ']' END)
    )
    AS EMAIL,
  CASE
        WHEN VCPI.PAT_STAT_PREG = 1 THEN 'YES'
        WHEN   VCPI.CASE_ID IS NOT NULL THEN 'N}') || TO_CLOB(q'{O'
        ELSE NULL
   END AS PREGNANT_J,
    CASE
         WHEN VCPI.CONFIDENTIAL = 1 THEN 'YES'
        WHEN  VCPI.CASE_ID IS NOT NULL THEN 'NO'
        ELSE NULL
   END AS CONFIDENTIAL_J,
    CASE
         WHEN VCPI.CHILD_ONLY = 1 THEN 'YES'
         WHEN  VCPI.CASE_ID IS NOT NULL THEN 'NO'
         ELSE NULL
  END  AS CHILD_ONLY_J,

        CASE
            WHEN LENGTH(CPINJ.SPLIT_NOTES) > 3997 THEN
                SUBSTR(CPINJ.SPLIT_NOTES, 1, 3997) || '…'
            ELSE
                C}') || TO_CLOB(q'{PINJ.SPLIT_NOTES
        END 
      AS NOTES_J
FROM ARGUS.V_CASE_PAT_INFO VCPI, (SELECT * FROM &MARTUSERNAME..DM_CASE_NULL_FLAVOR where case_id in (select case_id from ARGUS.V_CASE_PAT_INFO where deleted is null) ) VCNF, ( SELECT * FROM  ARGUS.V_CASE_PAT_INFO_CLOB_NOTES_J 
     WHERE  TEXT_ORDER = 1) CPINJ, ( SELECT * FROM  ARGUS.V_CASE_PAT_INFO_CLOB_NOTES
     WHERE  TEXT_ORDER = 1) CPIN, ARGUS.V_CASE_MASTER VCM
     WHERE VCPI.DELETED IS NULL
     AND VCM.CASE_ID=VCPI.CASE_ID(+)
     AND VC}') || TO_CLOB(q'{M.CASE_ID<>-1
AND VCM.CASE_ID = VCNF.CASE_ID (+)
 AND VCM.CASE_ID = CPINJ.CASE_ID(+)
 AND VCM.CASE_ID = CPIN.CASE_ID(+)

 GROUP BY VCM.CASE_ID, VCPI.CASE_ID, VCPI.TITLE, VCPI.PAT_INITIALS, VCPI.PAT_FIRSTNAME,
 VCPI.PAT_MI,VCPI.PAT_LASTNAME,VCPI.PAT_ADDRESS,VCPI.ADDRESS_2 , 
 VCPI.PAT_CITY, VCPI.PAT_STATE , VCPI.PAT_POSTAL_CODE , VCPI.PAT_PHONE ,VCPI.PAT_DOB_PARTIAL,
 VCPI.AGE_UNIT_ID,VCPI.PAT_AGE , VCPI.PAT_STAT_PREG, 
 VCPI.CONFIDENTIAL, VCPI.CHILD_ONLY ,CPIN.SPLIT_NOTES,VCPI.COUNTY, VCPI.EMAIL}') || TO_CLOB(q'{, CPINJ.SPLIT_NOTES}'),'SELECT
CASE_ID,
C_PRIM_REPORTER_OCCUPATION,
C_PRIM_REPORTER_HCP_FLAG_DESC,
C_PRIM_REPORTER_TYPE,
C_PRIM_REPORTER_COUNTRY,
C_PRIM_REPORTER_NAME,
C_PRIM_REPORTER_OCCUPATION_J,
C_PRIM_REPORTER_HCP_FLAG_DES_J,
C_PRIM_REPORTER_TYPE_J,
C_PRIM_REPORTER_COUNTRY_J,
C_PRIM_REPORTER_NAME_J,
TO_CHAR(CSV_ALL_REPORTER_NAME)
FROM &MARTUSERNAME..DM_CASE_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_FOLLOWUP','DM_CASE_DATA','C_INITIAL_FOLLOWUP_FLAG, CSV_RECEIPT_DATE, CSV_RECEIPT_DATE_S_NS, C_LAT_FOLLOWUP_NUM, C_LAT_SIGNIFICANT_FLAG, CSV_SAFETY_RECEIPT_DATE, CSV_SIGN_FUP_RCVD_DATE, CSV_SIGN_RECEIPT_DATE, CSV_SIGN_SAFETY_RECEIPT_DATE, C_LATEST_RCPT_DATE, C_LATEST_SFTY_RCPT_DATE, C_LATEST_SGNFT_RECEIPT_DATE, C_LTST_SGNFT_SFTY_RCPT_DATE, CSV_RECEIPT_DATE_J, CSV_SAFETY_RECEIPT_DATE_J, CSV_SIGN_FUP_RCVD_DATE_J, CSV_SIGN_RECEIPT_DATE_J, CSV_SIGN_SAFETY_RECEIPT_DATE_J, C_LATEST_RCPT_DATE_J, C_LATEST_SFTY_RCPT_DATE_J, C_LTST_SGNFT_SFTY_RCPT_DATE_J',null,null,null,null,TO_CLOB(q'{SELECT
    VCM.CASE_ID,
    CASE 
        WHEN MAX(VCF.ROW_NUMBER) IS NULL THEN 'I'
        ELSE 'F/U(' || MAX(VCF.ROW_NUMBER) || ')' 
    END AS C_INITIAL_FOLLOWUP_FLAG,
CASE WHEN VCM.INIT_REPT_DATE IS NOT NULL THEN 
   TO_CHAR(VCM.INIT_REPT_DATE, 'DD-MON-YYYY') || '(I)' ||  
    LISTAGG(
        CASE 
            WHEN VCF.ROW_NUMBER IS NOT NULL THEN  
                ', ' || TO_CHAR(VCF.RECEIPT_DATE, 'DD-MON-YYYY') || '(FU' || VCF.ROW_NUMBER || ')'
        END
    ) WITHIN GROUP (ORDER BY VCF.}') || TO_CLOB(q'{ROW_NUMBER) END AS CSV_RECEIPT_DATE,

CASE WHEN VCM.INIT_REPT_DATE IS NOT NULL THEN 
    TO_CHAR(VCM.INIT_REPT_DATE, 'DD-MON-YYYY') || '(I)' ||  
    LISTAGG(
        CASE 
            WHEN VCF.ROW_NUMBER IS NOT NULL THEN  
                ', ' || TO_CHAR(VCF.RECEIPT_DATE, 'DD-MON-YYYY') || '(' || 
                DECODE(VCF.SIGNIFICANT, 1, 'S', 0, 'NS') || ' FU' || VCF.ROW_NUMBER || ')'
        END
    ) WITHIN GROUP (ORDER BY VCF.ROW_NUMBER) END AS CSV_RECEIPT_DATE_S_NS,

    MAX(VCF.SEQ_NUM) }') || TO_CLOB(q'{AS C_LAT_FOLLOWUP_NUM,

    CASE 
        WHEN MAX(VCF.ROW_NUMBER) IS NULL THEN 1
        ELSE MAX(LF.LATEST_SIGNIFICANT)
    END AS C_LAT_SIGNIFICANT_FLAG,
    CASE WHEN VCM.SAFETY_DATE IS NOT NULL THEN TO_CHAR(VCM.SAFETY_DATE, 'DD-MON-YYYY') || '(I)' ||  
    LISTAGG(
        CASE 
            WHEN VCF.ROW_NUMBER IS NOT NULL AND VCF.SAFETY_DATE IS NOT NULL THEN  
                ', ' || TO_CHAR(VCF.SAFETY_DATE, 'DD-MON-YYYY') || '(FU' || VCF.ROW_NUMBER || ')'
        END
    ) WITHIN GROUP (OR}') || TO_CLOB(q'{DER BY VCF.ROW_NUMBER) END AS CSV_SAFETY_RECEIPT_DATE,
       LISTAGG(
        CASE 
            WHEN VCF.ROW_NUMBER IS NOT NULL and VCF.SIGNIFICANT=1 THEN  
                  TO_CHAR(VCF.RECEIPT_DATE, 'DD-MON-YYYY') || '(FU' || VCF.ROW_NUMBER || ')'
        END,', ' 
    ) WITHIN GROUP (ORDER BY VCF.ROW_NUMBER) AS CSV_SIGN_FUP_RCVD_DATE,
    CASE WHEN VCM.INIT_REPT_DATE IS NOT NULL THEN 
    TO_CHAR(VCM.INIT_REPT_DATE, 'DD-MON-YYYY') || '(I)' ||  
    LISTAGG(
        CASE 
            WHEN VCF}') || TO_CLOB(q'{.ROW_NUMBER IS NOT NULL and VCF.SIGNIFICANT=1 THEN  
              ', ' ||   TO_CHAR(VCF.RECEIPT_DATE,'DD-MON-YYYY') || '(FU' || VCF.ROW_NUMBER || ')'
        END
    ) WITHIN GROUP (ORDER BY VCF.ROW_NUMBER) END AS CSV_SIGN_RECEIPT_DATE,
   CASE WHEN VCM.SAFETY_DATE IS NOT NULL THEN
   TO_CHAR(VCM.SAFETY_DATE, 'DD-MON-YYYY') || '(I)' ||  
    LISTAGG(
        CASE 
            WHEN VCF.ROW_NUMBER IS NOT NULL and VCF.SIGNIFICANT=1 and VCF.SAFETY_DATE is not null THEN  
                ', ' || TO_}') || TO_CLOB(q'{CHAR(VCF.SAFETY_DATE, 'DD-MON-YYYY') || '(FU' || VCF.ROW_NUMBER || ')'
        END
    ) WITHIN GROUP (ORDER BY VCF.ROW_NUMBER) END AS CSV_SIGN_SAFETY_RECEIPT_DATE,
    CASE WHEN MAX(VCF.ROW_NUMBER) IS NULL OR LF.LATEST_RECEIPT_DATE IS NULL OR GREATEST(VCM.INIT_REPT_DATE,LF.LATEST_RECEIPT_DATE)=VCM.INIT_REPT_DATE THEN  
    TO_CHAR(VCM.INIT_REPT_DATE)
    ELSE TO_CHAR(LF.LATEST_RECEIPT_DATE) END AS C_LATEST_RCPT_DATE,
      CASE WHEN MAX(VCF.ROW_NUMBER) IS NULL OR LF.LATEST_SAFETY_DATE IS NULL O}') || TO_CLOB(q'{R GREATEST(VCM.SAFETY_DATE,LF.LATEST_SAFETY_DATE)= VCM.SAFETY_DATE THEN  
    TO_CHAR(VCM.SAFETY_DATE)
    ELSE TO_CHAR(LF.LATEST_SAFETY_DATE) END AS C_LATEST_SFTY_RCPT_DATE,
    CASE 
        WHEN MAX(VCF.ROW_NUMBER) IS NULL OR LF.LATEST_SIGNIFICANT_RECEIPT_DATE IS NULL OR GREATEST(VCM.INIT_REPT_DATE,LF.LATEST_SIGNIFICANT_RECEIPT_DATE)= VCM.INIT_REPT_DATE THEN TO_CHAR(VCM.INIT_REPT_DATE)
        ELSE TO_CHAR(LF.LATEST_SIGNIFICANT_RECEIPT_DATE)
    END AS C_LATEST_SGNFT_RECEIPT_DATE,
    CASE 
 }') || TO_CLOB(q'{       WHEN MAX(VCF.ROW_NUMBER) IS NULL OR LF.LATEST_SIGNIFICANT_SAFETY_DATE IS NULL OR GREATEST(VCM.SAFETY_DATE,LF.LATEST_SIGNIFICANT_SAFETY_DATE)=VCM.SAFETY_DATE  THEN TO_CHAR(VCM.SAFETY_DATE)
        ELSE TO_CHAR(LF.LATEST_SIGNIFICANT_SAFETY_DATE)
    END AS C_LTST_SGNFT_SFTY_RCPT_DATE, CASE WHEN VCM.INIT_REPT_DATE_J is not null THEN
      TO_CHAR(VCM.INIT_REPT_DATE_J, 'DD-MON-YYYY') || '(I)' ||  
      LISTAGG(
        CASE 
            WHEN VCF.ROW_NUMBER IS NOT NULL and VCF.RECEIPT_DATE_J }') || TO_CLOB(q'{IS NOT NULL  THEN  
                ', ' || TO_CHAR(VCF.RECEIPT_DATE_J, 'DD-MON-YYYY') || '(FU' || VCF.ROW_NUMBER || ')'
        END
    ) WITHIN GROUP (ORDER BY VCF.ROW_NUMBER) END AS CSV_RECEIPT_DATE_J, 
    CASE WHEN VCM.SAFETY_DATE IS NOT NULL THEN
    TO_CHAR(VCM.SAFETY_DATE, 'DD-MON-YYYY') || '(I)' ||  
    LISTAGG(
        CASE 
            WHEN VCF.ROW_NUMBER IS NOT NULL and VCF.SAFETY_DATE is not null THEN  
                ', ' || TO_CHAR(VCF.SAFETY_DATE, 'DD-MON-YYYY') || '(FU' || VCF}') || TO_CLOB(q'{.ROW_NUMBER || ')'
        END
    ) WITHIN GROUP (ORDER BY VCF.ROW_NUMBER) END AS CSV_SAFETY_RECEIPT_DATE_J,LISTAGG(
        CASE 
            WHEN VCF.ROW_NUMBER IS NOT NULL and VCF.SIGNIFICANT=1 and VCF.RECEIPT_DATE_J IS NOT NULL THEN  
                 TO_CHAR(VCF.RECEIPT_DATE_J,'DD-MON-YYYY') || '(FU' || VCF.ROW_NUMBER || ')'
        END,', ' 
    ) WITHIN GROUP (ORDER BY VCF.ROW_NUMBER) AS CSV_SIGN_FUP_RCVD_DATE_J,

CASE WHEN VCM.INIT_REPT_DATE_J is not null THEN
TO_CHAR(VCM.INIT_REPT_DATE}') || TO_CLOB(q'{_J, 'DD-MON-YYYY') || '(I)' || 
    LISTAGG(
        CASE 
            WHEN VCF.ROW_NUMBER IS NOT NULL and VCF.SIGNIFICANT=1 and VCF.RECEIPT_DATE_J IS NOT NULL THEN  
              ', ' ||   TO_CHAR(VCF.RECEIPT_DATE_J,'DD-MON-YYYY') || '(FU' || VCF.ROW_NUMBER || ')'
        END
    ) WITHIN GROUP (ORDER BY VCF.ROW_NUMBER) END AS CSV_SIGN_RECEIPT_DATE_J,
    CASE WHEN VCM.SAFETY_DATE IS NOT NULL THEN
    TO_CHAR(VCM.SAFETY_DATE, 'DD-MON-YYYY') || '(I)' ||  
    LISTAGG(
        CASE 
            }') || TO_CLOB(q'{WHEN VCF.ROW_NUMBER IS NOT NULL and VCF.SIGNIFICANT=1 and VCF.SAFETY_DATE is not null THEN  
                ', ' || TO_CHAR(VCF.SAFETY_DATE, 'DD-MON-YYYY') || '(FU' || VCF.ROW_NUMBER || ')'
        END
    ) WITHIN GROUP (ORDER BY VCF.ROW_NUMBER) END AS CSV_SIGN_SAFETY_RECEIPT_DATE_J,
    CASE WHEN MAX(VCF.ROW_NUMBER) IS NULL OR MAX(VCF.RECEIPT_DATE_J)   IS  NULL OR MAX(GREATEST(VCM.INIT_REPT_DATE_J,LF.LATEST_RECEIPT_DATE_J))=VCM.INIT_REPT_DATE_J THEN  
    TO_CHAR(VCM.INIT_REPT_DATE_J)
    ELS}') || TO_CLOB(q'{E TO_CHAR(MAX(VCF.RECEIPT_DATE_J)) END AS C_LATEST_RCPT_DATE_J,
    CASE WHEN MAX(VCF.ROW_NUMBER) IS NULL  OR  LF.LATEST_SAFETY_DATE IS NULL OR MAX(GREATEST(VCM.SAFETY_DATE,LF.LATEST_SAFETY_DATE)) = VCM.SAFETY_DATE THEN  
    TO_CHAR(VCM.SAFETY_DATE)
    ELSE TO_CHAR(MAX(VCF.SAFETY_DATE)) END AS C_LATEST_SFTY_RCPT_DATE_J,
    CASE 
        WHEN MAX(VCF.ROW_NUMBER) IS NULL OR LF.LATEST_SIGNIFICANT_SAFETY_DATE IS NULL  OR GREATEST(VCM.SAFETY_DATE,LF.LATEST_SIGNIFICANT_SAFETY_DATE) = VCM.SAFETY_DAT}') || TO_CLOB(q'{E THEN TO_CHAR(VCM.SAFETY_DATE)
        ELSE TO_CHAR(LF.LATEST_SIGNIFICANT_SAFETY_DATE)
    END AS C_LTST_SGNFT_SFTY_RCPT_DATE_J

FROM 
   ARGUS.V_CASE_MASTER VCM
LEFT JOIN 
    (SELECT 
         CASE_ID, SEQ_NUM, RECEIPT_DATE, SIGNIFICANT, SAFETY_DATE, RECEIPT_DATE_J,
         ROW_NUMBER() OVER (PARTITION BY CASE_ID ORDER BY SEQ_NUM) AS ROW_NUMBER 
     FROM 
         ARGUS.V_CASE_FOLLOWUP 
     WHERE 
         DELETED IS NULL 
    ) VCF 
ON 
    VCM.CASE_ID = VCF.CASE_ID LEFT JOIN 
     (
    }') || TO_CLOB(q'{SELECT 
    CASE_ID,
    MAX(SEQ_NUM) AS LATEST_SEQ_NUM,
    MAX(ROW_NUMBER) AS LATEST_ROW_NUMBER,
    MAX(SIGNIFICANT) KEEP (DENSE_RANK LAST ORDER BY SEQ_NUM) AS LATEST_SIGNIFICANT,
    MAX(RECEIPT_DATE) AS LATEST_RECEIPT_DATE,
    MAX(RECEIPT_DATE_J) AS LATEST_RECEIPT_DATE_J,
    MAX(SAFETY_DATE) AS LATEST_SAFETY_DATE,
    (SELECT MAX(RECEIPT_DATE) 
     FROM ARGUS.V_CASE_FOLLOWUP
     WHERE CASE_ID = CF.CASE_ID 
       AND SIGNIFICANT = 1 
       AND DELETED IS NULL 
    ) AS LATEST_SIGNIFICA}') || TO_CLOB(q'{NT_RECEIPT_DATE,
     (SELECT MAX(SAFETY_DATE)
     FROM ARGUS.V_CASE_FOLLOWUP
     WHERE CASE_ID = CF.CASE_ID 
       AND SIGNIFICANT = 1 
       AND SAFETY_DATE IS NOT NULL 
       AND DELETED IS NULL ) AS LATEST_SIGNIFICANT_SAFETY_DATE 
FROM 
    (SELECT 
         CASE_ID, SEQ_NUM, RECEIPT_DATE, RECEIPT_DATE_J,SIGNIFICANT,SAFETY_DATE,
         ROW_NUMBER() OVER (PARTITION BY CASE_ID ORDER BY SEQ_NUM) AS ROW_NUMBER
     FROM 
         ARGUS.V_CASE_FOLLOWUP
     WHERE 
         DELETED IS NULL }') || TO_CLOB(q'{
    ) CF
GROUP BY CASE_ID
)  LF
ON 
    VCM.CASE_ID = LF.CASE_ID
WHERE 
    VCM.DELETED IS NULL 
    AND VCM.CASE_ID <> -1
    GROUP BY 
    VCM.CASE_ID, VCM.INIT_REPT_DATE, VCM.SAFETY_DATE,LF.LATEST_RECEIPT_DATE,LF.LATEST_SAFETY_DATE, LF.LATEST_SIGNIFICANT, LF.LATEST_SIGNIFICANT_RECEIPT_DATE, LF.LATEST_SIGNIFICANT_SAFETY_DATE,  VCM.INIT_REPT_DATE_J}'),TO_CLOB(q'{SELECT

CASE_ID,
C_INITIAL_FOLLOWUP_FLAG,
CSV_RECEIPT_DATE,
CSV_RECEIPT_DATE_S_NS,
C_LAT_FOLLOWUP_NUM,
C_LAT_SIGNIFICANT_FLAG,
CSV_SAFETY_RECEIPT_DATE,
CSV_SIGN_FUP_RCVD_DATE,
CSV_SIGN_RECEIPT_DATE,
CSV_SIGN_SAFETY_RECEIPT_DATE,
TO_CHAR(C_LATEST_RCPT_DATE),
TO_CHAR(C_LATEST_SFTY_RCPT_DATE),
TO_CHAR(C_LATEST_SGNFT_RECEIPT_DATE),
TO_CHAR(C_LTST_SGNFT_SFTY_RCPT_DATE),
CSV_RECEIPT_DATE_J,
CSV_SAFETY_RECEIPT_DATE_J,
CSV_SIGN_FUP_RCVD_DATE_J,
CSV_SIGN_RECEIPT_DATE_J,
CSV_SIGN_SAFETY_RECEIPT_DATE_J,
TO}') || TO_CLOB(q'{_CHAR(C_LATEST_RCPT_DATE_J),
TO_CHAR(C_LATEST_SFTY_RCPT_DATE_J),
TO_CHAR(C_LTST_SGNFT_SFTY_RCPT_DATE_J)
from &MARTUSERNAME..DM_CASE_DATA}'));
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_EVENT_DETAIL','DM_CASE_DATA','LF_BLI_SUSP_PROD_DECH_RES, LF_BLI_SUSP_PROD_RECH_RES, LF_SUSP_PROD_DECH_RESULT, LF_SUSP_PROD_RECH_RESULT',null,null,null,null,TO_CLOB(q'{SELECT  VCM.CASE_ID,
  RTRIM(DBMS_LOB.SUBSTR(XMLCAST(XMLAGG(XMLELEMENT(E, CASE WHEN cp.c_blinded_product_name IS NOT NULL AND cped.c_dechallenge IS NOT NULL
    THEN cp.c_blinded_product_name||' - '||CE.PREF_TERM||' - ' END||cped.c_dechallenge||CHR(10))
    .EXTRACT('//text()') ORDER BY cp.sort_id , ce.sort_id) AS CLOB), 4000, 1),CHR(10)) AS lf_bli_susp_prod_dech_res,
RTRIM(DBMS_LOB.SUBSTR(XMLCAST(XMLAGG(XMLELEMENT(E,CASE WHEN cp.c_blinded_product_name IS NOT NULL AND cped.c_rechallenge IS NOT N}') || TO_CLOB(q'{ULL THEN cp.c_blinded_product_name||' - '||PREF_TERM||' - ' END||cped.c_rechallenge||CHR(10)).EXTRACT('//text()') ORDER BY cp.sort_id , ce.sort_id) AS CLOB), 4000, 1),CHR(10)) lf_bli_susp_prod_rech_res, 
RTRIM(DBMS_LOB.SUBSTR(XMLCAST(XMLAGG(XMLELEMENT(E,CASE WHEN cp.c_configured_product IS NOT NULL AND cped.c_dechallenge IS NOT NULL THEN cp.c_configured_product||' - '||PREF_TERM||' - ' END||cped.c_dechallenge||CHR(10)).EXTRACT('//text()') ORDER BY cp.sort_id , ce.sort_id) AS CLOB), 4000, 1),CHR(}') || TO_CLOB(q'{10)) lf_susp_prod_dech_result,
RTRIM(DBMS_LOB.SUBSTR(XMLCAST(XMLAGG(XMLELEMENT(E,CASE WHEN cp.c_configured_product IS NOT NULL AND cped.c_rechallenge IS NOT NULL THEN cp.c_configured_product||' - '||PREF_TERM||' - ' END||cped.c_rechallenge||CHR(10)).EXTRACT('//text()') ORDER BY cp.sort_id , ce.sort_id) AS CLOB), 4000, 1),CHR(10)) lf_susp_prod_rech_result
FROM 
  &MARTUSERNAME..DM_CASE_PRODUCT CP, 
  &MARTUSERNAME..DM_CASE_EVENT CE, 
  &MARTUSERNAME..DM_CASE_PROD_EVT_DETAIL CPED, ARGUS.V}') || TO_CLOB(q'{_CASE_MASTER VCM
WHERE 
  VCM.CASE_ID=CPED.CASE_ID(+)
  AND CPED.CASE_ID = CP.CASE_ID(+)
  AND CPED.PROD_SEQ_NUM = CP.SEQ_NUM(+)
  AND CPED.CASE_ID = CE.CASE_ID(+)
  AND CPED.EVENT_SEQ_NUM = CE.SEQ_NUM(+)
  AND VCM.CASE_ID<>-1
GROUP BY 
  VCM.CASE_ID}'),'SELECT  CASE_ID,
  RTRIM(DBMS_LOB.SUBSTR(LF_BLI_SUSP_PROD_DECH_RES, 4000, 1),CHR(10)) AS LF_BLI_SUSP_PROD_DECH_RES,
  RTRIM(DBMS_LOB.SUBSTR(LF_BLI_SUSP_PROD_RECH_RES,4000, 1),CHR(10)) AS LF_BLI_SUSP_PROD_RECH_RES,
 RTRIM(DBMS_LOB.SUBSTR(LF_SUSP_PROD_DECH_RESULT,4000, 1),CHR(10)) AS LF_SUSP_PROD_DECH_RESULT,
RTRIM(DBMS_LOB.SUBSTR(LF_SUSP_PROD_RECH_RESULT,4000, 1),CHR(10)) AS LF_SUSP_PROD_RECH_RESULT
FROM 
  &MARTUSERNAME..DM_CASE_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_EVENT_ASSESS','DM_CASE_DATA','CASE_ID, C_LISTEDNESS_ALL_DATASHEET, C_LISTEDNESS_CORE, C_LISTEDNESS_IB, C_LISTEDNESS_JPPI, C_LISTEDNESS_SMPC, C_LISTEDNESS_USPI, C_LISTEDNESS_CANADA, C_LISTEDNESS_CHINA, C_REPORTED_CAUSALITY_VALUE, C_DETERMINED_CAUSALITY_VALUE',null,null,null,null,TO_CLOB(q'{
select 
     cm.case_id,
     decode(max(decode(c_det_listedness_id,3,99,2,100,1,98)),99,'Unknown',100,'Unlisted',98,'Listed') as C_LISTEDNESS_ALL_DATASHEET,
	 decode(max(decode(C_det_LISTEDNESS_id_core,3,99,2,100,1,98)),99,'Unknown',100,'Unlisted',98,'Listed')as C_LISTEDNESS_CORE,
	 decode(max(decode(C_det_LISTEDNESS_id_ib,3,99,2,100,1,98)),99,'Unknown',100,'Unlisted',98,'Listed')as C_LISTEDNESS_IB ,
	 decode(max(decode(C_det_LISTEDNESS_id_jppi,3,99,2,100,1,98)),99,'Unknown',100,'Unlisted',98,}') || TO_CLOB(q'{'Listed')as C_LISTEDNESS_JPPI,
	 decode(max(decode(C_det_LISTEDNESS_id_smpc,3,99,2,100,1,98)),99,'Unknown',100,'Unlisted',98,'Listed')as C_LISTEDNESS_SMPC,
	 decode(max(decode(C_det_LISTEDNESS_id_uspi,3,99,2,100,1,98)),99,'Unknown',100,'Unlisted',98,'Listed')as C_LISTEDNESS_USPI,
	 decode(max(decode(C_det_LISTEDNESS_id_canada,3,99,2,100,1,98)),99,'Unknown',100,'Unlisted',98,'Listed')as C_LISTEDNESS_CANADA,
	 decode(max(decode(C_det_LISTEDNESS_id_china,3,99,2,100,1,98)),99,'Unknown',100,'Unlisted}') || TO_CLOB(q'{',98,'Listed')as C_LISTEDNESS_CHINA,
      	 decode(max(decode(C_CAUSALITY_REPT,'Yes',21,'Related',20,'Definitely Related',19,'Almost Certain',18,
                      'Possible',17,'Possible Related',16,'Possibly Related',15,'Probably Related',14,'Probable',13,
					   'Unknown',12,'Not Reported',11,'Not Provided',10,'ICH Default',9,'Possibly Unrelated',8,
					   'Unlikely Related',7,'Unrelated',6,'Unlikely',5,'Not Related',4,'None',3,'NA',2,'No',1)),
					   21,'Yes',20,'Related',19,'Definit}') || TO_CLOB(q'{ely Related',18,'Almost Certain',17,'Possible',16,'Possible Related',
					   15,'Possibly Related',14,'Probably Related',13,'Probable',12,'Unknown',11,'Not Reported',10,'Not Provided',
					   9,'ICH Default',8,'Possibly Unrelated',7,'Unlikely Related',6,'Unrelated',5,'Unlikely',
					   4,'Not Related',3,'None',2,'NA',1,'No') as C_REPORTED_CAUSALITY_VALUE,
	 decode(max(decode(c_det_causality,'Yes',21,'Related',20,'Definitely Related',19,'Almost Certain',18,
                      'Possible',17,}') || TO_CLOB(q'{'Possible Related',16,'Possibly Related',15,'Probably Related',14,'Probable',13,
					   'Unknown',12,'Not Reported',11,'Not Provided',10,'ICH Default',9,'Possibly Unrelated',8,
					   'Unlikely Related',7,'Unrelated',6,'Unlikely',5,'Not Related',4,'None',3,'NA',2,'No',1)),
					   21,'Yes',20,'Related',19,'Definitely Related',18,'Almost Certain',17,'Possible',16,'Possible Related',
					   15,'Possibly Related',14,'Probably Related',13,'Probable',12,'Unknown',11,'Not Reported',10,'Not Provided}') || TO_CLOB(q'{',
					   9,'ICH Default',8,'Possibly Unrelated',7,'Unlikely Related',6,'Unrelated',5,'Unlikely',
					   4,'Not Related',3,'None',2,'NA',1,'No') as C_DETERMINED_CAUSALITY_VALUE
from argus.case_master cm,
     &MARTUSERNAME..dm_case_prod_evt_detail cped
where cm.case_id = cped.case_id
group by cm.case_id}'),'select 
CASE_ID, C_LISTEDNESS_ALL_DATASHEET, C_LISTEDNESS_CORE, C_LISTEDNESS_IB, C_LISTEDNESS_JPPI, C_LISTEDNESS_SMPC, C_LISTEDNESS_USPI, C_LISTEDNESS_CANADA, C_LISTEDNESS_CHINA, C_REPORTED_CAUSALITY_VALUE, C_DETERMINED_CAUSALITY_VALUE
from &MARTUSERNAME..dm_case_data');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_EVENT','DM_CASE_DATA','lf_event_llt,       lf_event_pt,       lf_event_desc,       csv_ser_cr_all_event,       csv_serious_event_pt,       c_case_seriousness,       c_death_lt_flag,       c_death_flag,       lf_eve_onset_date_c,       lf_eve_outcome_c,       lf_eve_ser_criteria_c,       c_lack_of_eff,       c_life_threat_flag,       csv_outcome_desc,       c_primary_event_pt,       c_primary_event_soc,       c_susar_case,       lf_event_llt_j,       lf_event_pt_j,       csv_ser_cr_all_event_j,       csv_serious_event_pt_j,       c_case_seriousness_j,       c_death_flag_j,       csv_outcome_desc_j,       c_primary_event_pt_j,       c_primary_event_soc_j,       csv_evt_stop_date,       lf_evt_stop_date,       lf_onset_latency_seconds, lf_onset_latency, c_case_type,       lf_evt_intensity,       csv_fatal_event_pt',null,null,null,null,TO_CLOB(q'{SELECT case_id ,
       To_char ( Rtrim ( lf_event_llt , Chr ( 10 ) ) ) ,
       To_char ( Rtrim ( Substr ( lf_event_pt , 1 , 3000 ) , Chr ( 10 ) ) ) ,
       To_char ( Rtrim ( Substr ( lf_event_desc , 1 , 3000 ) , Chr ( 10 ) ) ) ,
       To_char ( Rtrim ( Substr ( csv_ser_cr_all_event , 1 , 3000 ) , ', ' ) ) ,
       To_char ( Rtrim ( Substr ( csv_serious_event_pt , 1 , 3000 ) , ', ' ) ) ,
       c_case_seriousness ,
       rtrim(c_death_lt_flag,', ') ,
       rtrim(c_death_flag ,', '),
       }') || TO_CLOB(q'{To_char ( Rtrim ( Substr ( lf_eve_onset_date_c , 1 , 3000 ) , Chr ( 10 ) ) ) ,
       To_char ( Rtrim ( Substr ( lf_eve_outcome_c , 1 , 3000 ) , Chr ( 10 ) ) ) ,
       To_char ( Rtrim ( Substr ( lf_eve_ser_criteria_c , 1 , 3000 ) , Chr ( 10 ) ) ) ,
       c_lack_of_eff ,
       c_life_threat_flag ,
       To_char ( Rtrim ( Substr ( csv_outcome_desc , 1 , 3000 ) , ', ' ) ) ,
       c_primary_event_pt ,
       c_primary_event_soc ,
       c_susar_case ,
       To_char ( Rtrim ( Substr ( lf_event_}') || TO_CLOB(q'{llt_j , 1 , 3000 ) , Chr ( 10 ) ) ) ,
       To_char ( Rtrim ( Substr ( lf_event_pt_j , 1 , 3000 ) , Chr ( 10 ) ) ) ,
       To_char ( Rtrim ( Substr ( csv_ser_cr_all_event_j , 1 , 3000 ) , ', ' ) ) ,
       To_char ( Rtrim ( Substr ( csv_serious_event_pt_j , 1 , 3000 ) , ', ' ) ) ,
       c_case_seriousness_j ,
       c_death_flag_j ,
       To_char ( Rtrim ( Substr ( csv_outcome_desc_j , 1 , 3000 ) , ', ' ) ) ,
       c_primary_event_pt_j ,
       c_primary_event_soc_j ,
       To_char ( Rtrim}') || TO_CLOB(q'{ ( Substr ( csv_evt_stop_date , 1 , 3000 ) , ', ' ) ) ,
       To_char ( Rtrim ( Substr ( lf_evt_stop_date , 1 , 3000 ) , Chr ( 10 ) ) ) ,
       To_char ( Rtrim ( Substr ( lf_onset_latency_seconds , 1 , 3000 ) , Chr ( 10 ) ) ) ,
--       To_char ( Rtrim ( Substr ( lf_onset_latency , 1 , 3000 ) , Chr ( 10 ) ) ) ,
--       c_case_type ,
       To_char ( Rtrim ( Substr ( lf_evt_intensity , 1 , 3000 ) , Chr ( 10 ) ) ) ,
       To_char ( Rtrim ( Substr ( csv_fatal_event_pt , 1 , 3000 ) , ', ' ) )
FR}') || TO_CLOB(q'{OM   (
                SELECT   ce.case_id ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                                  WHEN inc_term IS NOT NULL THEN sort_id | | ') ' | | inc_term | | Chr ( 10 )
                         END ).extract ( '//text()' ) order BY sort_id ) AS clob ) lf_event_llt ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                                  WHEN pref_term IS NOT NULL THEN}') || TO_CLOB(q'{ sort_id | | ') ' | | pref_term | | chr ( 10 )
                         END ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) lf_event_pt ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                                  WHEN desc_reptd IS NOT NULL THEN sort_id | | ') ' | | desc_reptd | | chr ( 10 )
                         END ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) lf_event_desc , (
                         CASE
                    }') || TO_CLOB(q'{              WHEN SUM ( decode ( sc_death ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN 'Death, '
                         END | |
                         CASE
                                  WHEN SUM ( decode ( sc_hosp ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN 'Hospitalized, '
                         END | |
          }') || TO_CLOB(q'{               CASE
                                  WHEN SUM ( decode ( sc_threat ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN 'Life-threatening, '
                         END | |
                         CASE
                                  WHEN SUM ( decode ( sc_disable ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN 'Disa}') || TO_CLOB(q'{bility,'
                         END | |
                         CASE
                                  WHEN SUM ( decode ( med_serious ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN 'Medically Significant, '
                         END | |
                         CASE
                                  WHEN SUM ( decode ( sc_int_req ,
                                                     1 , 1 ,
              }') || TO_CLOB(q'{                                       0 ) ) > 0 THEN 'Intervention Required, '
                         END | |
                         CASE
                                  WHEN SUM ( decode ( sc_cong_anom ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN 'Congenital Anomaly, '
                         END | |
                         CASE
                                  WHEN SUM ( decode ( sc_other ,
        }') || TO_CLOB(q'{                                             1 , 1 ,
                                                     0 ) ) > 0 THEN 'Other: Medically Significant'
                         END ) csv_ser_cr_all_event ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                                  WHEN (
                                                    sc_other = 1
                                           OR       med_serious = 1
                             }') || TO_CLOB(q'{              OR       sc_int_req = 1
                                           OR       sc_death = 1
                                           OR       sc_cong_anom = 1
                                           OR       sc_threat = 1
                                           OR       sc_disable = 1
                                           OR       sc_hosp = 1 ) THEN pref_term | | ', '
                         END ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) csv_serious_event_pt ,}') || TO_CLOB(q'{
                         max (
                         CASE
                                  WHEN (
                                                    sc_other = 1
                                           OR       med_serious = 1
                                           OR       sc_int_req = 1
                                           OR       sc_death = 1
                                           OR       sc_cong_anom = 1
                                           OR       sc_threat =}') || TO_CLOB(q'{ 1
                                           OR       sc_disable = 1
                                           OR       sc_hosp = 1 ) THEN 'Yes'
                         END ) c_case_seriousness , (
                         CASE
                                  WHEN SUM ( decode ( sc_death ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN 'Death'
                                  WHEN SUM ( decode ( sc_threat ,
 }') || TO_CLOB(q'{                                                    1 , 1 ,
                                                     0 ) ) > 0 THEN 'Life-threatening'
                                  WHEN min ( sort_id ) = 1 THEN (
                                           CASE
                                                    WHEN SUM ( decode ( sc_hosp ,
                                                                       1 , 1 ,
                                                                       0 ) ) >}') || TO_CLOB(q'{ 0 THEN 'Hospitalized, '
                                           END | |
                                           CASE
                                                    WHEN SUM ( decode ( sc_disable ,
                                                                       1 , 1 ,
                                                                       0 ) ) > 0 THEN 'Disability, '
                                           END | |
                                           CASE
            }') || TO_CLOB(q'{                                        WHEN SUM ( decode ( med_serious ,
                                                                       1 , 1 ,
                                                                       0 ) ) > 0 THEN 'Medically Significant, '
                                           END | |
                                           CASE
                                                    WHEN SUM ( decode ( sc_int_req ,
                                                   }') || TO_CLOB(q'{                    1 , 1 ,
                                                                       0 ) ) > 0 THEN 'Intervention Required, '
                                           END | |
                                           CASE
                                                    WHEN SUM ( decode ( sc_cong_anom ,
                                                                       1 , 1 ,
                                                                       0 ) ) > 0 THEN 'Congenit}') || TO_CLOB(q'{al Anomaly, '
                                           END | |
                                           CASE
                                                    WHEN SUM ( decode ( sc_other ,
                                                                       1 , 1 ,
                                                                       0 ) ) > 0 THEN 'Other: Medically Significant, '
                                           END )
                         END ) c_death_lt_flag , (
      }') || TO_CLOB(q'{                   CASE
                                  WHEN SUM ( decode ( sc_death ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN 'Yes'
                                  WHEN SUM ( ca.outcome ) = 1 THEN 'Yes'
                                  ELSE 'No'
                         END ) c_death_flag ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                      }') || TO_CLOB(q'{            WHEN onset_date_partial IS NOT NULL THEN sort_id | | ') ' | | onset_date_partial | | chr ( 10 )
                         END ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) lf_eve_onset_date_c ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         (
                                SELECT sort_id | | ') ' | | evt_outcome
                                FROM   "ARGUS".v_lm_evt_outcome eo
                                WHERE  eo.evt_outcome_id = c}') || TO_CLOB(q'{e.evt_outcome_id ) | | chr ( 10 ) ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) lf_eve_outcome_c ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e , rtrim ( ( (
                         CASE
                                  WHEN (
                                                    decode ( sc_death ,
                                                            1 , 1 ,
                                                            0 ) ) > 0 THEN 'Death, '
                        }') || TO_CLOB(q'{ END | |
                         CASE
                                  WHEN (
                                                    decode ( sc_hosp ,
                                                            1 , 1 ,
                                                            0 ) ) > 0 THEN 'Hospitalized, '
                         END | |
                         CASE
                                  WHEN (
                                                    decode ( sc_threat ,
            }') || TO_CLOB(q'{                                                1 , 1 ,
                                                            0 ) ) > 0 THEN 'Life-threatening, '
                         END | |
                         CASE
                                  WHEN (
                                                    decode ( sc_disable ,
                                                            1 , 1 ,
                                                            0 ) ) > 0 THEN 'Disability, '
            }') || TO_CLOB(q'{             END | |
                         CASE
                                  WHEN (
                                                    decode ( med_serious ,
                                                            1 , 1 ,
                                                            0 ) ) > 0 THEN 'Medically Significant, '
                         END | |
                         CASE
                                  WHEN (
                                                    decode (}') || TO_CLOB(q'{ sc_int_req ,
                                                            1 , 1 ,
                                                            0 ) ) > 0 THEN 'Intervention Required, '
                         END | |
                         CASE
                                  WHEN (
                                                    decode ( sc_cong_anom ,
                                                            1 , 1 ,
                                                            0 ) ) > 0}') || TO_CLOB(q'{ THEN 'Congenital Anomaly, '
                         END | |
                         CASE
                                  WHEN (
                                                    decode ( sc_other ,
                                                            1 , 1 ,
                                                            0 ) ) > 0 THEN 'Other: Medically Significant, '
                         END ) ) , ', ' ) | | chr ( 10 ) ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) lf_eve_s}') || TO_CLOB(q'{er_criteria_c ,
                         CASE
                                  WHEN SUM ( efficacy ) > 0 THEN 'Yes'
                                  ELSE 'No'
                         END c_lack_of_eff ,
                         CASE
                                  WHEN SUM ( sc_threat ) > 0 THEN 'Yes'
                                  ELSE 'No'
                         END                                                                                                            c_life_threa}') || TO_CLOB(q'{t_flag ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e , evt_outcome | | ', ' ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) csv_outcome_desc ,
                         max (
                         CASE
                                  WHEN sort_id = 1 THEN pref_term
                         END ) c_primary_event_pt ,
                         max (
                         CASE
                                  WHEN sort_id = 1 THEN body_sys
                         END ) }') || TO_CLOB(q'{c_primary_event_soc , (
                         CASE
                                  WHEN (
                                                    SUM ( sc_other ) = 1
                                           OR       SUM ( med_serious ) = 1
                                           OR       SUM ( sc_int_req ) = 1
                                           OR       SUM ( sc_death ) = 1
                                           OR       SUM ( sc_cong_anom ) = 1
                               }') || TO_CLOB(q'{            OR       SUM ( sc_threat ) = 1
                                           OR       SUM ( sc_disable ) = 1
                                           OR       SUM ( sc_hosp ) = 1 ) THEN 'Yes'
                                  ELSE 'No'
                         END ) c_susar_case ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                                  WHEN inc_term_j IS NOT NULL THEN sort_id | | ') ' | | inc_term_j | | chr ( 10 )
  }') || TO_CLOB(q'{                       END ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) lf_event_llt_j ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                                  WHEN pref_term_j IS NOT NULL THEN sort_id | | ') ' | | pref_term_j | | chr ( 10 )
                         END ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) lf_event_pt_j , (
                         CASE
                                  WHEN SUM ( decode ( sc_death ,}') || TO_CLOB(q'{
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN '死に至るもの,'
                         END | |
                         CASE
                                  WHEN SUM ( decode ( sc_hosp ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN '入院または入院期間の延長が必要なもの,'
                         END | |
                         CASE
                   }') || TO_CLOB(q'{               WHEN SUM ( decode ( sc_threat ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN '生命を脅かすもの,'
                         END | |
                         CASE
                                  WHEN SUM ( decode ( sc_disable ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN '永続的又は顕著な障害・機能不全,'
                         END | |
 }') || TO_CLOB(q'{                        CASE
                                  WHEN SUM ( decode ( med_serious ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN '医学的に重大なもの,'
                         END | |
                         CASE
                                  WHEN SUM ( decode ( sc_int_req ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN '大}') || TO_CLOB(q'{事に至らぬように処置を要するもの,'
                         END | |
                         CASE
                                  WHEN SUM ( decode ( sc_cong_anom ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN '先天異常を来すもの,'
                         END | |
                         CASE
                                  WHEN SUM ( decode ( sc_other ,
                                                     1 , 1 ,
                  }') || TO_CLOB(q'{                                   0 ) ) > 0 THEN 'その他:,'
                         END ) csv_ser_cr_all_event_j ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                                  WHEN (
                                                    sc_other = 1
                                           OR       med_serious = 1
                                           OR       sc_int_req = 1
                                           OR       sc}') || TO_CLOB(q'{_death = 1
                                           OR       sc_cong_anom = 1
                                           OR       sc_threat = 1
                                           OR       sc_disable = 1
                                           OR       sc_hosp = 1 ) THEN pref_term_j | | ', '
                         END ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) csv_serious_event_pt_j ,
                         max (
                         CASE
                          }') || TO_CLOB(q'{        WHEN (
                                                    sc_other = 1
                                           OR       med_serious = 1
                                           OR       sc_int_req = 1
                                           OR       sc_death = 1
                                           OR       sc_cong_anom = 1
                                           OR       sc_threat = 1
                                           OR       sc_disable = 1
                  }') || TO_CLOB(q'{                         OR       sc_hosp = 1 ) THEN 'Yes'
                         END ) c_case_seriousness_j , (
                         CASE
                                  WHEN SUM ( decode ( sc_death ,
                                                     1 , 1 ,
                                                     0 ) ) > 0 THEN 'Yes'
                                  WHEN SUM ( ca.outcome ) = 1 THEN 'Yes'
                                  ELSE 'No'
                         END )        }') || TO_CLOB(q'{                                                                                                    c_death_flag_j ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e , evt_outcome_j | | ', ' ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) csv_outcome_desc_j ,
                         max (
                         CASE
                                  WHEN sort_id = 1 THEN pref_term_j
                         END ) c_primary_event_pt_j ,
                         max (
          }') || TO_CLOB(q'{               CASE
                                  WHEN sort_id = 1 THEN body_sys_j
                         END ) c_primary_event_soc_j ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                                  WHEN cfrf.null_flavor IS NOT NULL THEN cfrf.null_flavor | | ', '
                                  ELSE to_char ( stop_date , 'DD-MON-YYYY' ) | | ', '
                         END ).extract ( '//text()' ) ORDER BY sort_id ) AS clob )}') || TO_CLOB(q'{ csv_evt_stop_date ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                                  WHEN stop_date IS NOT NULL THEN to_char ( stop_date , 'DD-MON-YYYY' ) | | chr ( 10 )
                         END ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) lf_evt_stop_date ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                                  WHEN onset_latency_seconds IS NOT NULL THE}') || TO_CLOB(q'{N sort_id | | ') ' | | onset_latency_seconds | | chr ( 10 )
                         END ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) lf_onset_latency_seconds ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                                  WHEN onset_latency IS NOT NULL THEN sort_id | | ') ' | | onset_latency | | chr ( 10 )
                         END ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) lf_onset_latency ,
                 }') || TO_CLOB(q'{        min ( decode ( c_event_type ,
                                       'SUSAR' , 1 ,
                                       'SAR' , 2 ,
                                       'SAE' , 3 ,
                                       'AE' , 4 ) ) c_case_type ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                                  WHEN evt_intensity IS NOT NULL THEN sort_id | | ') ' | | evt_intensity | | chr ( 10 )
                         END )}') || TO_CLOB(q'{.extract ( '//text()' ) ORDER BY sort_id ) AS clob ) lf_evt_intensity ,
                         xmlcast ( xmlagg ( XMLELEMENT ( e ,
                         CASE
                                  WHEN ce.sc_death = 1
                                  OR       ce.evt_outcome_id = 1 THEN ce.pref_term | | ', '
                         END ).extract ( '//text()' ) ORDER BY sort_id ) AS clob ) csv_fatal_event_pt
                FROM     (
                                SELECT *
                    }') || TO_CLOB(q'{            FROM   &MARTUSERNAME..dm_case_event ) ce ,
                         (
                                SELECT nf.case_id ,
                                       nf.seq_num ,
                                       '[NF:'||c_null_flavor_value||']' null_flavor
                                FROM   &MARTUSERNAME..dm_case_null_flavor nf
                                WHERE  nf.field_id = 1140037 ) cfrf ,
                         (
                                SELECT *
         }') || TO_CLOB(q'{                       FROM   "ARGUS".v_case_assess
                                WHERE  deleted IS NULL ) ca
                WHERE    ce.case_id = cfrf.case_id ( + )
                AND      ce.seq_num = cfrf.seq_num ( + )
                AND      ce.case_id = ca.case_id ( + )
                GROUP BY ce.case_id )}'),TO_CLOB(q'{SELECT case_id,
       to_char(rtrim(lf_event_llt, chr(10))),
       to_char(rtrim(substr(lf_event_pt, 1, 3000), chr(10))),
       to_char(rtrim(substr(lf_event_desc, 1, 3000), chr(10))),
       to_char(rtrim(substr(csv_ser_cr_all_event, 1, 3000), ', ')),
       to_char(rtrim(substr(csv_serious_event_pt, 1, 3000), ', ')),
       c_case_seriousness,
       c_death_lt_flag,
       c_death_flag,
       to_char(rtrim(substr(lf_eve_onset_date_c, 1, 3000), chr(10))),
       to_char(rtrim(substr(lf_eve}') || TO_CLOB(q'{_outcome_c, 1, 3000), chr(10))),
       to_char(rtrim(substr(lf_eve_ser_criteria_c, 1, 3000), chr(10))),
       c_lack_of_eff,
       c_life_threat_flag,
       to_char(rtrim(substr(csv_outcome_desc, 1, 3000), ', ')),
       c_primary_event_pt,
       c_primary_event_soc,
       c_susar_case,
       to_char(rtrim(substr(lf_event_llt_j, 1, 3000), chr(10))),
       to_char(rtrim(substr(lf_event_pt_j, 1, 3000), chr(10))),
       to_char(rtrim(substr(csv_ser_cr_all_event_j, 1, 3000), ', ')),
       }') || TO_CLOB(q'{to_char(rtrim(substr(csv_serious_event_pt_j, 1, 3000), ', ')),
       c_case_seriousness_j,
       c_death_flag_j,
       to_char(rtrim(substr(csv_outcome_desc_j, 1, 3000), ', ')),
       c_primary_event_pt_j,
       c_primary_event_soc_j,
       to_char(rtrim(substr(csv_evt_stop_date, 1, 3000), ', ')),
       to_char(rtrim(substr(lf_evt_stop_date, 1, 3000), chr(10))),
       to_char(rtrim(substr(lf_onset_latency_seconds, 1, 3000), chr(10))),
--       to_char(rtrim(substr(lf_onset_latency, 1, 30}') || TO_CLOB(q'{00), chr(10))),
--       c_case_type,
       to_char(rtrim(substr(lf_evt_intensity, 1, 3000), chr(10))),
       to_char(rtrim(substr(csv_fatal_event_pt, 1, 3000), ', '))
FROM   &MARTUSERNAME..dm_case_data}'));
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_NOTES_ATTACH','DM_CASE_ATTACHMENTS','NOTES, NOTES_J',null,null,null,null,TO_CLOB(q'{SELECT 
    VCN.CASE_ID,
    VCN.SEQ_NUM,
    CASE
        WHEN LENGTH(XMLCAST(XMLAGG(XMLELEMENT(e, VCNACN.NOTES).EXTRACT('//text()') ORDER BY VCNACN.TEXT_ORDER) AS CLOB)) > 3997 THEN
            SUBSTR(CAST(XMLCAST(XMLAGG(XMLELEMENT(e, VCNACN.NOTES).EXTRACT('//text()') ORDER BY VCNACN.TEXT_ORDER) AS CLOB) AS VARCHAR2(4000)), 1, 3997) || '...'
        ELSE
            CAST(XMLCAST(XMLAGG(XMLELEMENT(e, VCNACN.NOTES).EXTRACT('//text()') ORDER BY VCNACN.TEXT_ORDER) AS CLOB) AS VARCHAR2(4000))
    E}') || TO_CLOB(q'{ND AS NOTES,
    CASE
        WHEN LENGTH(XMLCAST(XMLAGG(XMLELEMENT(e, VCNACNJ.NOTES_J).EXTRACT('//text()') ORDER BY VCNACNJ.TEXT_ORDER) AS CLOB)) > 3997 THEN
            SUBSTR(CAST(XMLCAST(XMLAGG(XMLELEMENT(e, VCNACNJ.NOTES_J).EXTRACT('//text()') ORDER BY VCNACNJ.TEXT_ORDER) AS CLOB) AS VARCHAR2(4000)), 1, 3997) || '...'
        ELSE
            CAST(XMLCAST(XMLAGG(XMLELEMENT(e, VCNACNJ.NOTES_J).EXTRACT('//text()') ORDER BY VCNACNJ.TEXT_ORDER) AS CLOB) AS VARCHAR2(4000))
    END AS NOTES_J
FRO}') || TO_CLOB(q'{M 
    ARGUS.V_CASE_NOTES_ATTACH VCN
LEFT JOIN 
    ARGUS.V_CASE_NOTES_ATTACH_clob_NOTES VCNACN 
    ON VCN.CASE_ID = VCNACN.CASE_ID AND VCN.SEQ_NUM = VCNACN.SEQ_NUM AND VCNACN.TEXT_ORDER = 1
LEFT JOIN 
    ARGUS.V_CASE_NOTES_ATTACH_clob_NOTES_J VCNACNJ 
    ON VCN.CASE_ID = VCNACNJ.CASE_ID AND VCN.SEQ_NUM = VCNACNJ.SEQ_NUM AND VCNACNJ.TEXT_ORDER = 1
WHERE 
    VCN.DELETED IS NULL
GROUP BY 
    VCN.CASE_ID, VCN.SEQ_NUM}'),'SELECT 
    CASE_ID,
    SEQ_NUM,
    CAST(C_NOTES AS VARCHAR2(4000)) AS C_NOTES,
    CAST(C_NOTES_J AS VARCHAR2(4000)) AS C_NOTES_J
FROM 
    &MARTUSERNAME..DM_CASE_ATTACHMENTS 
WHERE 
    SEQ_NUM > 0');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('V_LM_STUDY_REFERENCES','DM_LM_STUDIES','CLINICAL_REFERENCE',null,null,null,null,TO_CLOB(q'{SELECT DISTINCT study_id,
    LISTAGG('<Clinical_Ref_Type: ' || clinical_ref_type || ' Country: ' || COUNTRY || ' Reference: ' || REFERENCE || '>;', '') WITHIN GROUP (
        ORDER BY SEQ_NUM
    ) AS CLINICAL_REFERENCE
FROM (
    SELECT a.study_num AS study_id,
           T.REF_TYPE_DESC AS clinical_ref_type,
           C.COUNTRY,
           Q.REFERENCE,
           Q.SEQ_NUM
    FROM ARGUS.V_LM_STUDIES A
    LEFT JOIN ARGUS.V_LM_STUDY_REFERENCES Q ON A.STUDY_KEY = Q.STUDY_KEY
        AND Q.DEL}') || TO_CLOB(q'{ETED IS NULL
    LEFT JOIN ARGUS.V_LM_CLINICAL_REF_TYPES T ON Q.REF_TYPE_ID = T.REF_TYPE_ID
        AND T.DELETED IS NULL
    LEFT JOIN ARGUS.V_LM_COUNTRIES C ON Q.COUNTRY_ID = C.COUNTRY_ID
        AND C.DELETED IS NULL
    WHERE A.DELETED IS NULL
)
GROUP BY study_id}'),'SELECT
STUDY_NUM,
C_STUDY_REF_TYP_CNTRY_COMB
FROM &MARTUSERNAME..DM_LM_STUDIES');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('LM_STUDY_REFERENCES','DM_LM_STUDIES','CLINICAL_REFERENCE',null,null,null,null,TO_CLOB(q'{SELECT DISTINCT study_id,
    LISTAGG('<Clinical_Ref_Type: ' || clinical_ref_type || ' Country: ' || COUNTRY || ' Reference: ' || REFERENCE || '>;', '') WITHIN GROUP (
        ORDER BY SEQ_NUM
    ) AS CLINICAL_REFERENCE
FROM (
    SELECT a.study_num AS study_id,
           T.REF_TYPE_DESC AS clinical_ref_type,
           C.COUNTRY,
           Q.REFERENCE,
           Q.SEQ_NUM
    FROM ARGUS.V_LM_STUDIES A
    LEFT JOIN ARGUS.V_LM_STUDY_REFERENCES Q ON A.STUDY_KEY = Q.STUDY_KEY
        AND Q.DEL}') || TO_CLOB(q'{ETED IS NULL
    LEFT JOIN ARGUS.V_LM_CLINICAL_REF_TYPES T ON Q.REF_TYPE_ID = T.REF_TYPE_ID
        AND T.DELETED IS NULL
    LEFT JOIN ARGUS.V_LM_COUNTRIES C ON Q.COUNTRY_ID = C.COUNTRY_ID
        AND C.DELETED IS NULL
    WHERE A.DELETED IS NULL
)
GROUP BY study_id}'),'SELECT
STUDY_NUM,
C_STUDY_REF_TYP_CNTRY_COMB
FROM &MARTUSERNAME..DM_LM_STUDIES');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PREGNANCY','DM_CASE_DATA','C_GESTATION_PERIOD, C_GESTATION_PERIOD_J',null,null,null,null,TO_CLOB(q'{SELECT 
    VCM.CASE_ID,
    RTRIM(
    LISTAGG(
        CASE 
            WHEN VCP.GEST_PERIOD IS NOT NULL THEN VCP.GEST_PERIOD || ', ' || lau.age_unit
            ELSE NULL
        END
    ) WITHIN GROUP (ORDER BY VCP.CASE_ID), ', '
) AS COMBINED_GESTATION_UNIT,
    RTRIM(
    LISTAGG(
        CASE 
            WHEN VCP.GEST_PERIOD IS NOT NULL THEN VCP.GEST_PERIOD || ', ' || lau.age_unit_j
            ELSE NULL
        END
    ) WITHIN GROUP (ORDER BY VCP.CASE_ID), ', '
) AS COMBINED_GESTATION}') || TO_CLOB(q'{_UNIT_J
FROM 
    (SELECT * FROM ARGUS.V_CASE_PREGNANCY WHERE DELETED IS NULL) VCP
    FULL OUTER JOIN ARGUS.V_CASE_MASTER VCM ON VCM.CASE_ID = VCP.CASE_ID
    LEFT JOIN ARGUS.v_LM_AGE_UNITS lau ON lau.age_unit_id = VCP.GEST_PERIOD_UNIT
WHERE 
    VCM.CASE_ID <> -1
    AND VCM.DELETED IS NULL
GROUP BY 
    VCM.CASE_ID}'),'SELECT
    CASE_ID,
    C_GESTATION_PERIOD, 
    C_GESTATION_PERIOD_J
FROM 
    &MARTUSERNAME..DM_CASE_DATA');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_EVENT_ASSESS','DM_CASE_PROD_EVT_DETAIL','C_DECHALLENGE,  C_RECHALLENGE,  ACT_TAKEN_J,  OTHER_INFORMATION_J, PRT_CAUSALITY_ID,  C_LISTEDNESS_USPI,  C_LISTEDNESS_SMPC,  C_LISTEDNESS_JPPI,  C_LISTEDNESS_IB,  C_LISTEDNESS_CORE,  C_LISTEDNESS_CHINA,  C_LISTEDNESS_CANADA,  C_LISTEDNESS_ALL_DATASHEET,  C_EVENT_TYPE,  C_IB_DATASHEET_EVENT_TYPE,  DET_SOURCE_ID,  DET_METHOD_ID,  C_DET_LISTEDNESS_ID_USPI,  C_DET_LISTEDNESS_ID_SMPC,  C_DET_LISTEDNESS_ID_JPPI,  C_DET_LISTEDNESS_ID_IB,  C_DET_LISTEDNESS_ID_CORE,  C_DET_LISTEDNESS_ID_CHINA,  C_DET_LISTEDNESS_ID_CANADA,  C_DET_LISTEDNESS_ID,  DET_CAUSALITY_ID,  C_DET_CAUSALITY,  CAUSALITY_SCORE,  C_CAUSALITY_REPT_SOURCE_METH,  C_CAUSALITY_REPT_SOURCE,  RPT_CAUSALITY_ID,  C_CAUSALITY_REPT,  C_CAUSALITY_EVENT_PRODUCT, C_CAUSALITY_DET_SOURCE_METH,  C_CAUSALITY_DET_SOURCE,  C_CANADA_DS_ACTV_DATE,  C_JPPI_DS_ACTV_DATE,  C_CHINA_DS_ACTV_DATE,  C_CORE_DS_ACTV_DATE,  C_IB_DS_ACTV_DATE,  C_IB_DS_REV_NAME,  C_SMPC_DS_ACTV_DATE,  C_USPI_DS_ACTV_DATE',null,null,null,null,TO_CLOB(q'{SELECT to_number(cea.case_id||1)  case_vid,
cea.case_id case_id,
1 version_no,
nvl(ced.seq_num,-99999) seq_num,
ced.prod_seq_num prod_seq_num,
ced.event_seq_num event_seq_num,
ced.onset_delay onset_delay,
ced.onset_delay_seconds onset_delay_seconds,
ced.onset_latency onset_latency,
ced.onset_latency_seconds onset_latency_seconds,
ced.total_dose total_dose,
ced.total_dose_unit_id total_dose_unit_id,
(SELECT unit FROM argus.v_lm_dose_units cfg WHERE cfg.unit_id = ced.total_dose_unit_id) total_dose}') || TO_CLOB(q'{_unit  ,
(SELECT unit_j FROM argus.v_lm_dose_units cfg WHERE cfg.unit_id = ced.total_dose_unit_id) total_dose_unit_j ,
ced.most_important most_important,
ced.more_specific more_specific,
(SELECT action_taken FROM argus.v_lm_action_taken cfg WHERE cfg.act_taken_id = ced.act_taken_id) act_taken ,
ced.act_taken_id act_taken_id,
ced.other_information other_information,
DECODE(CED.dechallenge, 0, 'Neg', 1, 'Pos', 2, 'Unk', 3, 'N/A', NULL) c_dechallenge,
DECODE(CED.rechallenge, 0, 'Neg', 1, 'Pos', 2, }') || TO_CLOB(q'{'Unk', 3, 'N/A', NULL) c_rechallenge,
ced.enterprise_id enterprise_id,(SELECT action_taken_j FROM argus.v_lm_action_taken cfg WHERE cfg.act_taken_id = ced.act_taken_id) act_taken_j,
ced.other_information_j other_information_j,
cea.rpt_source_id rpt_source_id,
cea.rpt_method_id rpt_method_id,
cea.prt_source_id prt_source_id,
cea.prt_method_id prt_method_id,
cea.prt_causality_id prt_causality_id,
DECODE(c_det_listedness_id_uspi.ct_det_listedness_id_uspi,1,'Listed',2,'Unlisted',3,'Unknown') c_liste}') || TO_CLOB(q'{dness_uspi ,
DECODE(c_det_listedness_id_smpc.ct_det_listedness_id_smpc,1,'Listed',2,'Unlisted',3,'Unknown')  c_listedness_smpc,
DECODE(c_det_listedness_id_jppi.ct_det_listedness_id_jppi,1,'Listed',2,'Unlisted',3,'Unknown')  c_listedness_jppi,
DECODE(c_det_listedness_id_ib.ct_det_listedness_id_ib,1,'Listed',2,'Unlisted',3,'Unknown')  c_listedness_ib ,
DECODE(c_det_listedness_id_core.ct_det_listedness_id_core,1,'Listed',2,'Unlisted',3,'Unknown')  c_listedness_core ,
DECODE(c_det_listedness_id_chin}') || TO_CLOB(q'{a.ct_det_listedness_id_china,1,'Listed',2,'Unlisted',3,'Unknown')  c_listedness_china ,
DECODE(c_det_listedness_id_canada.ct_det_listedness_id_canada,1,'Listed',2,'Unlisted',3,'Unknown') c_listedness_canada ,
DECODE(c_det_listedness_id.ct_det_listedness_id,1,'Listed',2,'Unlisted',3,'Unknown')  c_listedness_all_datasheet ,
CASE WHEN nvl(cp.sdrug_not_admin, 0) != 1 AND nvl(CE.seriousness,0) = 1  AND  (UPPER(lcd_causality) NOT IN
                     (
                     'ZZ_UNLIKELY', 'UNLIKELY'}') || TO_CLOB(q'{
                     ,
                     'UNLIKELY RELATED',
                     'NOT RELATED'
                           ,
                     'UNRELATED', 'ZZ_UNRELATED'
                     )
                     OR UPPER(lcr_causality) NOT IN (
                        'ZZ_UNLIKELY', 'UNLIKELY'
                     ,
                     'UNLIKELY RELATED',
                     'NOT RELATED'
                           ,
                     'UNRELATED', 'ZZ_UNRELATED')) AND lcd_causalit}') || TO_CLOB(q'{y IS NOT NULL AND lcr_causality IS NOT NULL THEN
CASE WHEN c_det_listedness_id.ct_det_listedness_id IN (2,3)   THEN 'SUSAR'
ELSE 'SAR'
END 
WHEN  nvl(CE.seriousness,0) = 1 THEN 'SAE'
ELSE 'AE'
END c_event_type ,CASE WHEN nvl(cp.sdrug_not_admin, 0) != 1 AND nvl(CE.seriousness,0) = 1  AND ( UPPER(lcd_causality) NOT IN
                     (
                     'ZZ_UNLIKELY', 'UNLIKELY'
                     ,
                     'UNLIKELY RELATED',
                     'NOT RELATED'
             }') || TO_CLOB(q'{              ,
                     'UNRELATED', 'ZZ_UNRELATED'
                     )
                     OR UPPER(lcr_causality) NOT IN (
                        'ZZ_UNLIKELY', 'UNLIKELY'
                     ,
                     'UNLIKELY RELATED',
                     'NOT RELATED'
                           ,
                     'UNRELATED', 'ZZ_UNRELATED')) AND lcd_causality IS NOT NULL AND lcr_causality IS NOT NULL THEN
CASE WHEN c_det_listedness_id_ib.ct_det_listedness_id_ib IN (2,3}') || TO_CLOB(q'{)   THEN 'SUSAR'
ELSE 'SAR'
END 
WHEN  nvl(CE.seriousness,0) = 1 THEN 'SAE'
ELSE 'AE'
END c_ib_datasheet_event_type ,
cea.det_source_id det_source_id,
cea.det_method_id det_method_id,
c_det_listedness_id_uspi.ct_det_listedness_id_uspi c_det_listedness_id_uspi ,
c_det_listedness_id_smpc.ct_det_listedness_id_smpc c_det_listedness_id_smpc ,
c_det_listedness_id_jppi.ct_det_listedness_id_jppi c_det_listedness_id_jppi,
c_det_listedness_id_ib.ct_det_listedness_id_ib c_det_listedness_id_ib ,
c_det_liste}') || TO_CLOB(q'{dness_id_core.ct_det_listedness_id_core c_det_listedness_id_core ,
c_det_listedness_id_china.ct_det_listedness_id_china c_det_listedness_id_china ,
c_det_listedness_id_canada.ct_det_listedness_id_canada c_det_listedness_id_canada ,
c_det_listedness_id.ct_det_listedness_id c_det_listedness_id ,
cea.det_causality_id det_causality_id,
lcd_causality c_det_causality /* DECODE*/ ,
cea.causality_score causality_score,
(SELECT METHOD FROM argus.v_lm_causality_method cfg WHERE cfg.method_id = cea.rpt_met}') || TO_CLOB(q'{hod_id) c_causality_rept_source_meth  ,
(SELECT SOURCE FROM argus.v_vw_lm_causality_source cfg WHERE cfg.source_id = cea.rpt_source_id) c_causality_rept_source  ,
cea.rpt_causality_id rpt_causality_id,
lcr_causality c_causality_rept /* DECODE*/ ,
CASE WHEN lcr_reportability = 1 OR lcd_reportability = 1 THEN 1 ELSE 0 END c_causality_event_product ,
(SELECT METHOD FROM argus.v_lm_causality_method cfg WHERE cfg.method_id = cea.det_method_id) c_causality_det_source_meth  ,
(SELECT SOURCE FROM argus.}') || TO_CLOB(q'{v_vw_lm_causality_source cfg WHERE cfg.source_id = cea.det_source_id) c_causality_det_source ,
c_det_listedness_id_canada.canada_act_date C_CANADA_DS_ACTV_DATE,
c_det_listedness_id_jppi.jppi_act_date C_JPPI_DS_ACTV_DATE,
c_det_listedness_id_china.china_act_date C_CHINA_DS_ACTV_DATE,
c_det_listedness_id_core.core_act_date C_CORE_DS_ACTV_DATE,
c_det_listedness_id_ib.ib_act_date C_IB_DS_ACTV_DATE,
C_DET_LISTEDNESS_ID_IB.ib_sheet_name C_IB_DS_REV_NAME,
c_det_listedness_id_smpc.smpc_act_date C_SMPC_D}') || TO_CLOB(q'{S_ACTV_DATE,
c_det_listedness_id_uspi.uspi_act_date C_USPI_DS_ACTV_DATE
FROM  
(select ced.* from argus.v_case_event_detail ced ,  &ETLUSERNAME..dm_etl_cases_to_proc ecp
where ced.deleted IS NULL and ecp.case_id = ced.case_id ) ced, 
 (SELECT  ecp.case_id , EVENT_SEQ_NUM, PROD_SEQ_NUM, DATASHEET_ID, LICENSE_ID, SEQ_NUM,
UPDATED, DET_LISTEDNESS_ID, RPT_CAUSALITY_ID, DET_CAUSALITY_ID, LISTED_JUSTIFY, CAUSE_JUSTIFY, LAM_ASSESSED, 
CAUSALITY_ASSESSMENT, CAUSALITY_SCORE, SOURCE_ID, PRT_CAUSALITY_I}') || TO_CLOB(q'{D, CAUSE_JUSTIFY_J, LISTED_JUSTIFY_J,  
RPT_SOURCE_ID, RPT_METHOD_ID, DET_SOURCE_ID, DET_METHOD_ID, 
PRT_SOURCE_ID, PRT_METHOD_ID,  REVISION,lcr.causality lcr_causality, lcr.reportability lcr_reportability , 
lcd.causality lcd_causality, lcd.reportability lcd_reportability  
FROM (select * from argus.v_case_event_assess where license_id = 0
AND datasheet_id = 0 AND deleted IS NULL  ) ceal , 
argus.v_vw_lm_causality lcr , 
argus.v_vw_lm_causality lcd , 
&ETLUSERNAME..dm_etl_cases_to_proc ecp 
}') || TO_CLOB(q'{WHERE lcd.causality_id(+) = ceal.det_causality_id
and  lcr.causality_id(+) = ceal.rpt_causality_id
and ecp.casE_id = ceal.case_id(+)) cea , argus.v_case_product cp , argus.v_case_event CE ,(SELECT A.case_id , prod_seq_num , event_seq_num, DECODE( MAX(DECODE(det_listedness_id,2,99,3,98,1,97)),99,2,98,3,97,1) ct_det_listedness_id FROM argus.v_case_event_assess A ,  &ETLUSERNAME..dm_etl_cases_to_proc ecp 
WHERE A.deleted IS NULL AND A.datasheet_id > 0 AND A.license_id > 0  and ecp.case_id = a.ca}') || TO_CLOB(q'{sE_id GROUP BY A.case_id , prod_seq_num , event_seq_num) c_det_listedness_id,
(SELECT  A.case_id , prod_seq_num , event_seq_num, CASE WHEN REVISION_NAME IS NOT NULL THEN REVISION_NAME||' - ' END ||TO_CHAR(ACTIVATION_DATE,'DD-MON-YYYY') ib_act_date ,REVISION_NAME ib_sheet_name ,DECODE( MAX(DECODE(det_listedness_id,2,99,3,98,1,97)),99,2,98,3,97,1) ct_det_listedness_id_ib FROM argus.v_case_event_assess A , argus.v_lm_datasheet B , &ETLUSERNAME..dm_etl_cases_to_proc ecp
WHERE A.datasheet_id =B.da}') || TO_CLOB(q'{tasheet_id AND A.deleted IS NULL AND A.datasheet_id > 0 AND A.license_id > 0 AND UPPER(sheet_name) LIKE '%IB' and b.MAX_REVISION =b.REVISION and ecp.casE_id =a.case_id GROUP BY A.case_id , prod_seq_num , event_seq_num,ACTIVATION_DATE,REVISION_NAME) c_det_listedness_id_ib,
(SELECT A.case_id , prod_seq_num , event_seq_num,  CASE WHEN REVISION_NAME IS NOT NULL THEN REVISION_NAME||' - ' END ||TO_CHAR(ACTIVATION_DATE,'DD-MON-YYYY') smpc_act_date ,DECODE( MAX(DECODE(det_listedness_id,2,99,3,98,1,97)),}') || TO_CLOB(q'{99,2,98,3,97,1) ct_det_listedness_id_smpc FROM argus.v_case_event_assess A , argus.v_lm_datasheet B , &ETLUSERNAME..dm_etl_cases_to_proc ecp
WHERE A.datasheet_id =B.datasheet_id AND A.deleted IS NULL  AND A.datasheet_id > 0 AND A.license_id > 0 AND  UPPER(sheet_name) LIKE '%SMPC' and b.MAX_REVISION =b.REVISION and ecp.casE_id =a.case_id GROUP BY A.case_id , prod_seq_num , event_seq_num,ACTIVATION_DATE,REVISION_NAME) c_det_listedness_id_smpc,(SELECT A.case_id , prod_seq_num , event_seq_num, CA}') || TO_CLOB(q'{SE WHEN REVISION_NAME IS NOT NULL THEN REVISION_NAME||' - ' END ||TO_CHAR(ACTIVATION_DATE,'DD-MON-YYYY') uspi_act_date, DECODE( MAX(DECODE(det_listedness_id,2,99,3,98,1,97)),99,2,98,3,97,1) ct_det_listedness_id_uspi FROM argus.v_case_event_assess A , argus.v_lm_datasheet B , &ETLUSERNAME..dm_etl_cases_to_proc ecp
WHERE A.datasheet_id =B.datasheet_id AND A.deleted IS NULL AND A.datasheet_id > 0 AND A.license_id > 0  AND UPPER(sheet_name) LIKE '%USPI' and b.MAX_REVISION =b.REVISION and a.case_i}') || TO_CLOB(q'{d =ecp.case_id GROUP BY A.case_id , prod_seq_num , event_seq_num,ACTIVATION_DATE,REVISION_NAME) c_det_listedness_id_uspi ,
(SELECT A.case_id , prod_seq_num , event_seq_num,  CASE WHEN REVISION_NAME IS NOT NULL THEN REVISION_NAME||' - ' END ||TO_CHAR(ACTIVATION_DATE,'DD-MON-YYYY') core_act_date, DECODE( MAX(DECODE(det_listedness_id,2,99,3,98,1,97)),99,2,98,3,97,1) ct_det_listedness_id_core FROM argus.v_case_event_assess A , argus.v_lm_datasheet B , &ETLUSERNAME..dm_etl_cases_to_proc ecp
WHERE }') || TO_CLOB(q'{A.datasheet_id =B.datasheet_id AND A.deleted IS NULL AND A.datasheet_id > 0 AND A.license_id > 0 AND ( UPPER(sheet_name) LIKE '%CORE' OR  UPPER(sheet_name) LIKE '%CCDS') and ecp.case_id =a.case_id and b.MAX_REVISION =b.REVISION GROUP BY A.case_id , prod_seq_num , event_seq_num,ACTIVATION_DATE,REVISION_NAME ) c_det_listedness_id_core  ,
 (SELECT A.case_id , prod_seq_num , event_seq_num,  CASE WHEN REVISION_NAME IS NOT NULL THEN REVISION_NAME||' - ' END ||TO_CHAR(ACTIVATION_DATE,'DD-MON-YYYY') chi}') || TO_CLOB(q'{na_act_date , DECODE( MAX(DECODE(det_listedness_id,2,99,3,98,1,97)),99,2,98,3,97,1) ct_det_listedness_id_china FROM argus.v_case_event_assess A , argus.v_lm_datasheet B , &ETLUSERNAME..dm_etl_cases_to_proc ecp
WHERE A.datasheet_id =B.datasheet_id AND A.deleted IS NULL AND A.datasheet_id > 0 AND A.license_id > 0  AND UPPER(sheet_name) LIKE '%CHINA%' and b.MAX_REVISION =b.REVISION and ecp.case_id =a.casE_id GROUP BY A.case_id , prod_seq_num , event_seq_num,ACTIVATION_DATE,REVISION_NAME) c_det_l}') || TO_CLOB(q'{istedness_id_china ,(SELECT A.case_id , prod_seq_num , event_seq_num, CASE WHEN REVISION_NAME IS NOT NULL THEN REVISION_NAME||' - ' END ||TO_CHAR(ACTIVATION_DATE,'DD-MON-YYYY') canada_act_date , DECODE( MAX(DECODE(det_listedness_id,2,99,3,98,1,97)),99,2,98,3,97,1) ct_det_listedness_id_canada FROM argus.v_case_event_assess A , argus.v_lm_datasheet B , &ETLUSERNAME..dm_etl_cases_to_proc ecp
WHERE A.datasheet_id =B.datasheet_id AND A.deleted IS NULL  AND A.datasheet_id > 0 AND A.license_id > 0 A}') || TO_CLOB(q'{ND UPPER(sheet_name) LIKE '%CANADA%' and b.MAX_REVISION =b.REVISION and ecp.case_id =a.case_id GROUP BY A.case_id , prod_seq_num , event_seq_num,ACTIVATION_DATE,REVISION_NAME) c_det_listedness_id_canada ,
(SELECT A.case_id , prod_seq_num , event_seq_num, CASE WHEN REVISION_NAME IS NOT NULL THEN REVISION_NAME||' - ' END ||TO_CHAR(ACTIVATION_DATE,'DD-MON-YYYY') jppi_act_date, 
DECODE( MAX(DECODE(det_listedness_id,2,99,3,98,1,97)),99,2,98,3,97,1) ct_det_listedness_id_jppi FROM argus.v_case_event_as}') || TO_CLOB(q'{sess A ,
argus.v_lm_datasheet B , &ETLUSERNAME..dm_etl_cases_to_proc ecp
WHERE A.datasheet_id =B.datasheet_id AND A.deleted IS NULL AND A.datasheet_id > 0 AND A.license_id > 0 AND UPPER(sheet_name) LIKE '%JPPI%' and b.MAX_REVISION =b.REVISION and ecp.case_id = a.case_id GROUP BY A.case_id , prod_seq_num , event_seq_num,b.datasheet_id,ACTIVATION_DATE,REVISION_NAME) c_det_listedness_id_jppi  
 WHERE ced.case_id(+) = cea.case_id
 AND ced.prod_seq_num(+) = cea.prod_seq_num
 AND ced.event_seq_num(}') || TO_CLOB(q'{+) = cea.event_seq_num
 AND CE.case_id(+) = cea.case_id
 AND CE.seq_num(+) = cea.event_seq_num
 AND cp.case_id(+) =cea.case_id
 AND cp.seq_num(+) = cea.prod_seq_num
  AND c_det_listedness_id.case_id(+) =cea.case_id
  AND c_det_listedness_id.event_seq_num(+) = cea.event_seq_num
  AND cea.prod_seq_num = c_det_listedness_id.prod_seq_num(+)
    AND c_det_listedness_id_ib.case_id(+) =cea.case_id
  AND c_det_listedness_id_ib.event_seq_num(+) = cea.event_seq_num
  AND cea.prod_seq_num = c_det_listednes}') || TO_CLOB(q'{s_id_ib.prod_seq_num(+)
     AND c_det_listedness_id_smpc.case_id(+) =cea.case_id AND c_det_listedness_id_smpc.event_seq_num(+) = cea.event_seq_num
  AND cea.prod_seq_num = c_det_listedness_id_smpc.prod_seq_num(+)
     AND c_det_listedness_id_uspi.case_id(+) =cea.case_id
  AND c_det_listedness_id_uspi.event_seq_num(+) = cea.event_seq_num
  AND cea.prod_seq_num = c_det_listedness_id_uspi.prod_seq_num(+)
       AND c_det_listedness_id_core.case_id(+) =cea.case_id
  AND c_det_listedness_id_core.eve}') || TO_CLOB(q'{nt_seq_num(+) = cea.event_seq_num
  AND cea.prod_seq_num = c_det_listedness_id_core.prod_seq_num(+)
         AND c_det_listedness_id_china.case_id(+) =cea.case_id
  AND c_det_listedness_id_china.event_seq_num(+) = cea.event_seq_num
  AND cea.prod_seq_num = c_det_listedness_id_china.prod_seq_num(+)
           AND c_det_listedness_id_canada.case_id(+) =cea.case_id
  AND c_det_listedness_id_canada.event_seq_num(+) = cea.event_seq_num
  AND cea.prod_seq_num = c_det_listedness_id_canada.prod_seq_num(}') || TO_CLOB(q'{+)
             AND c_det_listedness_id_jppi.case_id(+) =cea.case_id
  AND c_det_listedness_id_jppi.event_seq_num(+) = cea.event_seq_num
  AND cea.prod_seq_num = c_det_listedness_id_jppi.prod_seq_num(+) }'),TO_CLOB(q'{SELECT CASE_VID, 
 CASE_ID, 
 VERSION_NO, 
 SEQ_NUM,
 PROD_SEQ_NUM, 
 EVENT_SEQ_NUM, 
 ONSET_DELAY,
 ONSET_DELAY_SECONDS, 
 ONSET_LATENCY, 
 ONSET_LATENCY_SECONDS, 
 TOTAL_DOSE, 
 TOTAL_DOSE_UNIT_ID, 
 TOTAL_DOSE_UNIT,
 TOTAL_DOSE_UNIT_J,
 MOST_IMPORTANT,
 MORE_SPECIFIC,
 ACT_TAKEN,
 ACT_TAKEN_ID,
 OTHER_INFORMATION,
 C_DECHALLENGE,
 C_RECHALLENGE,
 ENTERPRISE_ID,
 ACT_TAKEN_J,
 OTHER_INFORMATION_J,
 RPT_SOURCE_ID,
 RPT_METHOD_ID,
 PRT_SOURCE_ID,
 PRT_METHOD_ID,
 PRT_CAUSALITY_ID,
 C_LISTEDNESS_}') || TO_CLOB(q'{USPI,
 C_LISTEDNESS_SMPC,
 C_LISTEDNESS_JPPI,
 C_LISTEDNESS_IB,
 C_LISTEDNESS_CORE,
 C_LISTEDNESS_CHINA,
 C_LISTEDNESS_CANADA,
 C_LISTEDNESS_ALL_DATASHEET,
 C_EVENT_TYPE,
 C_IB_DATASHEET_EVENT_TYPE,
 DET_SOURCE_ID,
 DET_METHOD_ID,
 C_DET_LISTEDNESS_ID_USPI,
 C_DET_LISTEDNESS_ID_SMPC,
 C_DET_LISTEDNESS_ID_JPPI,
 C_DET_LISTEDNESS_ID_IB,
 C_DET_LISTEDNESS_ID_CORE,
 C_DET_LISTEDNESS_ID_CHINA,
 C_DET_LISTEDNESS_ID_CANADA,
 C_DET_LISTEDNESS_ID,
 DET_CAUSALITY_ID,
 C_DET_CAUSALITY,
 CAUSALITY_SCORE,
 C}') || TO_CLOB(q'{_CAUSALITY_REPT_SOURCE_METH,
 C_CAUSALITY_REPT_SOURCE,
 RPT_CAUSALITY_ID,
 C_CAUSALITY_REPT,
 to_number(C_CAUSALITY_EVENT_PRODUCT),
 C_CAUSALITY_DET_SOURCE_METH,
 C_CAUSALITY_DET_SOURCE,
 C_CANADA_DS_ACTV_DATE,
 C_JPPI_DS_ACTV_DATE,
 C_CHINA_DS_ACTV_DATE,
 C_CORE_DS_ACTV_DATE,
 C_IB_DS_ACTV_DATE,
 C_IB_DS_REV_NAME,
 C_SMPC_DS_ACTV_DATE,
 C_USPI_DS_ACTV_DATE FROM &MARTUSERNAME..DM_CASE_PROD_EVT_DETAIL}'));
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('GENERAL','DM_GENERAL_INFO','KEY, VALUE, ETL_EXECUTION_TIME',null,null,null,null,TO_CLOB(q'{(SELECT 'MedDRA Version' AS KEY,
       (SELECT NAME 
          FROM argus.v_cfg_dictionaries_global A,
               argus.v_cfg_dictionaries_enterprise B
         WHERE A.GLOBAL_DICT_ID = B.GLOBAL_DICT_ID
           AND dict_id = VALUE) AS VALUE,
       (SELECT ETL_EXECUTION_TIME 
          FROM &MARTUSERNAME..DM_GENERAL_INFO 
         WHERE KEY = 'MedDRA Version') AS ETL_EXECUTION_TIME
  FROM ARGUS.CMN_PROFILE_ENTERPRISE 
 WHERE KEY = 'AUTOE_P_E_TERM_DIC'

UNION

SELECT 'WHO Drug Version'}') || TO_CLOB(q'{,
       (SELECT NAME 
          FROM argus.v_cfg_dictionaries_global A,
               argus.v_cfg_dictionaries_enterprise B
         WHERE A.GLOBAL_DICT_ID = B.GLOBAL_DICT_ID
           AND dict_id = VALUE) AS VALUE,
       (SELECT ETL_EXECUTION_TIME 
          FROM &MARTUSERNAME..DM_GENERAL_INFO 
         WHERE KEY = 'WHO Drug Version') AS ETL_EXECUTION_TIME
  FROM ARGUS.CMN_PROFILE_ENTERPRISE 
 WHERE KEY = 'AUTOE_P_SUS_D_DIC')}'),'SELECT
    dgi.KEY,dgi.VALUE,dgi.ETL_EXECUTION_TIME
FROM
    &MARTUSERNAME..DM_GENERAL_INFO dgi');
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('DM_CASE_EXP_PROD_FAMILY','DM_CASE_EXP_PROD_FAMILY_AGG','CASE_ID, 
  CASE_NUM,
  STUDY_KEY,
  STUDY_NUM, 
  EXPANDED_FAMILY_ID, 
  EXPANDED_FAMILY_NAME,
  AGG_IS_STUDY_DRUG_NOT_ADMIN, 
  IS_COMBINATION_BLINDED,
  AGG_IS_IMP_BLINDED,
  AGG_IS_COMPARATOR_BLINDED, 
  AGG_IS_PLACEBO_BLINDED, 
  AGG_IS_OTHER_STUDY_BLINDED, 
  IS_COMBINATION_UNBLINDED, 
  AGG_IS_IMP_UNBLINDED, 
  AGG_IS_COMPARATOR_UNBLINDED, 
  AGG_IS_PLACEBO_UNBLINDED,
  AGG_IS_OTHER_STUDY_UNBLINDED, 
  AGG_IS_BLINDED_BLINDED, 
  AGG_IS_BLINDED_UNBLINDED, 
  AGG_IS_CASE_BLINDED, 
  AGG_IS_STUDY_BLINDED',null,null,null,null,TO_CLOB(q'{select CASE_ID, 
  CASE_NUM,
  STUDY_KEY,
  STUDY_NUM, 
  EXPANDED_FAMILY_ID, 
  EXPANDED_FAMILY_NAME,
  CASE WHEN SUM(IS_STUDY_DRUG_NOT_ADMIN) > 0 THEN 1 ELSE 0 END AGG_IS_STUDY_DRUG_NOT_ADMIN,
  CASE WHEN SUM(IS_IMP_BLINDED) > 0 AND (SUM(IS_COMPARATOR_BLINDED) > 0 OR SUM(IS_PLACEBO_BLINDED) > 0 OR SUM(IS_OTHER_STUDY_BLINDED) > 0) THEN 1 ELSE 0 END IS_COMBINATION_BLINDED,
  CASE WHEN SUM(IS_IMP_BLINDED) > 0 AND (SUM(IS_COMPARATOR_BLINDED) = 0 AND SUM(IS_PLACEBO_BLINDED) = 0 AND SUM(IS_OTHER_STU}') || TO_CLOB(q'{DY_BLINDED) = 0) THEN 1 ELSE 0 END AGG_IS_IMP_BLINDED,
  CASE WHEN SUM(IS_COMPARATOR_BLINDED) > 0 AND SUM(IS_IMP_BLINDED) = 0  THEN 1 ELSE 0 END AGG_IS_COMPARATOR_BLINDED, 
  CASE WHEN SUM(IS_PLACEBO_BLINDED) > 0 AND SUM(IS_IMP_BLINDED) = 0 THEN 1 ELSE 0 END AGG_IS_PLACEBO_BLINDED, 
  CASE WHEN SUM(IS_OTHER_STUDY_BLINDED) > 0 AND SUM(IS_IMP_BLINDED) = 0 THEN 1 ELSE 0 END AGG_IS_OTHER_STUDY_BLINDED, 
  CASE WHEN SUM(IS_IMP_UNBLINDED) > 0 AND (SUM(IS_COMPARATOR_BLINDED) > 0 OR SUM(IS_PLACEBO_UNBLI}') || TO_CLOB(q'{NDED) > 0 OR SUM(IS_OTHER_STUDY_UNBLINDED) > 0) THEN 1 ELSE 0 END IS_COMBINATION_UNBLINDED, 
  CASE WHEN SUM(IS_IMP_UNBLINDED) > 0 AND (SUM(IS_COMPARATOR_UNBLINDED) = 0 AND SUM(IS_PLACEBO_UNBLINDED) = 0 AND SUM(IS_OTHER_STUDY_UNBLINDED) = 0) THEN 1 ELSE 0 END AGG_IS_IMP_UNBLINDED, 
  CASE WHEN SUM(IS_COMPARATOR_UNBLINDED) > 0 AND SUM(IS_IMP_UNBLINDED) = 0 THEN 1 ELSE 0 END AGG_IS_COMPARATOR_UNBLINDED, 
  CASE WHEN SUM(IS_PLACEBO_UNBLINDED) > 0 AND SUM(IS_IMP_UNBLINDED) = 0 THEN 1 ELSE 0 END AGG_}') || TO_CLOB(q'{IS_PLACEBO_UNBLINDED,
  CASE WHEN SUM(IS_OTHER_STUDY_UNBLINDED) > 0 AND SUM(IS_IMP_UNBLINDED) = 0 THEN 1 ELSE 0 END AGG_IS_OTHER_STUDY_UNBLINDED, 
  CASE WHEN SUM(IS_BLINDED_BLINDED) > 0 THEN 1 ELSE 0 END AGG_IS_BLINDED_BLINDED, 
  CASE WHEN SUM(IS_BLINDED_UNBLINDED) > 0 THEN 1 ELSE 0 END AGG_IS_BLINDED_UNBLINDED, 
  CASE WHEN SUM(IS_CASE_BLINDED) > 0 THEN 1 ELSE 0 END AGG_IS_CASE_BLINDED, 
  CASE WHEN SUM(IS_STUDY_BLINDED) > 0 THEN 1 ELSE 0 END AGG_IS_STUDY_BLINDED 
  from &MARTUSERNAME..DM_}') || TO_CLOB(q'{CASE_EXP_PROD_FAMILY
  GROUP BY CASE_ID, 
  CASE_NUM,
  STUDY_KEY,
  STUDY_NUM, 
  EXPANDED_FAMILY_ID, 
  EXPANDED_FAMILY_NAME }'),TO_CLOB(q'{select CASE_ID, 
  CASE_NUM,
  STUDY_KEY,
  STUDY_NUM, 
  EXPANDED_FAMILY_ID, 
  EXPANDED_FAMILY_NAME,
  AGG_IS_STUDY_DRUG_NOT_ADMIN, 
  IS_COMBINATION_BLINDED,
  AGG_IS_IMP_BLINDED,
  AGG_IS_COMPARATOR_BLINDED, 
  AGG_IS_PLACEBO_BLINDED, 
  AGG_IS_OTHER_STUDY_BLINDED, 
  IS_COMBINATION_UNBLINDED, 
  AGG_IS_IMP_UNBLINDED, 
  AGG_IS_COMPARATOR_UNBLINDED, 
  AGG_IS_PLACEBO_UNBLINDED,
  AGG_IS_OTHER_STUDY_UNBLINDED, 
  AGG_IS_BLINDED_BLINDED, 
  AGG_IS_BLINDED_UNBLINDED, 
  AGG_IS_CASE_BLINDED, 
  }') || TO_CLOB(q'{AGG_IS_STUDY_BLINDED 
  from &MARTUSERNAME..DM_CASE_EXP_PROD_FAMILY_AGG}'));
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_DOSE_REGIMENS','DM_CASE_PRODUCT','LF_PROD_DOSAGE_DETAILS,LF_STUDY_PROD_DOSAGE_DETAILS,CSV_DOSAGE_DOSE_UNITS,CSV_DOSAGE_ROUTE_OF_ADMIN,C_DOSAGE_ONGOING,LF_PRODUCT_LOT_NO',null,null,null,null,TO_CLOB(q'{SELECT 
   vcm.case_id,
   vcprod.SEQ_NUM,
   TO_CHAR(RTRIM(SUBSTR(pdd.lf_prod_dosage_details, 1, 3000), CHR(10))) AS lf_prod_dosage_details,
    TO_CHAR(RTRIM(SUBSTR(spdd.product_name_study_blnd_new, 1, 3000), CHR(10))) AS lf_study_prod_dosage_details,
    TO_CHAR(RTRIM(SUBSTR(dr.daily_dose_csv, 1, 3000), ', ')) AS csv_dosage_dose_units,
    TO_CHAR(RTRIM(SUBSTR(dr.pat_route_csv, 1, 3000), ', ')) AS csv_dosage_route_of_admin,   
   dr.ongoing_flag as c_dosage_ongoing,
   TO_CHAR(RTRIM(SUBSTR(dr}') || TO_CLOB(q'{.lot_no_lf, 1, 3000), CHR(10))) AS lf_product_lot_no
FROM  
   argus.v_case_master vcm 
   LEFT JOIN (SELECT * FROM argus.v_case_product vcprod WHERE  vcprod.deleted is null) vcprod ON vcm.case_id = vcprod.case_id
   LEFT JOIN (SELECT * FROM argus.v_case_prod_drugs vcpd WHERE vcpd.deleted is null) vcpd ON vcprod.case_id = vcpd.case_id AND vcprod.seq_num = vcpd.seq_num
   LEFT JOIN (SELECT case_id,
                 seq_num,
                   RTRIM(XMLAGG(XMLELEMENT(E, pat_route || ', ') ORDER BY}') || TO_CLOB(q'{ sort_id).EXTRACT('//text()'), ', ')  as pat_route_csv,

                        RTRIM(XMLAGG(XMLELEMENT(E, daily_dose || ', ') ORDER BY sort_id).EXTRACT('//text()'), ', ') as daily_dose_csv,
                     case when sum (nvl (ongoing, 0)) > 0 then 1 else 0 end ongoing_flag,
                        RTRIM(XMLAGG(XMLELEMENT(E, lot_no ||chr(10)) ORDER BY sort_id).EXTRACT('//text()'), chr(10))  as lot_no_lf
            FROM (SELECT DISTINCT a.case_id,
                                  a.seq_nu}') || TO_CLOB(q'{m,
								  a.sort_id,
                                  a.ongoing,
                                  (SELECT lar.route FROM argus.v_lm_admin_route lar
                                   WHERE lar.admin_route_id = a.admin_route_id)    pat_route,
                                  nvl(trim(daily_dose|| ' '|| (select decode(unit, '(is null)', null, unit) 
                                  from argus.lm_dose_units ldu 
                                  where ldu.unit_id = a.daily_dose_unit_id and l}') || TO_CLOB(q'{du.deleted is null)), 'unk' ) daily_dose,
                                  lot_no FROM argus.v_case_dose_regimens a , argus.v_case_master vcm
                                  WHERE a.case_id = vcm.case_id
                                  AND a.deleted IS NULL)GROUP BY CASE_ID, SEQ_NUM) dr ON vcprod.case_id = dr.case_id and vcprod.seq_num = dr.seq_num
   LEFT JOIN (SELECT vcdr.case_id, vcdr.seq_num,
   NVL(RTRIM(XMLAGG(XMLELEMENT(E, vcdr.sort_id || ') ' ||  vcdr.start_date_partial || CASE WHEN}') || TO_CLOB(q'{ (
                                                                                                    vcdr.start_date_partial IS NULL
                                                                                                     AND vcdr.stop_date_partial IS NULL
                                                                                                     ) THEN '  ' ELSE ' to ' END || vcdr.stop_date_partial ||
                            (case when (vcdr.dose is null AND vcdr.dose}') || TO_CLOB(q'{_unit_id is null) then ' ' else ', ' end) || vcdr.dose || ' ' || (select decode(unit, '(is null)', null, unit) 
                                  from argus.v_lm_dose_units ldu 
                                  where ldu.unit_id = vcdr.dose_unit_id and ldu.deleted is null)|| (case when vcdr.freq_id is null then ' ' else ', ' end) || (select decode(freq, '(is null)', null, freq) 
                                  from argus.v_lm_dose_frequency lf 
                                  where lf.freq_}') || TO_CLOB(q'{id = vcdr.freq_id and lf.deleted is null) || ' ' ||chr(10)) ORDER BY vcdr.sort_id).EXTRACT('//text()').getclobval(), chr(10)),' ') AS LF_PROD_DOSAGE_DETAILS
                             FROM argus.v_case_dose_regimens vcdr, argus.v_case_master vcm
                             WHERE vcdr.case_id = vcm.case_id
                             AND (
                                                          vcdr.start_date_partial IS NOT NULL
                                                          OR }') || TO_CLOB(q'{vcdr.stop_date_partial IS NOT NULL
                                                          OR vcdr.dose IS NOT NULL
                                                          OR vcdr.dose_unit_id IS NOT NULL
                                                          )GROUP BY vcdr.case_id,vcdr.seq_num) pdd ON vcprod.case_id = pdd.case_id and vcprod.seq_num = pdd.seq_num
   LEFT JOIN (SELECT vcdr.case_id, vcdr.seq_num,
CASE WHEN vpcs.case_blinded = 0 THEN TO_CLOB('[Blinded]') WHEN vpcs.study_blin}') || TO_CLOB(q'{ded = 0 THEN TO_CLOB('[Blinded]')
WHEN (vpcs.case_blinded = 1 AND vpcs.study_blinded = 1) OR vpcs.open_label_study = 1 THEN 
RTRIM(XMLAGG(XMLELEMENT(E, vcdr.sort_id || ') ' ||  vcdr.start_date_partial || 
CASE WHEN (vcdr.start_date_partial IS NULL AND vcdr.stop_date_partial IS NULL ) THEN '  ' ELSE ' to ' END ||
vcdr.stop_date_partial ||(case when (vcdr.dose is null AND vcdr.dose_unit_id is null) then ' ' else ', ' end) ||
vcdr.dose || ' ' || (select decode(unit, '(is null)', null, unit) from ar}') || TO_CLOB(q'{gus.v_lm_dose_units ldu 
                    where ldu.unit_id = vcdr.dose_unit_id and ldu.deleted is null)|| 
(case when vcdr.freq_id is null then ' ' else ', ' end) || (select decode(freq, '(is null)', null, freq) from argus.v_lm_dose_frequency lf 
                                  where lf.freq_id = vcdr.freq_id and lf.deleted is null) || 
' ' ||chr(10)) ORDER BY vcdr.sort_id).EXTRACT('//text()').getclobval(), chr(10)) 
ELSE   
RTRIM(XMLAGG(XMLELEMENT(E, vcdr.sort_id || ') ' ||  vcdr.start_da}') || TO_CLOB(q'{te_partial || 
CASE WHEN (vcdr.start_date_partial IS NULL AND vcdr.stop_date_partial IS NULL) THEN '  ' ELSE ' to ' END ||
vcdr.stop_date_partial || (case when (vcdr.dose is null AND vcdr.dose_unit_id is null) then ' ' else ', ' end) ||
vcdr.dose || ' ' || (select decode(unit, '(is null)', null, unit) from argus.v_lm_dose_units ldu 
                     where ldu.unit_id = vcdr.dose_unit_id and ldu.deleted is null)|| 
(case when vcdr.freq_id is null then ' ' else ', ' end) || (select decode(freq}') || TO_CLOB(q'{, '(is null)', null, freq) from argus.v_lm_dose_frequency lf 
                                                            where lf.freq_id = vcdr.freq_id and lf.deleted is null) || 
' ' ||chr(10)) ORDER BY vcdr.sort_id).EXTRACT('//text()').getclobval(), chr(10)) END product_name_study_blnd_new
        FROM argus.v_case_dose_regimens vcdr,(
                SELECT cpro.case_id
                    ,cpro.seq_num
                    ,'[Blinded]' BLINDED_TEXT
                    ,CASE WHEN cpro.co_dru}') || TO_CLOB(q'{g_code = 'Study Drug'
                            AND cstu.code_broken = 4
                            AND lsty.study_type = 'Not Blinded' THEN 1 ELSE 0 END open_label_study
                    ,CASE WHEN NVL(co_drug_code, '-999') = 'Study Drug'
                            AND lsty.study_type <> 'Not Blinded'
                            AND cstu.code_broken = 0 THEN 0 WHEN NVL(co_drug_code, '-999') = 'Study Drug'
                            AND lsty.study_type <> 'Not Blinded'
                  }') || TO_CLOB(q'{          AND cstu.code_broken > 0 THEN 1 ELSE - 1 END case_blinded
                    ,CASE WHEN NVL(co_drug_code, '-999') = 'Study Drug'
                            AND lsty.study_type <> 'Not Blinded'
                            AND lstu.unblind_ok = 0 THEN 0
                            WHEN NVL(co_drug_code, '-999') = 'Study Drug'
                            AND lsty.study_type <> 'Not Blinded'
                            AND lstu.unblind_ok = 1 THEN 1 ELSE - 1 END study_blinded
           }') || TO_CLOB(q'{     FROM argus.v_case_product cpro
                    ,argus.v_case_study cstu
                    ,argus.V_lm_studies lstu
                    ,argus.v_lm_study_types lsty
                    , argus.v_case_master vcm
                WHERE cpro.case_id = cstu.case_id
                    AND cstu.study_key = lstu.study_key(+)
                    AND cstu.study_type = lsty.study_type_id(+)
                    AND lstu.deleted(+) IS NULL
                    AND lsty.deleted(+) IS NULL
          }') || TO_CLOB(q'{          AND vcm.CASE_ID = CPRO.CASE_ID
                ) vpcs,
                argus.v_case_master vcm
        WHERE vpcs.case_id = vcdr.case_id
        AND vcdr.case_id = vcm.case_id
            AND vpcs.seq_num = vcdr.seq_num
            AND (
                vcdr.start_date_partial IS NOT NULL
                OR vcdr.stop_date_partial IS NOT NULL
                OR vcdr.dose IS NOT NULL
                OR vcdr.dose_unit_id IS NOT NULL
                )
        GROUP BY vcdr.case_id
        }') || TO_CLOB(q'{    ,vcdr.seq_num
            ,vpcs.case_blinded
            ,vpcs.study_blinded
            ,vpcs.open_label_study) spdd ON vcprod.case_id = spdd.case_id and vcprod.seq_num = spdd.seq_num}'),TO_CLOB(q'{SELECT
    dcp.case_id,
    dcp.SEQ_NUM,
    TO_CHAR(RTRIM(SUBSTR(dcp.lf_prod_dosage_details, 1, 3000), CHR(10))) AS lf_prod_dosage_details,
    TO_CHAR(RTRIM(SUBSTR(dcp.lf_study_prod_dosage_details, 1, 3000), CHR(10))) AS lf_study_prod_dosage_details,
    TO_CHAR(RTRIM(SUBSTR(dcp.csv_dosage_dose_units, 1, 3000), ', ')) AS csv_dosage_dose_units,
    TO_CHAR(RTRIM(SUBSTR(dcp.csv_dosage_route_of_admin, 1, 3000), ', ')) AS csv_dosage_route_of_admin,
    dcp.c_dosage_ongoing,
    TO_CHAR(RTRIM(SUBST}') || TO_CLOB(q'{R(dcp.lf_product_lot_no, 1, 3000), CHR(10))) AS lf_product_lot_no
FROM &MARTUSERNAME..dm_case_product dcp
JOIN argus.v_case_master vcm ON dcp.case_id = vcm.case_id}'));
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_PRODUCT','DM_CASE_DATA','CASE_ID,  CSV_SUS_PROD, CSV_CONMED_PRODUCT, C_PRIM_SUS_PROD, CSV_TREATMENT_PRODUCT, CSV_GEN_NAME_CASE_BLINDED, CSV_GEN_NAME_STUDY_BLINDED, CSV_GENERIC_NAME, CSV_OTH_SUS_PROD, CSV_OTH_SUS_PROD_CASE_BLND, CSV_OTH_SUS_PROD_STDY_BLND, CSV_STUDY_PRODUCTS, CSV_STUDY_PRODUCTS_CASE_BLND, CSV_STUDY_PRODUCTS_STDY_BLND, CSV_SUS_PRODUCT_CASE_BLND, C_FIRST_SUS_PROD_CASE_BLINDED, C_FIRST_SUS_PROD_STUDY_BLINDED, CSV_SUS_PROD_J, CSV_CONMED_PRODUCT_J, C_PRIM_SUS_PROD_J, CSV_TREATMENT_PRODUCT_J, CSV_GEN_NAME_CASE_BLINDED_J, CSV_GEN_NAME_STUDY_BLINDED_J, CSV_GENERIC_NAME_J, CSV_OTH_SUS_PROD_CASE_BLND_J, CSV_OTH_SUS_PROD_J, CSV_OTH_SUS_PROD_STDY_BLND_J, CSV_STUDY_PRODUCTS_CASE_BLND_J, CSV_STUDY_PRODUCTS_J, CSV_STUDY_PRODUCTS_STDY_BLND_J, CSV_SUS_PRODUCT_CASE_BLND_J, C_FIRST_SUS_PROD_CASE_BLIND_J, C_FIRST_SUS_PROD_STUDY_BLIND_J, C_PRIM_SUS_PROD_SEQ, LF_STUDY_PRODUCTS_CASE_BLND, LF_STUDY_IMP_PRODUCTS',null,null,null,null,TO_CLOB(q'{SELECT * FROM (SELECT  DISTINCT 
               ecp.case_id,    
			   TO_CHAR(SUBSTR(RTRIM(csv_sus_prod,', '),1,1000))csv_sus_prod,
               TO_CHAR(SUBSTR(RTRIM(csv_conmed_product,', '),1,1000))csv_conmed_product,
               TO_CHAR(SUBSTR(vcprod.c_prim_sus_prod,1,1000)),
               TO_CHAR(SUBSTR(RTRIM(csv_treatment_product,', '),1,1000))csv_treatment_product,
               TO_CHAR(SUBSTR(RTRIM(csv_gen_name_case_blinded,', '),1,1000))csv_gen_name_case_blinded,
               TO}') || TO_CLOB(q'{_CHAR(SUBSTR(RTRIM(csv_gen_name_study_blinded,', '),1,1000))csv_gen_name_study_blinded,
               TO_CHAR(SUBSTR(RTRIM(csv_generic_name,', '),1,1000))csv_generic_name,
               TO_CHAR(SUBSTR(RTRIM(csv_oth_sus_prod,', '),1,1000))csv_oth_sus_prod,
               TO_CHAR(SUBSTR(RTRIM(csv_oth_sus_prod_case_blnd,', '),1,1000))csv_oth_sus_prod_case_blnd,
               TO_CHAR(SUBSTR(RTRIM(csv_oth_sus_prod_stdy_blnd,', '),1,1000))csv_oth_sus_prod_stdy_blnd,
               TO_CHAR(SUBSTR(RT}') || TO_CLOB(q'{RIM(csv_study_products,', '),1,1000))csv_study_products,
               TO_CHAR(SUBSTR(RTRIM(csv_study_products_case_blnd,', '),1,1000))csv_study_products_case_blnd,
               TO_CHAR(SUBSTR(RTRIM(csv_study_products_stdy_blnd,', '),1,1000))csv_study_products_stdy_blnd,
               TO_CHAR(SUBSTR(RTRIM(csv_sus_product_case_blnd,', '),1,1000))csv_sus_product_case_blnd,
               TO_CHAR(SUBSTR(vcprod.c_first_sus_prod_case_blinded,1,1000)),
               TO_CHAR(SUBSTR(vcprod.c_first_}') || TO_CLOB(q'{sus_prod_study_blinded,1,1000)),
               TO_CHAR(SUBSTR(RTRIM(csv_sus_prod_j,', '),1,1000))csv_sus_prod_j,
               TO_CHAR(SUBSTR(RTRIM(csv_conmed_product_j,', '),1,1000))csv_conmed_product_j,
               TO_CHAR(SUBSTR(vcprod.c_prim_sus_prod_j,1,1000)),
               TO_CHAR(SUBSTR(RTRIM(csv_treatment_product_j,', '),1,1000))csv_treatment_product_j,
               TO_CHAR(SUBSTR(RTRIM(csv_gen_name_case_blinded_j,', '),1,1000))csv_gen_name_case_blinded_j,
               TO_CHAR}') || TO_CLOB(q'{(SUBSTR(RTRIM(csv_gen_name_study_blinded_j,', '),1,1000))csv_gen_name_study_blinded_j,
               TO_CHAR(SUBSTR(RTRIM(csv_generic_name_j,', '),1,1000))csv_generic_name_j,
               TO_CHAR(SUBSTR(RTRIM(csv_oth_sus_prod_case_blnd_j,', '),1,1000))csv_oth_sus_prod_case_blnd_j,
               TO_CHAR(SUBSTR(RTRIM(csv_oth_sus_prod_j,', '),1,1000))csv_oth_sus_prod_j,
               TO_CHAR(SUBSTR(RTRIM(csv_oth_sus_prod_stdy_blnd_j,', '),1,1000))csv_oth_sus_prod_stdy_blnd_j,
               TO}') || TO_CLOB(q'{_CHAR(SUBSTR(RTRIM(csv_study_products_case_blnd_j,', '),1,1000))csv_study_products_case_blnd_j,
               TO_CHAR(SUBSTR(RTRIM(csv_study_products_j,', '),1,1000))csv_study_products_j,
               TO_CHAR(SUBSTR(RTRIM(csv_study_products_stdy_blnd_j,', '),1,1000))csv_study_products_stdy_blnd_j,
               TO_CHAR(SUBSTR(RTRIM(csv_sus_product_case_blnd_j,', '),1,1000))csv_sus_product_case_blnd_j,
               TO_CHAR(SUBSTR(    RTRIM(vcprod.c_first_sus_prod_case_blind_j,', ') ,1,1000)}') || TO_CLOB(q'{)c_first_sus_prod_case_blind_j,
               TO_CHAR(SUBSTR(    RTRIM(vcprod.c_first_sus_prod_study_blind_j,', ') ,1,1000))c_first_sus_prod_study_blind_j,
			   TO_CHAR(SUBSTR(vcprod.c_prim_sus_prod_seq,1,1000)),
			   TO_CHAR(SUBSTR(RTRIM(lf_study_products_case_blnd,CHR(10)),1,1000)) lf_study_products_case_blnd,
			   TO_CHAR(SUBSTR(RTRIM((SELECT LISTAGG(PROD_NAME, chr(10)) WITHIN GROUP (ORDER BY PROD_NAME) PROD_NAME 
FROM ARGUS.V_LM_PRODUCT A , ARGUS.V_LM_STUDY_PRODUCTS B
WHERE A.PRODUCT_ID }') || TO_CLOB(q'{= B.PRODUCT_ID 
AND B.PROD_TYPE_ID IN (2,5)
AND A.DELETED IS NULL
AND B.DELETED IS NULL
AND B.COHORT_ID = vcprod.c_cohort_id), CHR(10)),1,1000)) lf_study_imp_products
          FROM argus.v_case_product ecp,
               (SELECT case_id
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN drug_type = 1 THEN product_name||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_sus_prod
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN drug_type = 2 THEN product_name||', 'END).EXTRACT('//text()') ORDER}') || TO_CLOB(q'{ BY sort_id) AS CLOB) csv_conmed_product
					  ,MAX(CASE WHEN first_sus_prod = 1 THEN product_name END) c_prim_sus_prod
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN drug_type = 3 THEN product_name||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_treatment_product
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN open_label_study = 1 THEN lp_prod_generic_name||', '
														WHEN (case_blinded = 0) THEN BLIND_NAME||', '
														ELSE generic_name ||', 'END).EXTRACT('//text()') }') || TO_CLOB(q'{ORDER BY sort_id) AS CLOB) csv_gen_name_case_blinded
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN case_blinded = 0 THEN BLIND_NAME
													    WHEN study_blinded = 0 THEN BLIND_NAME
														WHEN (case_blinded = 1 AND study_blinded = 1) OR open_label_study = 1 THEN lp_prod_generic_name
														ELSE generic_name END
											   ||', ').EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_gen_name_study_blinded
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,generic_name||', ').EXTRACT('//tex}') || TO_CLOB(q'{t()') ORDER BY sort_id) AS CLOB) csv_generic_name
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN first_sus_prod <> 1 AND drug_type = 1 THEN product_name||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_oth_sus_prod
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN first_sus_prod <> 1  AND drug_type = 1
													    THEN 
															CASE WHEN open_label_study = 1 THEN lp_prod_name
																 WHEN ( case_blinded = 0) THEN BLIND_NAME
																 ELSE product_name END
					}') || TO_CLOB(q'{						   ||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_oth_sus_prod_case_blnd
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN first_sus_prod <> 1  AND drug_type = 1
												    THEN 
														CASE WHEN case_blinded = 0 THEN BLIND_NAME
															 WHEN study_blinded = 0 THEN BLIND_NAME
															 WHEN (case_blinded = 1 AND study_blinded = 1) OR open_label_study = 1 THEN lp_prod_name
															 ELSE product_name END
													||', 'END).EXTRACT('//text()') O}') || TO_CLOB(q'{RDER BY sort_id) AS CLOB) csv_oth_sus_prod_stdy_blnd
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN co_drug_code = 'Study Drug' THEN product_name||', 'END).EXTRACT('//text()') ORDER BY seq_num) AS CLOB) csv_study_products
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN co_drug_code = 'Study Drug' 
												   THEN 
													  CASE WHEN open_label_study = 1 THEN lp_prod_name
														   WHEN ( case_blinded = 0) THEN BLIND_NAME
														   ELSE product_name END
												   ||', 'E}') || TO_CLOB(q'{ND).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_study_products_case_blnd
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN co_drug_code = 'Study Drug' 
												   THEN 
													  CASE WHEN case_blinded = 0 THEN BLIND_NAME
														   WHEN study_blinded = 0 THEN BLIND_NAME
												           WHEN (case_blinded = 1 AND study_blinded = 1) OR open_label_study = 1 THEN lp_prod_name
														   ELSE product_name END
												||', 'END).EXTRACT('//text()') ORDER BY sort_id)}') || TO_CLOB(q'{ AS CLOB) csv_study_products_stdy_blnd
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN drug_type = 1 
												   THEN CASE WHEN open_label_study = 1 THEN lp_prod_name
												             WHEN (  case_blinded = 0) THEN BLIND_NAME
															 ELSE product_name END
												   ||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_sus_product_case_blnd
					  ,MAX(CASE WHEN first_sus_prod = 1 THEN 
						   CASE WHEN open_label_study = 1 THEN lp_prod_name
							    WHEN ( case}') || TO_CLOB(q'{_blinded = 0) THEN BLIND_NAME
							    ELSE product_name 
						   END
					   END) c_first_sus_prod_case_blinded
					  ,MAX(CASE WHEN first_sus_prod = 1 THEN 
						   CASE WHEN case_blinded = 0 THEN BLIND_NAME
							    WHEN study_blinded = 0 THEN BLIND_NAME
							    WHEN (case_blinded = 1 AND study_blinded = 1) OR open_label_study = 1 THEN lp_prod_name
							    ELSE product_name 
						   END
					  END) c_first_sus_prod_study_blinded
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN drug}') || TO_CLOB(q'{_type = 1 THEN product_name_j||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_sus_prod_j
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN drug_type = 2 THEN product_name_j||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_conmed_product_j
					  ,MAX(CASE WHEN first_sus_prod = 1 THEN product_name_j END) c_prim_sus_prod_j
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN drug_type = 3 THEN product_name_j ||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_treatment_prod}') || TO_CLOB(q'{uct_j
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN open_label_study = 1 THEN NVL(lp_prod_generic_name_j,lp_prod_generic_name)
														WHEN (case_blinded = 0) THEN BLIND_NAME
														ELSE NVL(generic_name_j,GENERIC_NAME) END ||', ').EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_gen_name_case_blinded_j
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN case_blinded = 0 THEN BLIND_NAME
													    WHEN study_blinded = 0 THEN BLIND_NAME
														WHEN (case_blinded = 1 AND stud}') || TO_CLOB(q'{y_blinded = 1) OR open_label_study = 1 THEN NVL(lp_prod_generic_name_j,lp_prod_generic_name)
														ELSE NVL(generic_name_j,GENERIC_NAME) END
											   ||', ').EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_gen_name_study_blinded_j
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,NVL(generic_name_j,GENERIC_NAME)||', ').EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_generic_name_j
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN first_sus_prod <> 1  AND drug_type = 1 
												   THEN 
				}') || TO_CLOB(q'{										CASE WHEN open_label_study = 1 THEN lp_prod_name_j
															 WHEN (  case_blinded = 0) THEN BLIND_NAME
															 ELSE product_name_j 
													    END
													||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_oth_sus_prod_case_blnd_j
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN first_sus_prod <> 1 AND drug_type = 1 THEN product_name_j||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_oth_sus_prod_j
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WH}') || TO_CLOB(q'{EN first_sus_prod <> 1  AND drug_type = 1 THEN 
												   CASE WHEN case_blinded = 0 THEN BLIND_NAME
													    WHEN study_blinded = 0 THEN BLIND_NAME
														WHEN (case_blinded = 1 AND study_blinded = 1) OR open_label_study = 1 THEN lp_prod_name_j
														ELSE product_name_j
													END
											   ||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_oth_sus_prod_stdy_blnd_j
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN co_drug_code = 'Study Drug' THEN 
		}') || TO_CLOB(q'{										   CASE WHEN open_label_study = 1 THEN lp_prod_name_j
														WHEN (  case_blinded = 0) THEN BLIND_NAME
														ELSE product_name_j 
												   END
											  ||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_study_products_case_blnd_j
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN co_drug_code = 'Study Drug' THEN product_name_j||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_study_products_j
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN co_dru}') || TO_CLOB(q'{g_code = 'Study Drug' THEN 
												   CASE WHEN case_blinded = 0 THEN BLIND_NAME
													    WHEN study_blinded = 0 THEN BLIND_NAME
														WHEN (case_blinded = 1 AND study_blinded = 1) OR open_label_study = 1 THEN lp_prod_name_j
														ELSE product_name_j 
												   END
					                          ||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_study_products_stdy_blnd_j
					  ,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN drug_type = 1 THEN 
												  }') || TO_CLOB(q'{ CASE WHEN open_label_study = 1 THEN lp_prod_name_j
														WHEN (  case_blinded = 0) THEN BLIND_NAME
														ELSE product_name_j 
												   END
											  ||', 'END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB) csv_sus_product_case_blnd_j
					  ,MAX(CASE WHEN first_sus_prod = 1 THEN 
						   CASE WHEN open_label_study = 1 THEN lp_prod_name_j
							    WHEN (  case_blinded = 0) THEN BLIND_NAME
							    ELSE product_name_j 
						   END
					  ||', 'END) c_first_sus_prod}') || TO_CLOB(q'{_case_blind_j
					  ,MAX(CASE WHEN first_sus_prod = 1 THEN 
						   CASE WHEN case_blinded = 0 THEN BLIND_NAME
							    WHEN study_blinded = 0 THEN BLIND_NAME
							    WHEN (case_blinded = 1 AND study_blinded = 1) OR open_label_study = 1 THEN lp_prod_name_j
							    ELSE product_name_j 
						   END
					  ||', 'END) c_first_sus_prod_study_blind_j,
					  MAX(CASE WHEN first_sus_prod = 1 THEN SEQ_NUM END)  c_prim_sus_prod_seq
					,XMLCAST(XMLAGG(XMLELEMENT(e,CASE WHEN co_drug_code = 'St}') || TO_CLOB(q'{udy Drug' 
												   THEN 
													  CASE WHEN open_label_study = 1 THEN lp_prod_name
														   WHEN ( case_blinded = 0) THEN BLIND_NAME
														   ELSE product_name END
												   ||CHR(10)END).EXTRACT('//text()') ORDER BY sort_id) AS CLOB)  lf_study_products_case_blnd
, max(c_cohort_id) c_cohort_id
				FROM (SELECT blind_name,
						  cp.*,
						  CASE
							  WHEN cp.co_drug_code = 'Study Drug'
							   AND cs.code_broken = 4
						       AND lst.study_type = 'No}') || TO_CLOB(q'{t Blinded' THEN 1
							   ELSE 0
						  END open_label_study,
						  CASE
							  WHEN NVL (co_drug_code, '-999') = 'Study Drug'
						       AND lst.study_type <> 'Not Blinded'
						       AND cs.code_broken = 0 THEN 0
						      WHEN NVL (co_drug_code, '-999') = 'Study Drug'
						       AND lst.study_type <> 'Not Blinded'
						       AND cs.code_broken > 0 THEN 1
						      ELSE -1
						  END case_blinded,
						  CASE
						      WHEN NVL (co_drug_code, '-999') = 'Study Drug'
					}') || TO_CLOB(q'{		   AND lst.study_type <> 'Not Blinded'
							   AND ls.unblind_ok = 0 THEN 0
							  WHEN NVL (co_drug_code, '-999') = 'Study Drug'
							   AND lst.study_type <> 'Not Blinded'
							   AND ls.unblind_ok = 1 THEN 1
						      ELSE -1
						  END study_blinded,
						  lp.prod_name lp_prod_name,
						  lp.prod_name_j lp_prod_name_j,
                          lp.prod_generic_name lp_prod_generic_name ,
                          lp.prod_generic_name_j lp_prod_generic_name_j,
						  spt.pro}') || TO_CLOB(q'{d_type_name,
                          lsp.prod_type_id,
						  CS.COHORT_ID C_COHORT_ID 
					   FROM argus.v_case_master ecp,
                      (SELECT * FROM argus.v_case_product where deleted is null) cp,
						  (SELECT * FROM "ARGUS".v_case_study WHERE deleted IS NULL) cs,
						  (SELECT * FROM "ARGUS".v_lm_studies WHERE deleted IS NULL) ls,
						  (SELECT * FROM "ARGUS".v_lm_study_types WHERE deleted IS NULL) lst,
						  (SELECT * FROM "ARGUS".v_lm_product WHERE deleted IS NULL) l}') || TO_CLOB(q'{p,
						  (SELECT * FROM "ARGUS".v_lm_study_products WHERE deleted IS NULL) lsp,
						  (SELECT * FROM "ARGUS".v_cl_study_product_type) spt
					  WHERE ecp.case_id = cp.case_id
					  and cp.case_id = cs.case_id(+)
					    AND cs.study_key = ls.study_key(+)
					    AND cs.study_type = lst.study_type_id(+)
					    AND GREATEST (NVL(cp.product_id,-1), NVL(cp.pat_exposure, -1) ) = lp.product_id(+)
					    AND lp.deleted IS NULL
						AND cp.product_id = lsp.product_id(+)
                    }') || TO_CLOB(q'{    and lsp.cohort_id(+) = cs.cohort_id
						AND lsp.prod_type_id = spt.prod_type_id(+))
					  GROUP BY case_id) vcprod					  
            WHERE ecp.case_id = vcprod.case_id(+))}'),TO_CLOB(q'{SELECT  CASE_ID ,
to_char(substr(CSV_SUS_PROD,1,1000)),
to_char(substr(CSV_CONMED_PRODUCT,1,1000)),
to_char(substr(C_PRIM_SUS_PROD,1,1000)),
to_char(substr(CSV_TREATMENT_PRODUCT,1,1000)),
to_char(substr(CSV_GEN_NAME_CASE_BLINDED,1,1000)),
to_char(substr(CSV_GEN_NAME_STUDY_BLINDED,1,1000)),
to_char(substr(CSV_GENERIC_NAME,1,1000)),
to_char(substr(CSV_OTH_SUS_PROD,1,1000)),
to_char(substr(CSV_OTH_SUS_PROD_CASE_BLND,1,1000)),
to_char(substr(CSV_OTH_SUS_PROD_STDY_BLND,1,1000)),
to_char(substr(CSV_ST}') || TO_CLOB(q'{UDY_PRODUCTS,1,1000)),
to_char(substr(CSV_STUDY_PRODUCTS_CASE_BLND,1,1000)),
to_char(substr(CSV_STUDY_PRODUCTS_STDY_BLND,1,1000)),
to_char(substr(CSV_SUS_PRODUCT_CASE_BLND,1,1000)),
to_char(substr(C_FIRST_SUS_PROD_CASE_BLINDED,1,1000)),
to_char(substr(C_FIRST_SUS_PROD_STUDY_BLINDED,1,1000)),
to_char(substr(CSV_SUS_PROD_J,1,1000)),
to_char(substr(CSV_CONMED_PRODUCT_J,1,1000)),
to_char(substr(C_PRIM_SUS_PROD_J,1,1000)),
to_char(substr(CSV_TREATMENT_PRODUCT_J,1,1000)),
to_char(substr(CSV_GEN_NAME_C}') || TO_CLOB(q'{ASE_BLINDED_J,1,1000)),
to_char(substr(CSV_GEN_NAME_STUDY_BLINDED_J,1,1000)),
to_char(substr(CSV_GENERIC_NAME_J,1,1000)),
to_char(substr(CSV_OTH_SUS_PROD_CASE_BLND_J,1,1000)),
to_char(substr(CSV_OTH_SUS_PROD_J,1,1000)),
to_char(substr(CSV_OTH_SUS_PROD_STDY_BLND_J,1,1000)),
to_char(substr(CSV_STUDY_PRODUCTS_CASE_BLND_J,1,1000)),
to_char(substr(CSV_STUDY_PRODUCTS_J,1,1000)),
to_char(substr(CSV_STUDY_PRODUCTS_STDY_BLND_J,1,1000)),
to_char(substr(CSV_SUS_PRODUCT_CASE_BLND_J,1,1000)),
to_char(substr(}') || TO_CLOB(q'{C_FIRST_SUS_PROD_CASE_BLIND_J,1,1000)),
to_char(substr(C_FIRST_SUS_PROD_STUDY_BLIND_J,1,1000)),
to_char(substr(C_PRIM_SUS_PROD_SEQ,1,1000)),
to_char(substr(LF_STUDY_PRODUCTS_CASE_BLND,1,1000)),
to_char(substr(LF_STUDY_IMP_PRODUCTS,1,1000))
            FROM &MARTUSERNAME..DM_CASE_DATA}'));
Insert into &ETLUSERNAME..DM_MQ_RESULTS (SRC_TABLE_NAME,TGT_TABLE_NAME,COLUMN_LIST,COUNT_S_MINUS_T,COUNT_T_MINUS_S,STATUS,ERROR_MESSAGE,SRC_SQL,TGT_SQL) values ('CASE_EVENT','DM_CASE_EVENT','CSV_OTHER_EVENT_PT,
        CSV_OTHER_SER_EVENT_PT,
        C_DIAGNOSIS,
        C_SC_DEATH,
        C_SC_HOSP,
        C_SC_CONG_ANOM,
        C_SC_THREAT,
        C_SC_DISABLE,
        C_SC_INT_REQ,
        C_SC_OTHER,
        C_SERIOUSNESS,
        C_SERIOUSNESS_CRITERIA,
        ONSET_DATE_PARTIAL,
        STOP_DATE_PARTIAL,',null,null,null,null,TO_CLOB(q'{SELECT
    VCE.CASE_ID,
    VCE.SEQ_NUM,

    CASE WHEN VCE.Diagnosis = 1 THEN 'Yes' ELSE '' END AS C_DIAGNOSIS,
    CASE WHEN VCE.SC_DEATH = 1 THEN 'Yes' ELSE 'No' END AS C_SC_DEATH,
    CASE WHEN VCE.SC_HOSP = 1 THEN 'Yes' ELSE 'No' END AS C_SC_HOSP,
    CASE WHEN VCE.SC_CONG_ANOM = 1 THEN 'Yes' ELSE 'No' END AS C_SC_CONG_ANOM,
    CASE WHEN VCE.SC_THREAT = 1 THEN 'Yes' ELSE 'No' END AS C_SC_THREAT,
    CASE WHEN VCE.SC_DISABLE = 1 THEN 'Yes' ELSE 'No' END AS C_SC_DISABLE,
    CASE WHEN VCE.SC}') || TO_CLOB(q'{_INT_REQ = 1 THEN 'Yes' ELSE 'No' END AS C_SC_INT_REQ,
    CASE WHEN VCE.SC_OTHER = 1 THEN 'Yes' ELSE 'No' END AS C_SC_OTHER,
    CASE WHEN VCE.SERIOUSNESS = 1 THEN 'Yes' ELSE 'No' END AS C_SERIOUSNESS,

    RTRIM(
        CASE WHEN vce.med_serious = 1 THEN 'Medically Significant, ' END ||
        CASE WHEN vce.sc_death = 1 THEN 'Death, ' END ||
        CASE WHEN vce.sc_cong_anom = 1 THEN 'Congenital Anomaly, ' END ||
        CASE WHEN vce.sc_threat = 1 THEN 'Life Threatening, ' END ||
        C}') || TO_CLOB(q'{ASE WHEN vce.sc_disable = 1 THEN 'Disability, ' END ||
        CASE WHEN vce.sc_hosp = 1 THEN 'Hospitalized, ' END ||
        CASE WHEN vce.sc_int_req = 1 THEN 'Intervention Required, ' END ||
        CASE WHEN vce.sc_other = 1 THEN 'Other Seriousness criteria: ' || vce.sc_other_text || ', ' END, 
        ', '
    ) AS c_seriousness_criteria,

    CASE 
    WHEN VCE.ONSET_DATE_PARTIAL IS NOT NULL THEN 
        CASE 
            WHEN LENGTH(VCE.ONSET_DATE_PARTIAL) = 4 THEN 
                CONCAT}') || TO_CLOB(q'{('??-???-', VCE.ONSET_DATE_PARTIAL)  -- Format for YYYY (Year only)
            WHEN LENGTH(VCE.ONSET_DATE_PARTIAL) = 8 THEN 
                CONCAT('??-', VCE.ONSET_DATE_PARTIAL)  -- Format for YYYYMMDD (Year-Month-Day)
            ELSE 
                TO_CHAR(VCE.ONSET_DATE_PARTIAL)  -- Return as-is if not 4 or 8 characters
        END
    ELSE 
        ( 
            SELECT '[NF:' || vcldd.display_value || ']' 
            FROM argus.v_case_null_flavor vcnf
            JOIN argus.v_code_list}') || TO_CLOB(q'{_detail_discrete vcldd 
                ON vcnf.null_flavor_code = vcldd.code
            WHERE vcnf.case_id = VCE.case_id
              AND vcnf.field_id = 1140016 
              AND vcnf.deleted IS NULL
              AND vcldd.code_list_id = 'NULL_FLAVOR'  
              AND vcldd.decode_context = 'NULL_FLAVOR' 
            FETCH FIRST 1 ROW ONLY
        )
END AS ONSET_DATE_PARTIAL, CASE 
    WHEN VCE.STOP_DATE_PARTIAL IS NOT NULL THEN 
        CASE 
            WHEN LENGTH(VCE.STOP_DATE_PARTI}') || TO_CLOB(q'{AL) = 4 THEN 
                CONCAT('??-???-', VCE.STOP_DATE_PARTIAL)  -- Format for YYYY (Year only)
            WHEN LENGTH(VCE.STOP_DATE_PARTIAL) = 8 THEN 
                CONCAT('??-', VCE.STOP_DATE_PARTIAL)  -- Format for YYYYMMDD (Year-Month-Day)
            ELSE 
                TO_CHAR(VCE.STOP_DATE_PARTIAL)  -- Return as-is if not 4 or 8 characters
        END
    ELSE 
        ( 
            -- If the stop_date_partial is NULL, fetch the value from the NULL_FLAVOR table
            SE}') || TO_CLOB(q'{LECT '[NF:' || vcldd.display_value || ']'  -- Format as a null flavor string
            FROM argus.v_case_null_flavor vcnf
            JOIN argus.v_code_list_detail_discrete vcldd 
                ON vcnf.null_flavor_code = vcldd.code
            WHERE vcnf.case_id = VCE.case_id
              AND vcnf.field_id = 1140037  -- Specific field ID for stop_date_partial (confirm this ID)
              AND vcnf.deleted IS NULL
              AND vcldd.code_list_id = 'NULL_FLAVOR'  -- Code list for null }') || TO_CLOB(q'{flavors
              AND vcldd.decode_context = 'NULL_FLAVOR'  -- Context for null flavor
            FETCH FIRST 1 ROW ONLY  -- Limit to one result for efficiency
        )
END AS STOP_DATE_PARTIAL,

    CASE WHEN VCE.EFFICACY = 1 THEN 'Yes' ELSE '' END AS C_EFFICACY,
    CASE WHEN VCE.DISEASE = 1 THEN 'Yes' ELSE '' END AS C_DISEASE,
    CASE WHEN VCE.WITHDRAWAL = 1 THEN 'Yes' ELSE '' END AS C_WITHDRAWAL,
    CASE WHEN VCE.STUDY_DROPPED = 1 THEN 'Yes' ELSE '' END AS C_STUDY_DROPPED,

    (SELE}') || TO_CLOB(q'{CT 
        CASE
            WHEN LENGTH(VCDCD.SPLIT_DETAILS) > 3997 THEN
                SUBSTR(VCDCD.SPLIT_DETAILS, 1, 3997) || '...'
            ELSE
                VCDCD.SPLIT_DETAILS
        END 
     FROM argus.v_CASE_EVENT_CLOB_DETAILS VCDCD
     WHERE VCE.CASE_ID = VCDCD.CASE_ID
       AND VCE.SEQ_NUM = VCDCD.SEQ_NUM
       AND VCDCD.TEXT_ORDER = 1) AS C_DETAILS,

    VCE.ONSET_LATENCY_seconds / 86400 AS C_ONSET_LATENCY_DAYS,

    CASE 
        WHEN VCE.report_exclusion = 1 THEN 'Yes'
 }') || TO_CLOB(q'{       ELSE ''
    END AS C_REPORT_EXCLUSION,
    CASE 
        WHEN VCE.infection = 1 THEN 'Yes'
        ELSE ''
    END AS C_INFECTION,
    CASE 
        WHEN VCE.emergency_room_visit = 1 THEN 'Yes'
        ELSE ''
    END AS C_EMERGENCY_ROOM_VISIT,
    CASE 
        WHEN VCE.physician_office_visit = 1 THEN 'Yes'
        ELSE ''
    END AS C_PHYSICIAN_OFFICE_VISIT,

    CASE 
        WHEN VCE.sc_death = 1 OR VCE.evt_outcome_id = 1 OR VCE.hlt = 'Death and sudden death (10011907)' OR VLEI.evt_in}') || TO_CLOB(q'{tensity LIKE '%Grade 5%' 
        THEN 'Yes' 
        ELSE 'No' 
    END AS C_EVENT_DEATH_CRITERIA,


    CASE 
        WHEN VCE.sc_death = 1 THEN 'Yes'
        ELSE 'No'
    END AS c_sc_death_j,

    CASE 
        WHEN VCE.sc_hosp = 1 THEN 'Yes'
        ELSE ''
    END AS c_sc_hosp_j,

    CASE 
        WHEN VCE.sc_cong_anom = 1 THEN 'Yes'
        ELSE ''
    END AS c_sc_cong_anom_j,

    CASE 
        WHEN VCE.sc_threat = 1 THEN 'Yes'
        ELSE ''
    END AS c_sc_threat_j,

    CASE 
      }') || TO_CLOB(q'{  WHEN VCE.sc_disable = 1 THEN 'Yes'
        ELSE ''
    END AS c_sc_disable_j,

    CASE 
        WHEN VCE.sc_int_req = 1 THEN 'Yes'
        ELSE ''
    END AS c_sc_int_req_j,

    CASE 
        WHEN VCE.sc_other = 1 THEN 'Yes'
        ELSE ''
    END AS c_sc_other_j,    
    CASE 
        WHEN VCE.seriousness = 1 THEN 'Yes'
        ELSE ''
    END AS c_seriousness_j,

    CASE 
        WHEN VCE.efficacy = 1 THEN 'Yes'
        ELSE ''
    END AS c_efficacy_j,

    CASE 
        WHEN VCE.disease}') || TO_CLOB(q'{ = 1 THEN 'Yes'
        ELSE ''
    END AS c_disease_j,

    CASE 
        WHEN VCE.withdrawal = 1 THEN 'Yes'
        ELSE ''
    END AS c_withdrawal_j,

    CASE 
        WHEN VCE.study_dropped = 1 THEN 'Yes'
        ELSE ''
    END AS c_study_dropped_j,

    CASE 
        WHEN VCE.report_exclusion = 1 THEN 'Yes'
        ELSE ''
    END AS c_report_exclusion_j,

    CASE 
        WHEN VCE.infection = 1 THEN 'Yes'
        ELSE ''
    END AS c_infection_j,

    CASE 
        WHEN VCE.emergency_ro}') || TO_CLOB(q'{om_visit = 1 THEN 'Yes'
        ELSE ''
    END AS c_emergency_room_visit_j,

    CASE 
        WHEN VCE.physician_office_visit = 1 THEN 'Yes'
        ELSE ''
    END AS c_physician_office_visit_j,

    (SELECT 
        CASE
            WHEN LENGTH(VCDCD.SPLIT_DETAILS) > 3997 THEN
                SUBSTR(VCDCD.SPLIT_DETAILS, 1, 3997) || '...'
            ELSE
                VCDCD.SPLIT_DETAILS
        END 
     FROM argus.v_CASE_EVENT_CLOB_DETAILS_J VCDCD
     WHERE VCE.CASE_ID = VCDCD.CASE_ID
 }') || TO_CLOB(q'{      AND VCE.SEQ_NUM = VCDCD.SEQ_NUM
       AND VCDCD.TEXT_ORDER = 1) AS C_DETAILS_J
FROM argus.v_case_event VCE
LEFT JOIN (SELECT * FROM argus.v_lm_evt_intensity VLEI WHERE VLEI.deleted IS NULL) VLEI 
    ON VLEI.evt_intensity_id = VCE.evt_intensity_id
WHERE VCE.DELETED IS NULL}'),TO_CLOB(q'{SELECT 
    CASE_ID,
    SEQ_NUM,
    C_DIAGNOSIS,
    C_SC_DEATH,
    C_SC_HOSP,
    C_SC_CONG_ANOM,
    C_SC_THREAT,
    C_SC_DISABLE,
    C_SC_INT_REQ,
    C_SC_OTHER,
    C_SERIOUSNESS,
    C_SERIOUSNESS_CRITERIA,
    ONSET_DATE_PARTIAL,
    STOP_DATE_PARTIAL,
    C_EFFICACY,
    C_DISEASE,
    C_WITHDRAWAL,
    C_STUDY_DROPPED,
    C_DETAILS,
    C_ONSET_LATENCY_DAYS,
    C_REPORT_EXCLUSION,
    C_INFECTION,
    C_EMERGENCY_ROOM_VISIT,
    C_PHYSICIAN_OFFICE_VISIT,
    C_EVENT_DEATH_CRITERI}') || TO_CLOB(q'{A,
    C_SC_DEATH_J,
    C_SC_HOSP_J,
    C_SC_CONG_ANOM_J,
    C_SC_THREAT_J,
    C_SC_DISABLE_J,
    C_SC_INT_REQ_J,
    C_SC_OTHER_J,
    C_SERIOUSNESS_J,
    C_EFFICACY_J,
    C_DISEASE_J,
    C_WITHDRAWAL_J,
    C_STUDY_DROPPED_J,
    C_REPORT_EXCLUSION_J,
    C_INFECTION_J,
    C_EMERGENCY_ROOM_VISIT_J,
    C_PHYSICIAN_OFFICE_VISIT_J,
    C_DETAILS_J
FROM &MARTUSERNAME..DM_CASE_EVENT
WHERE SEQ_NUM > 0}'));
